{
	"LoadAnim Anim#,Filename$[,Palette#]": {
		"prefix": "LoadAnim",
		"body": "LoadAnim ${1:Anim#,Filename$[,Palette#]}",
		"description": "The LoadAnim command will create an Anim object and load a DPaint compatible animation."
	},
	"InitAnim Anim#[,BitMap#]": {
		"prefix": "InitAnim",
		"body": "InitAnim ${1:Anim#[,BitMap#]}",
		"description": "InitAnim renders the first two frames of the Anim onto the current BitMap and the BitMap specified by the second parameter."
	},
	"NextFrame Anim#": {
		"prefix": "NextFrame",
		"body": "NextFrame ${1:Anim#}",
		"description": "NextFrame renders the nextframe of an Anim to the current BitMap."
	},
	"Frames(Anim#)": {
		"prefix": "Frames",
		"body": "Frames(${1:Anim#})",
		"description": "The Frames() function returns the number of frames in the specified Anim."
	},
	"CreateRexxMsg MsgPtr=CreateRexxMsg(ReplyPort,Exten,Host)": {
		"prefix": "CreateRexxMsg",
		"body": "CreateRexxMsg ${1:MsgPtr=CreateRexxMsg(ReplyPort,Exten,Host)}",
		"description": "CreateRexxMsg() allocates a special Message structure used to communicate with Arexx."
	},
	"DeleteRexxMsg rexxmsg.l": {
		"prefix": "DeleteRexxMsg",
		"body": "DeleteRexxMsg ${1:rexxmsg.l}",
		"description": "DeleteRexxMsg simply deletes a RexxMsg Structure previously allocated by CreateRexxMsg()."
	},
	"FillRexxMsg rexxmsg,&FillStruct": {
		"prefix": "FillRexxMsg",
		"body": "FillRexxMsg ${1:rexxmsg,&FillStruct}",
		"description": "FillRexxMsg allows you to fill all 16 ARGSlots if necessary with either ArgStrings or numerical values depending on your requirement."
	},
	"ClearRexxMsg rexxmsg": {
		"prefix": "ClearRexxMsg",
		"body": "ClearRexxMsg ${1:rexxmsg}",
		"description": "ClearRexxMsg is used to delete and clear an ArgString from one or more of the Argument slots in a RexxMsg Structure."
	},
	"CreateArgString ArgString=CreateArgString(String)": {
		"prefix": "CreateArgString",
		"body": "CreateArgString ${1:ArgString=CreateArgString(String)}",
		"description": "CreateArgString() builds an ARexx compatible ArgString structure around the provided string."
	},
	"DeleteArgString argstring": {
		"prefix": "DeleteArgString",
		"body": "DeleteArgString ${1:argstring}",
		"description": "DeleteArgString is designed to Delete ArgStrings allocated by either Blitz or ARexx in a system friendly way."
	},
	"SendRexxCommand rexxmsg,CommandString,ActionCodes": {
		"prefix": "SendRexxCommand",
		"body": "SendRexxCommand ${1:rexxmsg,CommandString,ActionCodes}",
		"description": "SendRexxCommand is designed to fill and send a RexxMsg structure to ARexx inorder to get ARexx to do something on your behalf."
	},
	"ReplyRexxMsg rexxmsg,Result1,Result2,ResultString": {
		"prefix": "ReplyRexxMsg",
		"body": "ReplyRexxMsg ${1:rexxmsg,Result1,Result2,ResultString}",
		"description": "When ARexx sends you a RexxMsg (Other than a reply to yours i."
	},
	"GetRexxResult Result=GetRexxResult(rexxmsg,ResultNum)": {
		"prefix": "GetRexxResult",
		"body": "GetRexxResult ${1:Result=GetRexxResult(rexxmsg,ResultNum)}",
		"description": ""
	},
	"GetRexxCommand String=GetRexxCommand(rexxmsg,ARGNum)": {
		"prefix": "GetRexxCommand",
		"body": "GetRexxCommand ${1:String=GetRexxCommand(rexxmsg,ARGNum)}",
		"description": "GetRexxCommand allows you access to all 16 ArgString slots in the given RexxMsg."
	},
	"GetResultString String=GetResultString(rexxmsg)": {
		"prefix": "GetResultString",
		"body": "GetResultString ${1:String=GetResultString(rexxmsg)}",
		"description": "GetResultString allows you to extract the result string returned to you by ARexx after it has completed the action you requested."
	},
	"RexxEvent rexxmsg=RexxEvent(PortAddress)": {
		"prefix": "RexxEvent",
		"body": "RexxEvent ${1:rexxmsg=RexxEvent(PortAddress)}",
		"description": "RexxEvent is our Arexx Equivalent of EVENT()."
	},
	"IsRexxMsg Boolean=IsRexxMsg(rexxmsg)": {
		"prefix": "IsRexxMsg",
		"body": "IsRexxMsg ${1:Boolean=IsRexxMsg(rexxmsg)}",
		"description": "IsRexxMsg tests the argument (a LONGWORD pointer hopefully to a message packet) to see if it is a RexxMsg Packet."
	},
	"RexxError ErrorString=RexxError(ErrorCode)": {
		"prefix": "RexxError",
		"body": "RexxError ${1:ErrorString=RexxError(ErrorCode)}",
		"description": ""
	},
	"DiskPlay Filename$,Channelmask[,Vol1[,Vol2...]]": {
		"prefix": "DiskPlay",
		"body": "DiskPlay ${1:Filename$,Channelmask[,Vol1[,Vol2...]]}",
		"description": "DiskPlay will play an 8SVX IFF sound file straight from disk."
	},
	"DiskBuffer Bufferlen": {
		"prefix": "DiskBuffer",
		"body": "DiskBuffer ${1:Bufferlen}",
		"description": "DiskBuffer allows you to set the size of the memory buffer used by the DiskPlay command."
	},
	"LoadSound Sound#,Filename$": {
		"prefix": "LoadSound",
		"body": "LoadSound ${1:Sound#,Filename$}",
		"description": "LoadSound creates a sound object for later playback."
	},
	"Sound Sound#,Channelmask[,Vol1[,Vol2...]]": {
		"prefix": "Sound",
		"body": "Sound ${1:Sound#,Channelmask[,Vol1[,Vol2...]]}",
		"description": "Sound causes a previously created sound object to be played through the Amiga's audio hardware."
	},
	"Volume Channelmask,Vol1[,Vol2...]": {
		"prefix": "Volume",
		"body": "Volume ${1:Channelmask,Vol1[,Vol2...]}",
		"description": "Volume allows you to dynamically alter the volume of an audio channel."
	},
	"Filter On|Off": {
		"prefix": "Filter",
		"body": "Filter ${1:On|Off}",
		"description": "Filter may be used to turn on or off the Amiga's low pass audio filter."
	},
	"LoopSound Sound#,Channelmask[,Vol1[,Vol2...]]": {
		"prefix": "LoopSound",
		"body": "LoopSound ${1:Sound#,Channelmask[,Vol1[,Vol2...]]}",
		"description": "LoopSound behaves identically to Sound, only the sound will be played repeatedly."
	},
	"InitSound Sound#,Length[,Period[,Repeat]]": {
		"prefix": "InitSound",
		"body": "InitSound ${1:Sound#,Length[,Period[,Repeat]]}",
		"description": "InitSound initializes a sound object in preparation for the creation of custom sound data."
	},
	"SoundData Sound#,Offset,Data": {
		"prefix": "SoundData",
		"body": "SoundData ${1:Sound#,Offset,Data}",
		"description": "SoundData allows you to manually specify the waveform of a sound object."
	},
	"PeekSound(Sound#,Offset)": {
		"prefix": "PeekSound",
		"body": "PeekSound(${1:Sound#,Offset})",
		"description": "PeekSound returns the byte of a sample at the specified offset of the sound object specified."
	},
	"DecodeSound Sound#,MemoryLocation": {
		"prefix": "DecodeSound",
		"body": "DecodeSound ${1:Sound#,MemoryLocation}",
		"description": "DecodeSound, similar to the other new Decode commands allows the programmer to include sound files within their program's object code."
	},
	"SetPeriod Sound#,Period": {
		"prefix": "SetPeriod",
		"body": "SetPeriod ${1:Sound#,Period}",
		"description": "This command allows the programmer to manually adjust the period of the sound object to change it's effective pitch."
	},
	"Bank(bank#)": {
		"prefix": "Bank",
		"body": "Bank(${1:bank#})",
		"description": "returns location of bank, 0 if not in use."
	},
	"InitBank bank#,size,memtype": {
		"prefix": "InitBank",
		"body": "InitBank ${1:bank#,size,memtype}",
		"description": "0=fast 2=chip 65536=clrmem."
	},
	"FreeBank bank#": {
		"prefix": "FreeBank",
		"body": "FreeBank ${1:bank#}",
		"description": "FreeBank de-allocates any memory block allocated tor the Bank specified."
	},
	"LoadBank bank#,filename$[,memtype]": {
		"prefix": "LoadBank",
		"body": "LoadBank ${1:bank#,filename$[,memtype]}",
		"description": "The LoadBank command has been modified, instead of having to initialise the bank before loading a file, LoadBank will now initialise the bank to the size of the file if it is not already large enough or has not been initialised at all."
	},
	"SaveBank bank#,filename$": {
		"prefix": "SaveBank",
		"body": "SaveBank ${1:bank#,filename$}",
		"description": "SaveBank will save the memory assigned to the Bank to the filename specified."
	},
	"BankLoc(bank#)": {
		"prefix": "BankLoc",
		"body": "BankLoc(${1:bank#})",
		"description": ""
	},
	"BankSize(bank#)": {
		"prefix": "BankSize",
		"body": "BankSize(${1:bank#})",
		"description": "BankSize returns the size of the memory hlock allocated for the specified Bank#."
	},
	"AllocMem(size,memtype) memtype: 0=fast 2=chip 65536=clrmem": {
		"prefix": "AllocMem",
		"body": "AllocMem(${1:size,memtype) memtype: 0=fast 2=chip 65536=clrmem})",
		"description": "Unlike calling Exec's AllocMem command directly Blitz will automatically free any allocated memory when the program ends."
	},
	"FreeMem address,size": {
		"prefix": "FreeMem",
		"body": "FreeMem ${1:address,size}",
		"description": "Used to tree any memory allocated with the AllocMem command."
	},
	"ASLFileRequest$ Title$,Pathname$,Filename$ [,Pattern$] [,x,y,w,h]": {
		"prefix": "ASLFileRequest$",
		"body": "ASLFileRequest$ ${1:Title$,Pathname$,Filename$ [,Pattern$] [,x,y,w,h]}",
		"description": "The ASL File Requester is nice."
	},
	"ASLFontRequest enable flags (1=pen 2=bckgrnd 4=style 8=drawmode 16=fixedsize)": {
		"prefix": "ASLFontRequest",
		"body": "ASLFontRequest ${1:enable flags (1=pen 2=bckgrnd 4=style 8=drawmode 16=fixedsize)}",
		"description": "The ASL Font Requester is also pretty useful."
	},
	"ASLScreenRequest enable flags (1=width 2=height 4=depth 8=overscan 16=scroll)": {
		"prefix": "ASLScreenRequest",
		"body": "ASLScreenRequest ${1:enable flags (1=width 2=height 4=depth 8=overscan 16=scroll)}",
		"description": ""
	},
	"ASLPathRequest$ Title$,Pathname$ [,x,y,w,h]": {
		"prefix": "ASLPathRequest$",
		"body": "ASLPathRequest$ ${1:Title$,Pathname$ [,x,y,w,h]}",
		"description": "Same as ASLFileRequest$ except will just prompt the user for a path name (directory) rather than an actual file."
	},
	"ASLMultiSelect Title$,Pathname$,Filename$[,x,y,w,h]": {
		"prefix": "ASLMultiSelect",
		"body": "ASLMultiSelect ${1:Title$,Pathname$,Filename$[,x,y,w,h]}",
		"description": ""
	},
	"ASLGetFile(argnum)": {
		"prefix": "ASLGetFile",
		"body": "ASLGetFile(${1:argnum})",
		"description": ""
	},
	"ASLNextFile": {
		"prefix": "ASLNextFile",
		"body": "ASLNextFile",
		"description": ""
	},
	"ASLFreeRequest": {
		"prefix": "ASLFreeRequest",
		"body": "ASLFreeRequest",
		"description": ""
	},
	"ASLNumFiles": {
		"prefix": "ASLNumFiles",
		"body": "ASLNumFiles",
		"description": ""
	},
	"GTButton GTList#,id.w,x.w,y.w,w.w,h.w,Text$,flags.l[,UserData.l]": {
		"prefix": "GTButton",
		"body": "GTButton ${1:GTList#,id.w,x.w,y.w,w.w,h.w,Text$,flags.l[,UserData.l]}",
		"description": "Same as Blitz's TextGadget but with the added flexibility of placing the label Text$ above, below to the left or right of the button (see flags)."
	},
	"GTCheckBox GTList#,id,x,y,w,h,Text$,flags": {
		"prefix": "GTCheckBox",
		"body": "GTCheckBox ${1:GTList#,id,x,y,w,h,Text$,flags}",
		"description": "A box with a check mark that toggles on and off, best used for options that are either enabled or disabled."
	},
	"GTCycle GTList#,id,x,y,w,h,Text$,flags,Options$[,active]": {
		"prefix": "GTCycle",
		"body": "GTCycle ${1:GTList#,id,x,y,w,h,Text$,flags,Options$[,active]}",
		"description": "Used for offering the user a range of options, the options string should be a list of options separated by the 1 character ea."
	},
	"GTInteger GTList#,id,x,y,w,h,Text$,flags,default": {
		"prefix": "GTInteger",
		"body": "GTInteger ${1:GTList#,id,x,y,w,h,Text$,flags,default}",
		"description": "A string gadget that allows only numbers to be entered by the user."
	},
	"GTListView GTList#,id,x,y,w,h,Text$,flags,list()[,selected[,top]]": {
		"prefix": "GTListView",
		"body": "GTListView ${1:GTList#,id,x,y,w,h,Text$,flags,list()[,selected[,top]]}",
		"description": "The ListView gadget enables the user to scroll through a list of options."
	},
	"GTMX GTList#,id,x,y,w,h,Text$,flags,Options$[,active]": {
		"prefix": "GTMX",
		"body": "GTMX ${1:GTList#,id,x,y,w,h,Text$,flags,Options$[,active]}",
		"description": "GTMX is an exclusive selection gadget, the Options$ is the same as GTCycle in format, GadTools then displays all the options in a vertical list each with a hi-light beside them."
	},
	"GTNumber GTList#,id,x,y,w,h,Text$,flags,value": {
		"prefix": "GTNumber",
		"body": "GTNumber ${1:GTList#,id,x,y,w,h,Text$,flags,value}",
		"description": "This is a readonly gadget (user cannot interact with it) used to display numbers."
	},
	"GTPalette GTList#,id,x,y,w,h,Text$,flags,depth[,Color]": {
		"prefix": "GTPalette",
		"body": "GTPalette ${1:GTList#,id,x,y,w,h,Text$,flags,depth[,Color]}",
		"description": "Creates a number of coloured boxes relating to a colour palette,."
	},
	"GTScroller GTList#,id,x,y,w,h,Text$,flags,Visible,Total[,Top]": {
		"prefix": "GTScroller",
		"body": "GTScroller ${1:GTList#,id,x,y,w,h,Text$,flags,Visible,Total[,Top]}",
		"description": "A prop type gadget for the user to control an amount or level, is accompanied by a set of arrow gadgets."
	},
	"GTSlider GTList#,id,x,y,w,h,Text$,flags,Min,Max[,Level]": {
		"prefix": "GTSlider",
		"body": "GTSlider ${1:GTList#,id,x,y,w,h,Text$,flags,Min,Max[,Level]}",
		"description": "Same as Scroller but for controlling the position of the display inside a larger view."
	},
	"GTString GTList#,id,x,y,w,h,Text$,flags,MaxChars [,default$]": {
		"prefix": "GTString",
		"body": "GTString ${1:GTList#,id,x,y,w,h,Text$,flags,MaxChars [,default$]}",
		"description": "A standard string type gadget."
	},
	"GTText GTList#,id,x,y,w,h,Text$,flags,Display$": {
		"prefix": "GTText",
		"body": "GTText ${1:GTList#,id,x,y,w,h,Text$,flags,Display$}",
		"description": "A read only gadget (see GTNumber) for displaying text messages."
	},
	"AttachGTList GTList#,Window#": {
		"prefix": "AttachGTList",
		"body": "AttachGTList ${1:GTList#,Window#}",
		"description": "The AttachGTList command is used to attach a set of GadTools gadgets to a Window after it has been opened."
	},
	"GTTags Tag,Value [,Tag,Value...]": {
		"prefix": "GTTags",
		"body": "GTTags ${1:Tag,Value [,Tag,Value...]}",
		"description": "The GTTags command can be used prior to initialisation of any of the 12 gadtools gadgets to preset any relevant Tag fields."
	},
	"GTGadPtr(GTList#,id)": {
		"prefix": "GTGadPtr",
		"body": "GTGadPtr(${1:GTList#,id})",
		"description": "GTGadPtr returns the actual location of the specified GadTools gadget in memory."
	},
	"GTBevelBox GTList#,x.l,y.l,w.l,h.l,flags.l[,type.l]": {
		"prefix": "GTBevelBox",
		"body": "GTBevelBox ${1:GTList#,x.l,y.l,w.l,h.l,flags.l[,type.l]}",
		"description": "GTBevelBox is the GadTools library equivalent of the Borders command and can be used to render frames and boxes in the currently used Window."
	},
	"GTChangeList GTList#,id [ ,List() ]": {
		"prefix": "GTChangeList",
		"body": "GTChangeList ${1:GTList#,id [ ,List() ]}",
		"description": "GTChangeList must be used whenever a List attached to a GTListView needs to be modified."
	},
	"GTSetAttrs GTList#,id [,Tag,Value...]": {
		"prefix": "GTSetAttrs",
		"body": "GTSetAttrs ${1:GTList#,id [,Tag,Value...]}",
		"description": "GTSetAttrs can be used to modify the status of certain GadTools gadgets with the relevant Tags."
	},
	"GTSetString GTList#,id,string$": {
		"prefix": "GTSetString",
		"body": "GTSetString ${1:GTList#,id,string$}",
		"description": "Used with both GTString and GTText gadgets, GTSetString will not only update the contents of the gadget but redraw it also."
	},
	"GTSetInteger GTList#,id,value": {
		"prefix": "GTSetInteger",
		"body": "GTSetInteger ${1:GTList#,id,value}",
		"description": ""
	},
	"GTGetString GTList#,id": {
		"prefix": "GTGetString",
		"body": "GTGetString ${1:GTList#,id}",
		"description": "Used to read the contents from a GTString gadget."
	},
	"GTGetInteger GTList#,id": {
		"prefix": "GTGetInteger",
		"body": "GTGetInteger ${1:GTList#,id}",
		"description": ""
	},
	"GTShape GTList#,id,x,y,flags,Shape#[,Shape#]": {
		"prefix": "GTShape",
		"body": "GTShape ${1:GTList#,id,x,y,flags,Shape#[,Shape#]}",
		"description": "Similar to the Blitz ShapeGadget allowing IFF graphics that are loaded into Blitz shape objects to be used as gadgets in a window."
	},
	"GTGetAttrs(GTList#,id,Tag)": {
		"prefix": "GTGetAttrs",
		"body": "GTGetAttrs(${1:GTList#,id,Tag})",
		"description": "A 3."
	},
	"GTEnable GTList#,Id": {
		"prefix": "GTEnable",
		"body": "GTEnable ${1:GTList#,Id}",
		"description": "Allows GTGadgets to be enabled and disabled."
	},
	"GTDisable GTList#,Id": {
		"prefix": "GTDisable",
		"body": "GTDisable ${1:GTList#,Id}",
		"description": "Allows GTGadgets to be enabled and disabled."
	},
	"GTToggle GTList#,Id [,On|Off]": {
		"prefix": "GTToggle",
		"body": "GTToggle ${1:GTList#,Id [,On|Off]}",
		"description": "GTToggle allows the programmer to set Boolean gadgets such as GTButton and GTCheckbox to a desired state."
	},
	"GTStatus GTList#,Id": {
		"prefix": "GTStatus",
		"body": "GTStatus ${1:GTList#,Id}",
		"description": "GTStatus returns the status of the gadtools toggle gadgets, a value of 1 means the the gadget is selected, 0 deselected."
	},
	"GTArrowSize size": {
		"prefix": "GTArrowSize",
		"body": "GTArrowSize ${1:size}",
		"description": ""
	},
	"DetachGTList GTList#": {
		"prefix": "DetachGTList",
		"body": "DetachGTList ${1:GTList#}",
		"description": "Removes a GTList from a window."
	},
	"GTGZZPosition On/Off": {
		"prefix": "GTGZZPosition",
		"body": "GTGZZPosition ${1:On/Off}",
		"description": "Turn on/off adding of window borders to gadget positions."
	},
	"GTSetHighlight GTList#,id,value": {
		"prefix": "GTSetHighlight",
		"body": "GTSetHighlight ${1:GTList#,id,value}",
		"description": "Set highlighted item in GTListview."
	},
	"GTFreeGadget [(]GTList#,id[)]": {
		"prefix": "GTFreeGadget",
		"body": "GTFreeGadget ${1:[(]GTList#,id[)]}",
		"description": ""
	},
	"GTActivateGadget GTList#,id": {
		"prefix": "GTActivateGadget",
		"body": "GTActivateGadget ${1:GTList#,id}",
		"description": "Activates a string/custom gadget."
	},
	"GTNewLookProp [Mode=On/Off] or [GTList,ID,On/Off]": {
		"prefix": "GTNewLookProp",
		"body": "GTNewLookProp ${1:[Mode=On/Off] or [GTList,ID,On/Off]}",
		"description": ""
	},
	"GTListAddress(List())  Returns address of List header structure": {
		"prefix": "GTListAddress",
		"body": "GTListAddress(${1:List())  Returns address of List header structure})",
		"description": ""
	},
	"GTUserData UserData.l": {
		"prefix": "GTUserData",
		"body": "GTUserData ${1:UserData.l}",
		"description": "Set userdata for next gadget created."
	},
	"GTChangeCycle [(]GTList.w,ID.w,Option$[)]": {
		"prefix": "GTChangeCycle",
		"body": "GTChangeCycle ${1:[(]GTList.w,ID.w,Option$[)]}",
		"description": "Change contents of GTCycle gadget."
	},
	"GTGetInternal Returns pointer to internal list of memory allocations": {
		"prefix": "GTGetInternal",
		"body": "GTGetInternal ${1:Returns pointer to internal list of memory allocations}",
		"description": ""
	},
	"GTUnderscore char.w": {
		"prefix": "GTUnderscore",
		"body": "GTUnderscore ${1:char.w}",
		"description": "Sets the ASCII code of the character to use as the underscore indicator."
	},
	"GTEventSeconds": {
		"prefix": "GTEventSeconds",
		"body": "GTEventSeconds",
		"description": "Tells you the seconds at which the last event occurred."
	},
	"GTEventMicros": {
		"prefix": "GTEventMicros",
		"body": "GTEventMicros",
		"description": "Tells you the microseconds at which the last event occurred."
	},
	"Buffer Buffer#,Memorylen": {
		"prefix": "Buffer",
		"body": "Buffer ${1:Buffer#,Memorylen}",
		"description": "The Buffer command is used to create a buffer object."
	},
	"BBlit Buffer#,Shape#,X,Y[,Excessonoff]": {
		"prefix": "BBlit",
		"body": "BBlit ${1:Buffer#,Shape#,X,Y[,Excessonoff]}",
		"description": "The BBlit command is used to draw a shape onto the currently used bitmap, and preserve the overwritten area into a previously initialized buffer."
	},
	"UnBuffer Buffer#": {
		"prefix": "UnBuffer",
		"body": "UnBuffer ${1:Buffer#}",
		"description": "UnBuffer is used to 'replace' areas on a bitmap overwritten by a series of BBlit commands."
	},
	"BBlitMode BLTCON0": {
		"prefix": "BBlitMode",
		"body": "BBlitMode ${1:BLTCON0}",
		"description": "BBlitMode allows you to control how the blister operates when BBlitting shapes to bitmaps."
	},
	"ShowStencil Buffer#,Stencil#": {
		"prefix": "ShowStencil",
		"body": "ShowStencil ${1:Buffer#,Stencil#}",
		"description": "ShowStencil is used in connection with BBlits and stencil objects to produce a 'stencil' effect."
	},
	"FlushBuffer Buffer#": {
		"prefix": "FlushBuffer",
		"body": "FlushBuffer ${1:Buffer#}",
		"description": "FlushBuffer will force the specified buffer object to be 'emptied', causing the next UnBuffer command to have no effect."
	},
	"BitMap BitMap#,Width,Height,Depth": {
		"prefix": "BitMap",
		"body": "BitMap ${1:BitMap#,Width,Height,Depth}",
		"description": "BitMap creates and initializes a bitmap object."
	},
	"LoadBitMap BitMap#,Filename$[,Palette#]": {
		"prefix": "LoadBitMap",
		"body": "LoadBitMap ${1:BitMap#,Filename$[,Palette#]}",
		"description": "LoadBitMap allows you to load an ILBM IFF graphic into a previously initialized bitmap object."
	},
	"ScreensBitMap Screen#,BitMap#": {
		"prefix": "ScreensBitMap",
		"body": "ScreensBitMap ${1:Screen#,BitMap#}",
		"description": "Blitz allows you the option of attaching a bitmap object to any Intuition Screens you open."
	},
	"CopyBitMap Src BitMap#,Dest BitMap#": {
		"prefix": "CopyBitMap",
		"body": "CopyBitMap ${1:Src BitMap#,Dest BitMap#}",
		"description": "CopyBitMap will make an exact copy of a bitmap object into another bitmap object."
	},
	"ShapesBitMap Shape#,BitMap#": {
		"prefix": "ShapesBitMap",
		"body": "ShapesBitMap ${1:Shape#,BitMap#}",
		"description": "ShapesBitMap creates a dummy BitMap so drawing commands can be used directly on a shapes image data."
	},
	"CludgeBitMap BitMap#,Width,Height,Depth,Memory": {
		"prefix": "CludgeBitMap",
		"body": "CludgeBitMap ${1:BitMap#,Width,Height,Depth,Memory}",
		"description": "CludgeBitMap will create a bitmap object with the proportions for that specified using the memory location given."
	},
	"Blit Shape#,X,Y[,Excessonoff]": {
		"prefix": "Blit",
		"body": "Blit ${1:Shape#,X,Y[,Excessonoff]}",
		"description": "Blit is the simplest of all the blitting commands."
	},
	"BlitMode BLTCON0": {
		"prefix": "BlitMode",
		"body": "BlitMode ${1:BLTCON0}",
		"description": "The BlitMode command allows you to specify just how the Blit command uses the blister when drawing shapes to bitmaps."
	},
	"CookieMode": {
		"prefix": "CookieMode",
		"body": "CookieMode",
		"description": "The CookieMode function returns a value which may be used by one of the commands involved in blitting modes."
	},
	"EraseMode": {
		"prefix": "EraseMode",
		"body": "EraseMode",
		"description": "The EraseMode function returns a value which may be used by one the commands involved in blitting modes."
	},
	"InvMode": {
		"prefix": "InvMode",
		"body": "InvMode",
		"description": "The InvMode function returns a value which may be used by one the commands involved in blitting modes."
	},
	"SolidMode": {
		"prefix": "SolidMode",
		"body": "SolidMode",
		"description": "The SolidMode function returns a value which may be used by one the commands involved in blitting modes."
	},
	"Block Shape#,X,Y": {
		"prefix": "Block",
		"body": "Block ${1:Shape#,X,Y}",
		"description": "Block is an extremely fast version of the Blit command with some restrictions."
	},
	"BlitColl(Shape#,x,y)": {
		"prefix": "BlitColl",
		"body": "BlitColl(${1:Shape#,x,y})",
		"description": "BlitColl is a fast way of collision detection when blitting shapes."
	},
	"Slice [Slice#,Y,Flags]|[Slice#,Y,Width,Hite,Flgs,Bitplns,Sprts,Colrs,Fscrnw,Bscrnw]": {
		"prefix": "Slice",
		"body": "Slice ${1:[Slice#,Y,Flags]|[Slice#,Y,Width,Hite,Flgs,Bitplns,Sprts,Colrs,Fscrnw,Bscrnw]}",
		"description": "Slice#,Y,Width,Height,Flags,BitPlanes,Sprites,Colours,w1,w2   The Slice command is used to create a Blitz slice object."
	},
	"CopLoc": {
		"prefix": "CopLoc",
		"body": "CopLoc",
		"description": "CopLoc returns the memory address of the Blitz mode copper list."
	},
	"CustomCop Copins$,Y": {
		"prefix": "CustomCop",
		"body": "CustomCop ${1:Copins$,Y}",
		"description": "CustomCop allows advanced programmers to introduce their own copper instructions at a specified position down the display."
	},
	"Show Bitmap#[,X,Y]": {
		"prefix": "Show",
		"body": "Show ${1:Bitmap#[,X,Y]}",
		"description": "Show is used to display a bitmap in the currently used slice."
	},
	"ShowF Bitmap#[,X,Y[,ShowB X]]": {
		"prefix": "ShowF",
		"body": "ShowF ${1:Bitmap#[,X,Y[,ShowB X]]}",
		"description": "ShowF is used to display a bitmap in the foreground of the currently used slice."
	},
	"ShowB Bitmap#[,X,Y[,ShowF X]]": {
		"prefix": "ShowB",
		"body": "ShowB ${1:Bitmap#[,X,Y[,ShowF X]]}",
		"description": "ShowB is used to display a bitmap in the background of the currently used slice."
	},
	"CopLen": {
		"prefix": "CopLen",
		"body": "CopLen",
		"description": "CopLen returns the length, in bytes, of the Blitz mode copper list."
	},
	"ColSplit Colour Register,Red,Green,Blue,Y": {
		"prefix": "ColSplit",
		"body": "ColSplit ${1:Colour Register,Red,Green,Blue,Y}",
		"description": "ColSplit allows you to change any of the palette colour registers at a position relative to the top of the currently used slice."
	},
	"ShowBlitz": {
		"prefix": "ShowBlitz",
		"body": "ShowBlitz",
		"description": "ShowBlitz redisplays the entire set up of slices."
	},
	"FreeSlices": {
		"prefix": "FreeSlices",
		"body": "FreeSlices",
		"description": "FreeSlices is used to completely free all slices currently in use."
	},
	"DisplayOff": {
		"prefix": "DisplayOff",
		"body": "DisplayOff",
		"description": ""
	},
	"DisplayOn": {
		"prefix": "DisplayOn",
		"body": "DisplayOn",
		"description": ""
	},
	"SetBPLCON0 BPLCON0 Default": {
		"prefix": "SetBPLCON0",
		"body": "SetBPLCON0 ${1:BPLCON0 Default}",
		"description": "The SetBPLCON0 command has been added for advanced control of Slice display modes."
	},
	"SetBLWait Wait move for line 256 (eg:$ffe1fffe": {
		"prefix": "SetBLWait",
		"body": "SetBLWait ${1:Wait move for line 256 (eg:$ffe1fffe}",
		"description": ""
	},
	"BlitzKeys On|Off": {
		"prefix": "BlitzKeys",
		"body": "BlitzKeys ${1:On|Off}",
		"description": "BlitzKeys is used to turn on or off Blitz mode keyboard reading."
	},
	"RawStatus(Rawkey)": {
		"prefix": "RawStatus",
		"body": "RawStatus(${1:Rawkey})",
		"description": "The RawStatus function can be used to determine if an individual key is being held down or not."
	},
	"BlitzRepeat Delay,Speed": {
		"prefix": "BlitzRepeat",
		"body": "BlitzRepeat ${1:Delay,Speed}",
		"description": "BlitzRepeat allows you to determine key repeat characteristics in Blitz mode."
	},
	"BlitzQualifier": {
		"prefix": "BlitzQualifier",
		"body": "BlitzQualifier",
		"description": "BlitzQualifier returns any qualifier keys that were held down in combination with the last inkey$ during BlitzMode input."
	},
	"HandleRawKey": {
		"prefix": "HandleRawKey",
		"body": "HandleRawKey",
		"description": ""
	},
	"BlitzKey": {
		"prefix": "BlitzKey",
		"body": "BlitzKey",
		"description": "same as inkey$ after a bitmapinput."
	},
	"InitPage Page#,BitMap#,NumBoxes": {
		"prefix": "InitPage",
		"body": "InitPage ${1:Page#,BitMap#,NumBoxes}",
		"description": ""
	},
	"FreePage Page#": {
		"prefix": "FreePage",
		"body": "FreePage ${1:Page#}",
		"description": ""
	},
	"AddBox Page#,Box#,x,y,w,h,type[,text$]|[,shape,shape]": {
		"prefix": "AddBox",
		"body": "AddBox ${1:Page#,Box#,x,y,w,h,type[,text$]|[,shape,shape]}",
		"description": ""
	},
	"RedrawPage": {
		"prefix": "RedrawPage",
		"body": "RedrawPage",
		"description": ""
	},
	"RedrawBox Box#": {
		"prefix": "RedrawBox",
		"body": "RedrawBox ${1:Box#}",
		"description": ""
	},
	"SelectBox [Box#]|[x+,y+][0,x,y]": {
		"prefix": "SelectBox",
		"body": "SelectBox ${1:[Box#]|[x+,y+][0,x,y]}",
		"description": "deselects previously selected."
	},
	"DeSelectBox": {
		"prefix": "DeSelectBox",
		"body": "DeSelectBox",
		"description": ""
	},
	"ActivateSelectedBox": {
		"prefix": "ActivateSelectedBox",
		"body": "ActivateSelectedBox",
		"description": ""
	},
	"SetBox Box#[,Value]|[xprop,yprop]": {
		"prefix": "SetBox",
		"body": "SetBox ${1:Box#[,Value]|[xprop,yprop]}",
		"description": ""
	},
	"BoxValue(Box#)|(Page#,Box#)": {
		"prefix": "BoxValue",
		"body": "BoxValue(${1:Box#)|(Page#,Box#})",
		"description": ""
	},
	"SetBoxString Box#,String$": {
		"prefix": "SetBoxString",
		"body": "SetBoxString ${1:Box#,String$}",
		"description": ""
	},
	"BoxString(Box#)|(Page#,Box#)": {
		"prefix": "BoxString",
		"body": "BoxString(${1:Box#)|(Page#,Box#})",
		"description": ""
	},
	"BoxShow Box#[,Bitmap#,x,y]|[dx,dy]": {
		"prefix": "BoxShow",
		"body": "BoxShow ${1:Box#[,Bitmap#,x,y]|[dx,dy]}",
		"description": ""
	},
	"BoxSelected": {
		"prefix": "BoxSelected",
		"body": "BoxSelected",
		"description": ""
	},
	"BoxPrint Box#[,String$]|[Bank#,Line]": {
		"prefix": "BoxPrint",
		"body": "BoxPrint ${1:Box#[,String$]|[Bank#,Line]}",
		"description": ""
	},
	"SetBoxColor Box#,color": {
		"prefix": "SetBoxColor",
		"body": "SetBoxColor ${1:Box#,color}",
		"description": ""
	},
	"BlitzEvent": {
		"prefix": "BlitzEvent",
		"body": "BlitzEvent",
		"description": "handles user input and returns event."
	},
	"SetBoxTitle Box#,String$": {
		"prefix": "SetBoxTitle",
		"body": "SetBoxTitle ${1:Box#,String$}",
		"description": ""
	},
	"DisableBox Box#": {
		"prefix": "DisableBox",
		"body": "DisableBox ${1:Box#}",
		"description": ""
	},
	"EnableBox Box#": {
		"prefix": "EnableBox",
		"body": "EnableBox ${1:Box#}",
		"description": ""
	},
	"MouseEnabled": {
		"prefix": "MouseEnabled",
		"body": "MouseEnabled",
		"description": ""
	},
	"SetPagePens Page#,c0,c1,c2,c3 (defaults: 3,1,2,3)": {
		"prefix": "SetPagePens",
		"body": "SetPagePens ${1:Page#,c0,c1,c2,c3 (defaults: 3,1,2,3)}",
		"description": ""
	},
	"BoxPropX Box#": {
		"prefix": "BoxPropX",
		"body": "BoxPropX ${1:Box#}",
		"description": ""
	},
	"BoxPropY Box#": {
		"prefix": "BoxPropY",
		"body": "BoxPropY ${1:Box#}",
		"description": ""
	},
	"ChangeBox Page#,Box#,Value": {
		"prefix": "ChangeBox",
		"body": "ChangeBox ${1:Page#,Box#,Value}",
		"description": ""
	},
	"ToggleBox Box#": {
		"prefix": "ToggleBox",
		"body": "ToggleBox ${1:Box#}",
		"description": ""
	},
	"SpotBox": {
		"prefix": "SpotBox",
		"body": "SpotBox",
		"description": "returns box that mouse is over."
	},
	"Record [Tape#]": {
		"prefix": "Record",
		"body": "Record ${1:[Tape#]}",
		"description": "Record allows you to create a tape object."
	},
	"PlayBack [Tape#]": {
		"prefix": "PlayBack",
		"body": "PlayBack ${1:[Tape#]}",
		"description": "PlayBack begins playback of a previously created tape object."
	},
	"SaveTape Tape#,Filename$": {
		"prefix": "SaveTape",
		"body": "SaveTape ${1:Tape#,Filename$}",
		"description": "SaveTape allows you to save a previously created tape object out to disk."
	},
	"LoadTape Tape#,filename$": {
		"prefix": "LoadTape",
		"body": "LoadTape ${1:Tape#,filename$}",
		"description": "LoadTape allows you to load a tape object previously saved with SaveTape for use with the PlayBack command."
	},
	"AbsMouse X,Y": {
		"prefix": "AbsMouse",
		"body": "AbsMouse ${1:X,Y}",
		"description": "AbsMouse allows you to position the mouse pointer at an absolute display location."
	},
	"RelMouse X Offset,Y Offset": {
		"prefix": "RelMouse",
		"body": "RelMouse ${1:X Offset,Y Offset}",
		"description": "RelMouse allows you to move the mouse pointer a relative distance from it's current location."
	},
	"MouseButton Button,On|Off : 0=Left": {
		"prefix": "MouseButton",
		"body": "MouseButton ${1:Button,On|Off : 0=Left}",
		"description": "MouseButton allows you to alter the status of the Amiga's left or right mouse buttons."
	},
	"ClickButton Button : 0=Left": {
		"prefix": "ClickButton",
		"body": "ClickButton ${1:Button : 0=Left}",
		"description": "ClickButton is identical to executing two MouseButton commands - one for pressing the mouse button down, and one for releasing it."
	},
	"MacroKey Tape#,Rawkey,Qualifier": {
		"prefix": "MacroKey",
		"body": "MacroKey ${1:Tape#,Rawkey,Qualifier}",
		"description": "MacroKey causes a previously defined tape object to be attached to a particular keyboard key."
	},
	"TapeTrap [Tape#]": {
		"prefix": "TapeTrap",
		"body": "TapeTrap ${1:[Tape#]}",
		"description": "TapeTrap allows you to record a sequence of AbsMouse, RelMouse, MouseButton and ClickButton events to a tape object."
	},
	"QuietTrap On|Off": {
		"prefix": "QuietTrap",
		"body": "QuietTrap ${1:On|Off}",
		"description": "QuietTrap determines the way in which any TapeTrapping will be executed."
	},
	"Type String$": {
		"prefix": "Type",
		"body": "Type ${1:String$}",
		"description": "Type causes Intution to behave exactly as if a certain series of keyboard characters had been entered."
	},
	"QuickPlay On|Off": {
		"prefix": "QuickPlay",
		"body": "QuickPlay ${1:On|Off}",
		"description": ""
	},
	"XStatus": {
		"prefix": "XStatus",
		"body": "XStatus",
		"description": "XStatus returns a value depending upon the current state of the BRexx system."
	},
	"PlayWait": {
		"prefix": "PlayWait",
		"body": "PlayWait",
		"description": "PlayWait may be used to halt program flow until a PlayBack of a tape has finished."
	},
	"FreeMacroKey Rawkey,Qualifier": {
		"prefix": "FreeMacroKey",
		"body": "FreeMacroKey ${1:Rawkey,Qualifier}",
		"description": "FreeMacroKey causes a previously defined macro key to be removed so that a BRexx tape is no longer attatched to it."
	},
	"NumPars": {
		"prefix": "NumPars",
		"body": "NumPars",
		"description": "pars.w=NumPars  Number of paramters passed to program."
	},
	"Par$": {
		"prefix": "Par$",
		"body": "Par$",
		"description": "parameter$=Par$(Paramter#)   Returns the string value of a parameter."
	},
	"FromCLI": {
		"prefix": "FromCLI",
		"body": "FromCLI",
		"description": "result=FromCLI   0=Run from WorkBench, -1=Run from CLI."
	},
	"ParPath$": {
		"prefix": "ParPath$",
		"body": "ParPath$",
		"description": "path$=ParPath$(Par#,#type)  Full/Dir path of WB arg. (v36+ only!)."
	},
	"SetCollOdd": {
		"prefix": "SetCollOdd",
		"body": "SetCollOdd",
		"description": "SetCollOdd is used to control the detection of sprite/bitmap collisions."
	},
	"SetColl Colour,Bitplanes[,Playfield 1=front, 2=back]": {
		"prefix": "SetColl",
		"body": "SetColl ${1:Colour,Bitplanes[,Playfield 1=front, 2=back]}",
		"description": "There are 3 different commands involved in controlling sprite/bitmap collision detection, of which SetColl is one (the other 2 being SetCollOdd and SetCollHi)."
	},
	"SetCollHi Bitplanes": {
		"prefix": "SetCollHi",
		"body": "SetCollHi ${1:Bitplanes}",
		"description": "SetCollHi may be used to enable sprite/bitmap collisions between sprites and the 'high half' colour range of a bitmap."
	},
	"ShapesHit(Shape#,X,Y,Shape#,X,Y)": {
		"prefix": "ShapesHit",
		"body": "ShapesHit(${1:Shape#,X,Y,Shape#,X,Y})",
		"description": "The ShapesHit function will calculate whether the rectangular areas occupied by 2 shapes overlap."
	},
	"ShapeSpriteHit(Shape#,X,Y,Sprite#,X,Y)": {
		"prefix": "ShapeSpriteHit",
		"body": "ShapeSpriteHit(${1:Shape#,X,Y,Sprite#,X,Y})",
		"description": "The ShapeSpriteHit function will calculate whether the rectangular area occupied by a shape at one position, and the rectangular area occupied by a sprite at another position are overlapped."
	},
	"SpritesHit(Sprite#,X,Y,Sprite#,X,Y)": {
		"prefix": "SpritesHit",
		"body": "SpritesHit(${1:Sprite#,X,Y,Sprite#,X,Y})",
		"description": "The SpritesHit function will calculate whether the rectangular areas occupied by 2 sprites overlap."
	},
	"RectsHit(X1,Y1,Width1,Height1,X2,Y2,Width2,Height2)": {
		"prefix": "RectsHit",
		"body": "RectsHit(${1:X1,Y1,Width1,Height1,X2,Y2,Width2,Height2})",
		"description": "The RectsHit function may be used to determine whether 2 arbitrary rectangular areas overlap."
	},
	"SColl(Sprite Channel,Sprite Channel)": {
		"prefix": "SColl",
		"body": "SColl(${1:Sprite Channel,Sprite Channel})",
		"description": "SColl may be used to determine whether the 2 sprites currently displayed through the specified sprite channels have collided."
	},
	"PColl(Sprite Channel)": {
		"prefix": "PColl",
		"body": "PColl(${1:Sprite Channel})",
		"description": "The PColl function may be used to find out if a particular sprite has collided with any bitmaps."
	},
	"DoColl": {
		"prefix": "DoColl",
		"body": "DoColl",
		"description": "DoColl is used to perform sprite/bitmap collision checking."
	},
	"Implode Error/CrunchedLen=Bufferadr,DataLen,?Callback": {
		"prefix": "Implode",
		"body": "Implode ${1:Error/CrunchedLen=Bufferadr,DataLen,?Callback}",
		"description": ""
	},
	"Deplode Success=Startadr": {
		"prefix": "Deplode",
		"body": "Deplode ${1:Success=Startadr}",
		"description": ""
	},
	"CrMDecrunch Bufferadr [,Destinationadr]": {
		"prefix": "CrMDecrunch",
		"body": "CrMDecrunch ${1:Bufferadr [,Destinationadr]}",
		"description": ""
	},
	"PPDecrunch Bufferadr,Bufferend,Destinationadr": {
		"prefix": "PPDecrunch",
		"body": "PPDecrunch ${1:Bufferadr,Bufferend,Destinationadr}",
		"description": ""
	},
	"InitCopList CopList#[,type]|[,ypos,height,type,sprites,colors,numcustoms]": {
		"prefix": "InitCopList",
		"body": "InitCopList ${1:CopList#[,type]|[,ypos,height,type,sprites,colors,numcustoms]}",
		"description": "InitCopList is used to create a CopList for use with the CreateDisplay command."
	},
	"CreateDisplay CopList#[,CopList#..]": {
		"prefix": "CreateDisplay",
		"body": "CreateDisplay ${1:CopList#[,CopList#..]}",
		"description": "CreateDisplay is used to setup a new screen display with the new display library."
	},
	"DisplayBitMap CopList#,bmap[,x,y] [,bmap[,x,y]]": {
		"prefix": "DisplayBitMap",
		"body": "DisplayBitMap ${1:CopList#,bmap[,x,y] [,bmap[,x,y]]}",
		"description": "The DisplayBitMap command is similar in usage to the slice libraries' show commands."
	},
	"DisplaySprite CopList#,Sprite#,X,Y,Sprite Channel": {
		"prefix": "DisplaySprite",
		"body": "DisplaySprite ${1:CopList#,Sprite#,X,Y,Sprite Channel}",
		"description": "DisplaySprite is similar to the slice libraries ShowSprite cotnmand with the added advantage of super hires positioning and extra wide sprite handling."
	},
	"DisplayPalette CopList#,Palette# [,coloroffset] [,coloroffset,bankoffset]": {
		"prefix": "DisplayPalette",
		"body": "DisplayPalette ${1:CopList#,Palette# [,coloroffset] [,coloroffset,bankoffset]}",
		"description": "DisplayPalette copies colour information from a Palette to the CopList specified."
	},
	"DisplayControls CopList#,BPLCON2,BPLCON3,BPLCON4": {
		"prefix": "DisplayControls",
		"body": "DisplayControls ${1:CopList#,BPLCON2,BPLCON3,BPLCON4}",
		"description": "DisplayControls allows access to the more remote options available in the Amiga's display system."
	},
	"DisplayAdjust CopList#,fetchwid,ddfstrt,ddfstop,diwstrt,diwstop": {
		"prefix": "DisplayAdjust",
		"body": "DisplayAdjust ${1:CopList#,fetchwid,ddfstrt,ddfstop,diwstrt,diwstop}",
		"description": "Temporary control of display registers until I get the widthadjust parameter working with InitCopList."
	},
	"CustomColors CopList#,CCOffset,YPos,Palette,startcol,numcols[,thru256flag]": {
		"prefix": "CustomColors",
		"body": "CustomColors ${1:CopList#,CCOffset,YPos,Palette,startcol,numcols[,thru256flag]}",
		"description": "ecs=2+n aga=2+n+n+n/16."
	},
	"CustomString CopList#,CCOffset,YPos,Copper$": {
		"prefix": "CustomString",
		"body": "CustomString ${1:CopList#,CCOffset,YPos,Copper$}",
		"description": "2+n {n=len(a$)/4}."
	},
	"DisplayDblScan CopList#,Mode[,copoffset]": {
		"prefix": "DisplayDblScan",
		"body": "DisplayDblScan ${1:CopList#,Mode[,copoffset]}",
		"description": "2."
	},
	"DisplayRainbow CopList#,Register,Palette[,copoffset]": {
		"prefix": "DisplayRainbow",
		"body": "DisplayRainbow ${1:CopList#,Register,Palette[,copoffset]}",
		"description": "ecs=1 aga=4."
	},
	"DisplayRGB CopList#,Register,line,r,g,b[,copoffset]": {
		"prefix": "DisplayRGB",
		"body": "DisplayRGB ${1:CopList#,Register,line,r,g,b[,copoffset]}",
		"description": "ecs=1 aga=4."
	},
	"DisplayUser CopList#,Line,String[,Offset]": {
		"prefix": "DisplayUser",
		"body": "DisplayUser ${1:CopList#,Line,String[,Offset]}",
		"description": "DisplayUser allows the programmer to use their own Copper$ at any line of the display."
	},
	"DisplayScroll CopList#,&xpos.q(n),&xpos.q(n)[,Offset]": {
		"prefix": "DisplayScroll",
		"body": "DisplayScroll ${1:CopList#,&xpos.q(n),&xpos.q(n)[,Offset]}",
		"description": "3."
	},
	"CustomSprites CopList#,CCOffset,YPos,NumSprites": {
		"prefix": "CustomSprites",
		"body": "CustomSprites ${1:CopList#,CCOffset,YPos,NumSprites}",
		"description": "4n+2."
	},
	"CustomChunky CopList#,CCOffset,YPos,width,height,res[,splitpos]": {
		"prefix": "CustomChunky",
		"body": "CustomChunky ${1:CopList#,CCOffset,YPos,width,height,res[,splitpos]}",
		"description": "4n+2."
	},
	"CustomChunkySize width,height": {
		"prefix": "CustomChunkySize",
		"body": "CustomChunkySize ${1:width,height}",
		"description": ""
	},
	"DisplayGenlock BPLCON0": {
		"prefix": "DisplayGenlock",
		"body": "DisplayGenlock ${1:BPLCON0}",
		"description": "2=use external sync 4=interlace."
	},
	"SystemDate Returns system date as number of days since 1/1/1978": {
		"prefix": "SystemDate",
		"body": "SystemDate ${1:Returns system date as number of days since 1/1/1978}",
		"description": "SystemDate returns the system date as the number of days passed since 1/1/1978."
	},
	"Date$ days.l": {
		"prefix": "Date$",
		"body": "Date$ ${1:days.l}",
		"description": "converts days since 1/1/1978 to date string."
	},
	"NumDays date$": {
		"prefix": "NumDays",
		"body": "NumDays ${1:date$}",
		"description": "converts dd/mm/yyyy to days since 1/1/1978."
	},
	"DateFormat 0=dd/mm/yyyy 1=mm/dd/yyyy": {
		"prefix": "DateFormat",
		"body": "DateFormat ${1:0=dd/mm/yyyy 1=mm/dd/yyyy}",
		"description": "DateFormat configures the way both date$ and numdays treat a string representation of the date: 0=dd/mm/yyyy and 1=mm/dd/yyyy."
	},
	"Days": {
		"prefix": "Days",
		"body": "Days",
		"description": ";returns day calculated in last call to date$."
	},
	"Months": {
		"prefix": "Months",
		"body": "Months",
		"description": ";returns month calculated in last call to date$."
	},
	"Years": {
		"prefix": "Years",
		"body": "Years",
		"description": ";returns year calculated in last call to date$."
	},
	"WeekDay": {
		"prefix": "WeekDay",
		"body": "WeekDay",
		"description": ";returns day of week calculated in last call to date$."
	},
	"Hours": {
		"prefix": "Hours",
		"body": "Hours",
		"description": ";gets system time and returns hour of day."
	},
	"Mins": {
		"prefix": "Mins",
		"body": "Mins",
		"description": ";returns minutes calculated at last call to hour."
	},
	"Secs": {
		"prefix": "Secs",
		"body": "Secs",
		"description": ";returns seconds calculated at last call to hour."
	},
	"Edit$([DefaultString$,]Characters)": {
		"prefix": "Edit$",
		"body": "Edit$(${1:[DefaultString$,]Characters})",
		"description": "Edit$ is Blitz's standard text input command."
	},
	"Inkey$ [(Characters)]": {
		"prefix": "Inkey$",
		"body": "Inkey$ ${1:[(Characters)]}",
		"description": "Inkey$ may be used to collect one or more characters from the current input channel."
	},
	"Edit([DefaultValue,]Characters)": {
		"prefix": "Edit",
		"body": "Edit(${1:[DefaultValue,]Characters})",
		"description": "Edit is Blitz's standard numeric input command."
	},
	"WBWidth": {
		"prefix": "WBWidth",
		"body": "WBWidth",
		"description": "The functions WBWidth, WBHeight, WBDepth & WBViewMode return the width, height, depth & viewmode of the current WorkBench screen as configured by preferences."
	},
	"WBHeight": {
		"prefix": "WBHeight",
		"body": "WBHeight",
		"description": "See Description of WBWidth."
	},
	"WBDepth": {
		"prefix": "WBDepth",
		"body": "WBDepth",
		"description": "See Description of WBWidth."
	},
	"WBViewMode": {
		"prefix": "WBViewMode",
		"body": "WBViewMode",
		"description": "See Description of WBWidth."
	},
	"Processor": {
		"prefix": "Processor",
		"body": "Processor",
		"description": "The function Processor returns the type of processor in the computer on which the program is currently running."
	},
	"cr_vbr": {
		"prefix": "cr_vbr",
		"body": "cr_vbr",
		"description": ""
	},
	"ExecVersion": {
		"prefix": "ExecVersion",
		"body": "ExecVersion",
		"description": "The function ExecVersion returns the relevant information about the system the program is running on."
	},
	"WBExtViewMode": {
		"prefix": "WBExtViewMode",
		"body": "WBExtViewMode",
		"description": ""
	},
	"FadeIn Palette#[,Rate[,Low Colour,High Colour]]": {
		"prefix": "FadeIn",
		"body": "FadeIn ${1:Palette#[,Rate[,Low Colour,High Colour]]}",
		"description": ""
	},
	"FadeOut Palette#[,Rate[,Low Colour,High Colour]]": {
		"prefix": "FadeOut",
		"body": "FadeOut ${1:Palette#[,Rate[,Low Colour,High Colour]]}",
		"description": "Fadeout will cause the colour palette of the currently used slice to be 'faded out' from the RGB values contained in the specified Palette# down to black."
	},
	"ASyncFade On|Off": {
		"prefix": "ASyncFade",
		"body": "ASyncFade ${1:On|Off}",
		"description": "ASyncFade allows you control over how the FadeIn and FadeOut commands work."
	},
	"DoFade": {
		"prefix": "DoFade",
		"body": "DoFade",
		"description": "DoFade will cause the next step of a fade to be executed."
	},
	"FadeStatus": {
		"prefix": "FadeStatus",
		"body": "FadeStatus",
		"description": "FadeStatus is used in conjunction with the DoFade command to determine if any steps of fading have yet to be performed."
	},
	"OpenFile(File#,Filename$)": {
		"prefix": "OpenFile",
		"body": "OpenFile(${1:File#,Filename$})",
		"description": "OpenFile attempts to open the file specified by Filename$."
	},
	"CloseFile File#": {
		"prefix": "CloseFile",
		"body": "CloseFile ${1:File#}",
		"description": "CloseFile is used to close a file opened using one of the file open functions (FileOpen, ReadFile, WriteFile)."
	},
	"KillFile Filename$": {
		"prefix": "KillFile",
		"body": "KillFile ${1:Filename$}",
		"description": "The KillFile command will simply attempt to delete the specified file."
	},
	"Fields File#,Var1[,Var2...]": {
		"prefix": "Fields",
		"body": "Fields ${1:File#,Var1[,Var2...]}",
		"description": "Fields is used to set up fields of a random access file record."
	},
	"Put File#,Record": {
		"prefix": "Put",
		"body": "Put ${1:File#,Record}",
		"description": "Put is used to transfer the values contained in a Fields variable list to a particular record in a random access file."
	},
	"Get File#,Record": {
		"prefix": "Get",
		"body": "Get ${1:File#,Record}",
		"description": "Get is used to transfer information from a particular record of a random access file into a variable list set up by the Fields command."
	},
	"FileOutput File#": {
		"prefix": "FileOutput",
		"body": "FileOutput ${1:File#}",
		"description": "The FileOutput command causes the output of all subsequent Print and NPrint commands to be sent to the specified sequential file."
	},
	"FileInput File#": {
		"prefix": "FileInput",
		"body": "FileInput ${1:File#}",
		"description": "The FileInput command causes all subsequent Edit, Edit$ and Inkey$ commands to receive their input from the specified file."
	},
	"Lof(File#)": {
		"prefix": "Lof",
		"body": "Lof(${1:File#})",
		"description": "Lof will return the length, in bytes, of the specified file."
	},
	"FileSeek File#,Position": {
		"prefix": "FileSeek",
		"body": "FileSeek ${1:File#,Position}",
		"description": "FileSeek allows you to move to a particular point in the specified file."
	},
	"Loc(File#)": {
		"prefix": "Loc",
		"body": "Loc(${1:File#})",
		"description": "Loc may be used to determine your current position in the specified file."
	},
	"Eof(File#)": {
		"prefix": "Eof",
		"body": "Eof(${1:File#})",
		"description": "The Eof function allows you to determine if you are currently positioned at the end of the specified file."
	},
	"DosBuffLen Bytes": {
		"prefix": "DosBuffLen",
		"body": "DosBuffLen ${1:Bytes}",
		"description": "All Blitz file handling is done through the use of special buffering routines."
	},
	"ReadFile(File#,Filename$)": {
		"prefix": "ReadFile",
		"body": "ReadFile(${1:File#,Filename$})",
		"description": "ReadFile opens an already existing file specified by Filename$ for sequential reading."
	},
	"WriteFile(File#,Filename$)": {
		"prefix": "WriteFile",
		"body": "WriteFile(${1:File#,Filename$})",
		"description": "WriteFile creates a new file, specified by Filename$, for the purpose of sequential file writing."
	},
	"WriteMem File#,Address,Length": {
		"prefix": "WriteMem",
		"body": "WriteMem ${1:File#,Address,Length}",
		"description": "WriteMem allows you to write a number of bytes, determined by Length, from an absolute memory location, determined by Address, to an open file specified by File#."
	},
	"ReadMem File#,Address,Length": {
		"prefix": "ReadMem",
		"body": "ReadMem ${1:File#,Address,Length}",
		"description": "ReadMem allows you to read a number of bytes, determined by Length, into an absolute memory location, determined by Address, from an open file specified by File#."
	},
	"Exists(Filename$)": {
		"prefix": "Exists",
		"body": "Exists(${1:Filename$})",
		"description": "Exists actually returns the length of the file, unlike Lof() Exists() is for files that have not already been opened."
	},
	"LoadBlitzFont BlitzFont#,Fontname.font$": {
		"prefix": "LoadBlitzFont",
		"body": "LoadBlitzFont ${1:BlitzFont#,Fontname.font$}",
		"description": "LoadBlitzFont creates a blitzfont object."
	},
	"BitMapOutput Bitmap#": {
		"prefix": "BitMapOutput",
		"body": "BitMapOutput ${1:Bitmap#}",
		"description": "BitMapOutput may be used to redirect Print statements to be rendered onto a bitmap."
	},
	"Colour Foreground Colour[,Background Colour]": {
		"prefix": "Colour",
		"body": "Colour ${1:Foreground Colour[,Background Colour]}",
		"description": "Colour allows you to alter the colours use to render text to bitmaps."
	},
	"Locate X,Y": {
		"prefix": "Locate",
		"body": "Locate ${1:X,Y}",
		"description": "If you are using BitMapOutput to render text, Locate allows you to specify the cursor position at which characters are rendered."
	},
	"CursX": {
		"prefix": "CursX",
		"body": "CursX",
		"description": "When using BitMapOutput to render text to a bitmap, CursX may be used to find the horizontal character position at which the next character Printed will appear."
	},
	"CursY": {
		"prefix": "CursY",
		"body": "CursY",
		"description": "When using BitMapOutput to render text to a bitmap, CursY may be used to find the vertical character position at which the next character Printed will appear."
	},
	"BitMapInput": {
		"prefix": "BitMapInput",
		"body": "BitMapInput",
		"description": ""
	},
	"FileRequest$ Title$,Pathname$,Filename$": {
		"prefix": "FileRequest$",
		"body": "FileRequest$ ${1:Title$,Pathname$,Filename$}",
		"description": "The FileRequest$ function will open up a standard Amiga-style file requester on the currently used screen."
	},
	"TextGadget GadgetList#,X,Y,Flags,Id,Text$": {
		"prefix": "TextGadget",
		"body": "TextGadget ${1:GadgetList#,X,Y,Flags,Id,Text$}",
		"description": "The TextGadget command adds a text gadget to a gadgetlist."
	},
	"StringGadget GadgetList#,X,Y,Flags,Id,Maxlen,Width": {
		"prefix": "StringGadget",
		"body": "StringGadget ${1:GadgetList#,X,Y,Flags,Id,Maxlen,Width}",
		"description": "StringGadget allows you to create an Intuition style 'text entry' gadget."
	},
	"PropGadget GadgetList#,X,Y,Flags,Id,Width,Height": {
		"prefix": "PropGadget",
		"body": "PropGadget ${1:GadgetList#,X,Y,Flags,Id,Width,Height}",
		"description": "The PropGadget command is used to create a 'proportional gadget'."
	},
	"ShapeGadget GadgetList#,X,Y,Flags,Id,Shape#[,Shape#]": {
		"prefix": "ShapeGadget",
		"body": "ShapeGadget ${1:GadgetList#,X,Y,Flags,Id,Shape#[,Shape#]}",
		"description": "The ShapeGadget command allows you to create gadgets with graphic imagery."
	},
	"SetHProp GadgetList#,Id,Pot,Body": {
		"prefix": "SetHProp",
		"body": "SetHProp ${1:GadgetList#,Id,Pot,Body}",
		"description": "SetHProp is used to alter the horizontal slider qualities of a proportional gadget."
	},
	"SetVProp GadgetList#,Id,Pot,Body": {
		"prefix": "SetVProp",
		"body": "SetVProp ${1:GadgetList#,Id,Pot,Body}",
		"description": "SetVProp is used to alter the vertical slider qualities of a proportional gadget."
	},
	"HPropPot(GadgetList#,Id)": {
		"prefix": "HPropPot",
		"body": "HPropPot(${1:GadgetList#,Id})",
		"description": "The HPropPot function allows you to determine the current 'pot' setting of a proportional gadget."
	},
	"HPropBody(GadgetList#,Id)": {
		"prefix": "HPropBody",
		"body": "HPropBody(${1:GadgetList#,Id})",
		"description": "The HPropBody function allows you to determine the current 'body' setting of a proportional gadget."
	},
	"VPropPot(GadgetList#,Id)": {
		"prefix": "VPropPot",
		"body": "VPropPot(${1:GadgetList#,Id})",
		"description": "The VPropPot function allows you to determine the current 'pot' setting of a proportional gadget."
	},
	"VPropBody(GadgetList#,Id)": {
		"prefix": "VPropBody",
		"body": "VPropBody(${1:GadgetList#,Id})",
		"description": "The VPropBody function allows you to determine the current 'body' setting of a proportional gadget."
	},
	"Redraw Window#,Id": {
		"prefix": "Redraw",
		"body": "Redraw ${1:Window#,Id}",
		"description": "ReDraw will redisplay the specified gadget in the specified window."
	},
	"Toggle GadgetList#,Id [,On|Off]": {
		"prefix": "Toggle",
		"body": "Toggle ${1:GadgetList#,Id [,On|Off]}",
		"description": "The Toggle command in the gadget library has been extended so it will actually toggle a gadgets status if the On|Off parameter is missing."
	},
	"GadgetBorder X,Y,Width,Height": {
		"prefix": "GadgetBorder",
		"body": "GadgetBorder ${1:X,Y,Width,Height}",
		"description": ""
	},
	"Borders [On|Off]|[Width,Height]": {
		"prefix": "Borders",
		"body": "Borders ${1:[On|Off]|[Width,Height]}",
		"description": "Borders serves 2 purposes."
	},
	"ActivateString Window#,Id": {
		"prefix": "ActivateString",
		"body": "ActivateString ${1:Window#,Id}",
		"description": "ActivateString may be used to 'automatically' activate a string gadget."
	},
	"ResetString GadgetList#,Id": {
		"prefix": "ResetString",
		"body": "ResetString ${1:GadgetList#,Id}",
		"description": "ResetString allows you to 'reset' a string gadget."
	},
	"StringText$(GadgetList#,Id)": {
		"prefix": "StringText$",
		"body": "StringText$(${1:GadgetList#,Id})",
		"description": "The Stringtext$ function allows you to determine the current contents of a string gadget."
	},
	"ClearString GadgetList#,Id": {
		"prefix": "ClearString",
		"body": "ClearString ${1:GadgetList#,Id}",
		"description": "ClearString may be used to clear, or erase, the text in the specified string gadget."
	},
	"GadgetPens Foreground Colour[,Background Colour]": {
		"prefix": "GadgetPens",
		"body": "GadgetPens ${1:Foreground Colour[,Background Colour]}",
		"description": "GadgetPens determines the text colours used when text gadgets are created using the TextGadget command."
	},
	"BorderPens Highlight Colour,Shadow Colour": {
		"prefix": "BorderPens",
		"body": "BorderPens ${1:Highlight Colour,Shadow Colour}",
		"description": "BorderPens allows you to control the colours used when gadget borders are created."
	},
	"GadgetJam Jammode": {
		"prefix": "GadgetJam",
		"body": "GadgetJam ${1:Jammode}",
		"description": "GadgetJam allows you to determine the text rendering method used when gadgets are created using the TextGadget command."
	},
	"SelectMode 1=Box, 0=Inverse": {
		"prefix": "SelectMode",
		"body": "SelectMode ${1:1=Box, 0=Inverse}",
		"description": "SelectMode is used to predefine how gadget rendering will show a gadget selection, modes are 1 for box and 0 for inverse."
	},
	"SetString GadgetList#,Id,String$": {
		"prefix": "SetString",
		"body": "SetString ${1:GadgetList#,Id,String$}",
		"description": "SetString may be used to initialize the contents of a string gadget created with the StringGadget command."
	},
	"ButtonGroup Group": {
		"prefix": "ButtonGroup",
		"body": "ButtonGroup ${1:Group}",
		"description": "ButtonGroup allows you to determine which 'group' a number of button type gadgets belong to."
	},
	"GadgetStatus(GadgetList#,Id)": {
		"prefix": "GadgetStatus",
		"body": "GadgetStatus(${1:GadgetList#,Id})",
		"description": "GadgetStatus may be used to determine the status of the specified gadget."
	},
	"ButtonId(GadgetList#,ButtonGroup)": {
		"prefix": "ButtonId",
		"body": "ButtonId(${1:GadgetList#,ButtonGroup})",
		"description": "ButtonId may be used to determine which gadget within a group of button type gadgets is currently selected."
	},
	"Enable(GadgetList#,Id)": {
		"prefix": "Enable",
		"body": "Enable(${1:GadgetList#,Id})",
		"description": "A gadget when disabled is covered by a \"mesh\" and can not be accessed by the user."
	},
	"Disable(GadgetList#,Id)": {
		"prefix": "Disable",
		"body": "Disable(${1:GadgetList#,Id})",
		"description": "A gadget when disabled is covered by a \"mesh\" and can not be accessed by the user."
	},
	"SetGadgetStatus(GadgetList#,Id,Value)": {
		"prefix": "SetGadgetStatus",
		"body": "SetGadgetStatus(${1:GadgetList#,Id,Value})",
		"description": "SetGadgetStatus is used to set a cycling text gadget to a particular value, once set ReDraw should be used to refresh the gadget to reflect it's new value."
	},
	"SetTextGadget GadgetList#,Id,Text$": {
		"prefix": "SetTextGadget",
		"body": "SetTextGadget ${1:GadgetList#,Id,Text$}",
		"description": ""
	},
	"Joyx(Port)": {
		"prefix": "Joyx",
		"body": "Joyx(${1:Port})",
		"description": "Joyx will return the left/right status of a joystick plugged into the specified port."
	},
	"Joyy(Port)": {
		"prefix": "Joyy",
		"body": "Joyy(${1:Port})",
		"description": "Joyy will return the up/down status of a joystick plugged into the specified port."
	},
	"Joyr(Port)": {
		"prefix": "Joyr",
		"body": "Joyr(${1:Port})",
		"description": "Joyr may be used to determine the rotational direction of a joystick plugged into the specified port."
	},
	"Joyb(Port)": {
		"prefix": "Joyb",
		"body": "Joyb(${1:Port})",
		"description": "Joyb allows you to read the button status of the device plugged into the specified port."
	},
	"Gameb(Port)": {
		"prefix": "Gameb",
		"body": "Gameb(${1:Port})",
		"description": ""
	},
	"SaveBitmap BitMap#,Filename$[,Palette#]": {
		"prefix": "SaveBitmap",
		"body": "SaveBitmap ${1:BitMap#,Filename$[,Palette#]}",
		"description": "SaveBitMap allows you to save a bitmap to disk in ILBM IFF format."
	},
	"SaveScreen Screen#,Filename$": {
		"prefix": "SaveScreen",
		"body": "SaveScreen ${1:Screen#,Filename$}",
		"description": "SaveScreen will save a screen to disk as an IFF ILBM file."
	},
	"SaveShape Shape#,Filename$[,Palette#]": {
		"prefix": "SaveShape",
		"body": "SaveShape ${1:Shape#,Filename$[,Palette#]}",
		"description": "SaveShape will create an ILBM IFF file based on the specified shape object."
	},
	"SavePalette Palette#,Filename$": {
		"prefix": "SavePalette",
		"body": "SavePalette ${1:Palette#,Filename$}",
		"description": "Creates a standard IFF \"CMAP\" file using the given Palette's colors."
	},
	"ILBMInfo Filename$": {
		"prefix": "ILBMInfo",
		"body": "ILBMInfo ${1:Filename$}",
		"description": ""
	},
	"ILBMWidth": {
		"prefix": "ILBMWidth",
		"body": "ILBMWidth",
		"description": "ILBMWidth will return the width, in pixels, of an ILBM image examined with ILBMInfo."
	},
	"ILBMHeight": {
		"prefix": "ILBMHeight",
		"body": "ILBMHeight",
		"description": "ILBMHeight will return the height, in pixels, of an ILBM image examined with ILBMInfo."
	},
	"ILBMDepth": {
		"prefix": "ILBMDepth",
		"body": "ILBMDepth",
		"description": "ILBMDepth wil1 return the depth, in bitplanes, of an ILBM image examined with ILBMInfo."
	},
	"ILBMViewMode": {
		"prefix": "ILBMViewMode",
		"body": "ILBMViewMode",
		"description": "ILBMViewMode returns the viewmode of the file that was processed by ILBMInfo."
	},
	"DecodeILBM Bitmap#,MemoryLocation": {
		"prefix": "DecodeILBM",
		"body": "DecodeILBM ${1:Bitmap#,MemoryLocation}",
		"description": "A very fast method of unpacking standard iffilbm data to a bitmap."
	},
	"DefaultInput": {
		"prefix": "DefaultInput",
		"body": "DefaultInput",
		"description": ""
	},
	"DefaultOutput": {
		"prefix": "DefaultOutput",
		"body": "DefaultOutput",
		"description": "DefaultOutput cause all future Print statements to send their output to the CLI window the Blitz program was run from."
	},
	"PopInput": {
		"prefix": "PopInput",
		"body": "PopInput",
		"description": ""
	},
	"PopOutput": {
		"prefix": "PopOutput",
		"body": "PopOutput",
		"description": "After output has been re-directed (eg using WindowOutput/FileOutput), PopOutput may be used to return the channel to it's previous condition."
	},
	"LoadFont IntuiFont#,Fontname.font$,Y size [,style]": {
		"prefix": "LoadFont",
		"body": "LoadFont ${1:IntuiFont#,Fontname.font$,Y size [,style]}",
		"description": "LoadFont is used to load a font from the fonts: directory."
	},
	"FirstItem(Arrayname())": {
		"prefix": "FirstItem",
		"body": "FirstItem(${1:Arrayname()})",
		"description": ""
	},
	"AddItem(Arrayname())": {
		"prefix": "AddItem",
		"body": "AddItem(${1:Arrayname()})",
		"description": ""
	},
	"NextItem(Arrayname())": {
		"prefix": "NextItem",
		"body": "NextItem(${1:Arrayname()})",
		"description": ""
	},
	"ResetList Arrayname()": {
		"prefix": "ResetList",
		"body": "ResetList ${1:Arrayname()}",
		"description": "ResetList is used in conjunction with a list array to prepare the list array for NextItem processing."
	},
	"KillItem Arrayname()": {
		"prefix": "KillItem",
		"body": "KillItem ${1:Arrayname()}",
		"description": "KillItem is used to delete the specified list array's current item."
	},
	"AddFirst(Arrayname())": {
		"prefix": "AddFirst",
		"body": "AddFirst(${1:Arrayname()})",
		"description": "The AddFirst function allows you to insert an array list item at the beginning of an array list."
	},
	"ClearList Arrayname()": {
		"prefix": "ClearList",
		"body": "ClearList ${1:Arrayname()}",
		"description": "ClearList is used in conjunction with list arrays to completely 'empty' out the specified list array."
	},
	"AddLast(Arrayname())": {
		"prefix": "AddLast",
		"body": "AddLast(${1:Arrayname()})",
		"description": "The AddLast function allows you to insert an array list item at the end of an array list."
	},
	"PushItem Arrayname()": {
		"prefix": "PushItem",
		"body": "PushItem ${1:Arrayname()}",
		"description": ""
	},
	"PopItem Arrayname()": {
		"prefix": "PopItem",
		"body": "PopItem ${1:Arrayname()}",
		"description": ""
	},
	"PrevItem Arrayname()": {
		"prefix": "PrevItem",
		"body": "PrevItem ${1:Arrayname()}",
		"description": ""
	},
	"LastItem Arrayname()": {
		"prefix": "LastItem",
		"body": "LastItem ${1:Arrayname()}",
		"description": ""
	},
	"ItemStackSize Max Items": {
		"prefix": "ItemStackSize",
		"body": "ItemStackSize ${1:Max Items}",
		"description": "ItemStackSize determines how many 'list' items may be pushed (using the Pushltem command), before items must be 'Pop'ped off again."
	},
	"SortList Arrayname(),sizeof .type\\offset": {
		"prefix": "SortList",
		"body": "SortList ${1:Arrayname(),sizeof .type\\offset}",
		"description": "The SortList command is used to rearrange the order of elements in a Blitz LINKed list."
	},
	"ACos(Float)": {
		"prefix": "ACos",
		"body": "ACos(${1:Float})",
		"description": "This returns the ArcCosine of the value Float."
	},
	"ASin(Float)": {
		"prefix": "ASin",
		"body": "ASin(${1:Float})",
		"description": "This returns the ArcSine of the value Float."
	},
	"ATan(Float)": {
		"prefix": "ATan",
		"body": "ATan(${1:Float})",
		"description": "This returns the ArcTangent of the value Float."
	},
	"Cos(Float)": {
		"prefix": "Cos",
		"body": "Cos(${1:Float})",
		"description": "Cos() returns the Cosine of the value Float."
	},
	"HCos(Float)": {
		"prefix": "HCos",
		"body": "HCos(${1:Float})",
		"description": "This returns the hyperbolic Cosine of the value Float."
	},
	"Exp(Float)": {
		"prefix": "Exp",
		"body": "Exp(${1:Float})",
		"description": "This returns e raised to the power of Float."
	},
	"Log10(Float)": {
		"prefix": "Log10",
		"body": "Log10(${1:Float})",
		"description": "This returns the base 10 logarithm of Float."
	},
	"Log(Float)": {
		"prefix": "Log",
		"body": "Log(${1:Float})",
		"description": "This returns the natural (base e) logarithm of Float."
	},
	"Sin(Float)": {
		"prefix": "Sin",
		"body": "Sin(${1:Float})",
		"description": "This returns the Sine of the value Float."
	},
	"HSin(Float)": {
		"prefix": "HSin",
		"body": "HSin(${1:Float})",
		"description": "This returns the hyperbolic Sine of the value Float."
	},
	"Sqr(Float)": {
		"prefix": "Sqr",
		"body": "Sqr(${1:Float})",
		"description": "This returns the square root of Float."
	},
	"Tan(Float)": {
		"prefix": "Tan",
		"body": "Tan(${1:Float})",
		"description": "This returns the Tangent of the value Float."
	},
	"HTan(Float)": {
		"prefix": "HTan",
		"body": "HTan(${1:Float})",
		"description": "This returns the hyperbolic Tangent of the value Float."
	},
	"LoadMedModule MedModule#,Name": {
		"prefix": "LoadMedModule",
		"body": "LoadMedModule ${1:MedModule#,Name}",
		"description": "The LoadMedModule command loads any version 4 channel Octamed module."
	},
	"StartMedModule MedModule#": {
		"prefix": "StartMedModule",
		"body": "StartMedModule ${1:MedModule#}",
		"description": "StartMedModule is responsible for initialising the module including LINKing after it is loaded from disk using the LoadMedModule command."
	},
	"PlayMed": {
		"prefix": "PlayMed",
		"body": "PlayMed",
		"description": "PlayMed is responsible for playing the current MedModule, it must be called every 50th of a second either on an interupt (#5) or after a VWait in a program loop."
	},
	"StopMed": {
		"prefix": "StopMed",
		"body": "StopMed",
		"description": "StopMed will cause any med module to stop playing."
	},
	"JumpMed Pattern#": {
		"prefix": "JumpMed",
		"body": "JumpMed ${1:Pattern#}",
		"description": "JumpMed will change the pattern being played in the current module."
	},
	"SetMedVolume Volume": {
		"prefix": "SetMedVolume",
		"body": "SetMedVolume ${1:Volume}",
		"description": "SetMedVolume changes the overall volume that the Med Library plays the module, all the audio channels are affected."
	},
	"GetMedVolume Channel": {
		"prefix": "GetMedVolume",
		"body": "GetMedVolume ${1:Channel}",
		"description": "GetMedVolume returns the current volume setting of the specified audio channel."
	},
	"GetMedNote Channel": {
		"prefix": "GetMedNote",
		"body": "GetMedNote ${1:Channel}",
		"description": "GetMedNote returns the current note playing from the specified channel."
	},
	"GetMedInstr Channel": {
		"prefix": "GetMedInstr",
		"body": "GetMedInstr ${1:Channel}",
		"description": ""
	},
	"SetMedMask Channel Mask": {
		"prefix": "SetMedMask",
		"body": "SetMedMask ${1:Channel Mask}",
		"description": "SetMedMask allows the user to mask out audio channels needed by sound effects stopping the Med Library using them."
	},
	"DecodeMedModule MedModule#,MemoryLocation": {
		"prefix": "DecodeMedModule",
		"body": "DecodeMedModule ${1:MedModule#,MemoryLocation}",
		"description": "DecodeMedModule replaces the cludgemedmodule, as med modules are not packed but used raw, DecodeMedModule simply checks to see the memory location passed is in ChipMem (if not it copies the data to chip) and points the Blitz MedModule object to that memory."
	},
	"LoadPalette Palette#,Filename$[,Palette Offset]": {
		"prefix": "LoadPalette",
		"body": "LoadPalette ${1:Palette#,Filename$[,Palette Offset]}",
		"description": ""
	},
	"Cycle Palette#": {
		"prefix": "Cycle",
		"body": "Cycle ${1:Palette#}",
		"description": "Cycle will cause the colour cycling information contained in the specified palette to be cycled on the currently used Screen."
	},
	"RGB Colour Register,Red,Green,Blue": {
		"prefix": "RGB",
		"body": "RGB ${1:Colour Register,Red,Green,Blue}",
		"description": "RGB enables you to set individual colour registers in a palette to an RGB colour value."
	},
	"Red(Colour Register)": {
		"prefix": "Red",
		"body": "Red(${1:Colour Register})",
		"description": "Red returns the amount of RGB red in a specified colour register."
	},
	"Green(Colour Register)": {
		"prefix": "Green",
		"body": "Green(${1:Colour Register})",
		"description": "Green returns the amount of RGB green in a specified colour register."
	},
	"Blue(Colour Register)": {
		"prefix": "Blue",
		"body": "Blue(${1:Colour Register})",
		"description": "Blue returns the amount of RGB blue in a specified colour register."
	},
	"PalRGB Palette#,Colour Register,Red,Green,Blue": {
		"prefix": "PalRGB",
		"body": "PalRGB ${1:Palette#,Colour Register,Red,Green,Blue}",
		"description": "PalRGB allows you to set an individual colour register within a palette object."
	},
	"SetCycle Palette#,Cycle,Low Colour,High Colour[,Speed]": {
		"prefix": "SetCycle",
		"body": "SetCycle ${1:Palette#,Cycle,Low Colour,High Colour[,Speed]}",
		"description": "SetCycle is used to configure colour cycling information for the Cycle command."
	},
	"StopCycle": {
		"prefix": "StopCycle",
		"body": "StopCycle",
		"description": "StopCycle will halt all colour cycling started with the Cycle command."
	},
	"AGARGB Colour Register,Red,Green,Blue": {
		"prefix": "AGARGB",
		"body": "AGARGB ${1:Colour Register,Red,Green,Blue}",
		"description": "The AGARGB command is the AGA equivalent of the RGB command."
	},
	"AGAPalRGB Palette#,Colour Register,Red,Green,Blue": {
		"prefix": "AGAPalRGB",
		"body": "AGAPalRGB ${1:Palette#,Colour Register,Red,Green,Blue}",
		"description": "The AGAPalRGB command is the AGA equivalent of the PalRGB command."
	},
	"AGARed(Colour Register)": {
		"prefix": "AGARed",
		"body": "AGARed(${1:Colour Register})",
		"description": "The AGARed function returns the red component of the specified colour register within the currently used screen."
	},
	"AGAGreen(Colour Register)": {
		"prefix": "AGAGreen",
		"body": "AGAGreen(${1:Colour Register})",
		"description": "The AGAGreen function returns the green component of the specified colour register within the currently used screen."
	},
	"AGABlue(Colour Register)": {
		"prefix": "AGABlue",
		"body": "AGABlue(${1:Colour Register})",
		"description": "The AGABlue function returns the blue component of the specified colour register within the currently used screen."
	},
	"ShowPalette Palette#": {
		"prefix": "ShowPalette",
		"body": "ShowPalette ${1:Palette#}",
		"description": "ShowPalette replaces Use Palette for copying a palette's colours to the current Screen or Slice."
	},
	"NewPaletteMode On|Off": {
		"prefix": "NewPaletteMode",
		"body": "NewPaletteMode ${1:On|Off}",
		"description": "The NewPaletteMode flag has been added for compatibility with older Blitz programs."
	},
	"CyclePalette Palette#": {
		"prefix": "CyclePalette",
		"body": "CyclePalette ${1:Palette#}",
		"description": "CyclePalette uses the standard color cycling parameters in the palette object to cycle the colors."
	},
	"FadePalette SrcPalette#,DestPalette#,Brightness.q": {
		"prefix": "FadePalette",
		"body": "FadePalette ${1:SrcPalette#,DestPalette#,Brightness.q}",
		"description": "FadePalette multiplies all colours in a Palette by the Brightness argument and maces the result in the DestPalette."
	},
	"InitPalette Palette#,NumColors": {
		"prefix": "InitPalette",
		"body": "InitPalette ${1:Palette#,NumColors}",
		"description": "InitPalette simply initialises a palette object to hold NumColors."
	},
	"PaletteRange Palette#,StartCol,EndCol,r0,g0,b0,r1,g1,b1": {
		"prefix": "PaletteRange",
		"body": "PaletteRange ${1:Palette#,StartCol,EndCol,r0,g0,b0,r1,g1,b1}",
		"description": "PaletteRange creates a spread of colors within a palette."
	},
	"DuplicatePalette SrcPalette#,DestPalette#": {
		"prefix": "DuplicatePalette",
		"body": "DuplicatePalette ${1:SrcPalette#,DestPalette#}",
		"description": "DuplicatePalette simply creates a new Palette which exactly matches the SrcPalette."
	},
	"DecodePalette Palette#,MemoryLocation[,Palette Offset]": {
		"prefix": "DecodePalette",
		"body": "DecodePalette ${1:Palette#,MemoryLocation[,Palette Offset]}",
		"description": "DecodePalette allows the programmer to unpack included iff palette information to Blitz palette objects."
	},
	"MixPalette Palette#,Palette#,DestPalette#,fraction": {
		"prefix": "MixPalette",
		"body": "MixPalette ${1:Palette#,Palette#,DestPalette#,fraction}",
		"description": ""
	},
	"Scroll X1,Y1,Width,Height,X2,Y2[,BitMap#]": {
		"prefix": "Scroll",
		"body": "Scroll ${1:X1,Y1,Width,Height,X2,Y2[,BitMap#]}",
		"description": "Scroll allows rectangular areas within a bitmap to be moved around."
	},
	"Plot X,Y,Colour": {
		"prefix": "Plot",
		"body": "Plot ${1:X,Y,Colour}",
		"description": "Plot is used to alter the colour of an individual pixel on the currently used bitmap."
	},
	"Point X,Y,Colour": {
		"prefix": "Point",
		"body": "Point ${1:X,Y,Colour}",
		"description": "The Point function will return the colour of a particular pixel in the currently used bitmap."
	},
	"Cls [Colour]": {
		"prefix": "Cls",
		"body": "Cls ${1:[Colour]}",
		"description": "Cls allows you to fill the currently used bitmap with the colour specified by the Colour parameter."
	},
	"BlockScroll X1,Y1,Width,Height,X2,Y2[,BitMap#]": {
		"prefix": "BlockScroll",
		"body": "BlockScroll ${1:X1,Y1,Width,Height,X2,Y2[,BitMap#]}",
		"description": "Same as the Scroll command except that BlockScroll is much faster but only works with 16 bit aligned areas."
	},
	"Poke [.Type] Address,Data": {
		"prefix": "Poke",
		"body": "Poke ${1:[.Type] Address,Data}",
		"description": "The Poke command will place the specified Data into the absolute memory location specified by Address."
	},
	"Peek [.Type](Address)": {
		"prefix": "Peek",
		"body": "Peek ${1:[.Type](Address)}",
		"description": "The Peek function returns the contents of the absolute memory location specified by Address."
	},
	"Peeks$(Address,Length)": {
		"prefix": "Peeks$",
		"body": "Peeks$(${1:Address,Length})",
		"description": ""
	},
	"Call Address": {
		"prefix": "Call",
		"body": "Call ${1:Address}",
		"description": "Call will cause program flow to be transferred to the absolute memory location specified by Address."
	},
	"MenuTitle MenuList#,Menu,Title$": {
		"prefix": "MenuTitle",
		"body": "MenuTitle ${1:MenuList#,Menu,Title$}",
		"description": "MenuTitle is used to add a menu title to a menulist."
	},
	"SetMenu Menulist#": {
		"prefix": "SetMenu",
		"body": "SetMenu ${1:Menulist#}",
		"description": "SetMenu is used to attach a menulist to the currently used window."
	},
	"MenuItem MenuList#,Flags,Menu,Item,Itemtext$[,Shortcut$]": {
		"prefix": "MenuItem",
		"body": "MenuItem ${1:MenuList#,Flags,Menu,Item,Itemtext$[,Shortcut$]}",
		"description": "Menultem is used to create a text menu item."
	},
	"SubItem MenuList#,Flags,Menu,Item,Subitem,Subitemtext$[,Shortcut$]": {
		"prefix": "SubItem",
		"body": "SubItem ${1:MenuList#,Flags,Menu,Item,Subitem,Subitemtext$[,Shortcut$]}",
		"description": ""
	},
	"ShapeItem MenuList#,Flags,Menu,Item,Shape#": {
		"prefix": "ShapeItem",
		"body": "ShapeItem ${1:MenuList#,Flags,Menu,Item,Shape#}",
		"description": "ShapeItem is used to create a graphical menu item."
	},
	"ShapeSub MenuList#,Flags,Menu,Item,Subitem,Shape#": {
		"prefix": "ShapeSub",
		"body": "ShapeSub ${1:MenuList#,Flags,Menu,Item,Subitem,Shape#}",
		"description": "ShapeSub allows you to create a graphic sub menu item."
	},
	"MenuGap X Gap,Y Gap": {
		"prefix": "MenuGap",
		"body": "MenuGap ${1:X Gap,Y Gap}",
		"description": "Executing MenuGap before creating any menu titles, items or sub items, allows you to control the layout of the menu."
	},
	"SubItemOff X Offset,Y Offset": {
		"prefix": "SubItemOff",
		"body": "SubItemOff ${1:X Offset,Y Offset}",
		"description": ""
	},
	"MenuState MenuList#[,Menu[,Item[,Subitem]]],On|Off": {
		"prefix": "MenuState",
		"body": "MenuState ${1:MenuList#[,Menu[,Item[,Subitem]]],On|Off}",
		"description": "The MenuState command allows you to turn menus, or sections of menus, on or off."
	},
	"MenuColour Colour": {
		"prefix": "MenuColour",
		"body": "MenuColour ${1:Colour}",
		"description": "MenuColour allows you to determine what colour any menu item or sub item text is rendered in."
	},
	"MenuChecked(MenuList#,Menu,Item[,Subitem])": {
		"prefix": "MenuChecked",
		"body": "MenuChecked(${1:MenuList#,Menu,Item[,Subitem]})",
		"description": "The MenuChecked function allows you to tell whether or not a 'toggle' type menu item or menu sub item is currently 'checked' or ton'."
	},
	"Mouse On|Off": {
		"prefix": "Mouse",
		"body": "Mouse ${1:On|Off}",
		"description": "The Mouse command turns on or off Blitz mode's ability to read the mouse."
	},
	"Pointer Sprite#,Sprite Channel": {
		"prefix": "Pointer",
		"body": "Pointer ${1:Sprite#,Sprite Channel}",
		"description": "The Pointer command allows you to attach a sprite object to the mouse's position in the currently used slice in Blitz mode."
	},
	"MouseArea Minx,Miny,Maxx,Maxy": {
		"prefix": "MouseArea",
		"body": "MouseArea ${1:Minx,Miny,Maxx,Maxy}",
		"description": "MouseArea allows you to limit Blitz mode mouse movement to a rectangular section of the display."
	},
	"MouseX": {
		"prefix": "MouseX",
		"body": "MouseX",
		"description": "If Blitz mode mouse reading has been enabled using a Mouse On command, the MouseX function may be used to find the current horizontal location of the mouse."
	},
	"MouseY": {
		"prefix": "MouseY",
		"body": "MouseY",
		"description": "If Blitz mode mouse reading has been enabled using a Mouse On command, the MouseY function may be used to find the current vertical location of the mouse."
	},
	"MouseXSpeed": {
		"prefix": "MouseXSpeed",
		"body": "MouseXSpeed",
		"description": "If Blitz mode mouse reading has been enabled using a Mouse On command, the MouseXSpeed function may be used to find the current horizontal speed of mouse movement, regardless of whether or not a sprite is attached to the mouse."
	},
	"MouseYSpeed": {
		"prefix": "MouseYSpeed",
		"body": "MouseYSpeed",
		"description": "If Blitz mode mouse reading has been enabled using a Mouse On command, the MouseYSpeed function may be used to find the current vertical speed of mouse movement, regardless of whether or not a sprite is attached to the mouse."
	},
	"PositionMouse x,y": {
		"prefix": "PositionMouse",
		"body": "PositionMouse ${1:x,y}",
		"description": ""
	},
	"ChunkyCLS color": {
		"prefix": "ChunkyCLS",
		"body": "ChunkyCLS ${1:color}",
		"description": ""
	},
	"ChunkyPlot x,y,color,[,CLIP]": {
		"prefix": "ChunkyPlot",
		"body": "ChunkyPlot ${1:x,y,color,[,CLIP]}",
		"description": ""
	},
	"ChunkyVlin x,y1,y2,color,[,CLIP]": {
		"prefix": "ChunkyVlin",
		"body": "ChunkyVlin ${1:x,y1,y2,color,[,CLIP]}",
		"description": ""
	},
	"ChunkyPoly numpts,*coords.w,color[,noblitter]": {
		"prefix": "ChunkyPoly",
		"body": "ChunkyPoly ${1:numpts,*coords.w,color[,noblitter]}",
		"description": ""
	},
	"BitMapPoly numpts,*coords.w,color[,ditherbitmap]": {
		"prefix": "BitMapPoly",
		"body": "BitMapPoly ${1:numpts,*coords.w,color[,ditherbitmap]}",
		"description": ""
	},
	"RenderToBitmap BitMap#[,DitherBitMap#]": {
		"prefix": "RenderToBitmap",
		"body": "RenderToBitmap ${1:BitMap#[,DitherBitMap#]}",
		"description": ""
	},
	"RenderToChunky CopList#[,split]": {
		"prefix": "RenderToChunky",
		"body": "RenderToChunky ${1:CopList#[,split]}",
		"description": ""
	},
	"RenderPoly numpts,*coords.w,color": {
		"prefix": "RenderPoly",
		"body": "RenderPoly ${1:numpts,*coords.w,color}",
		"description": ""
	},
	"Print Expression[,Expression...]": {
		"prefix": "Print",
		"body": "Print ${1:Expression[,Expression...]}",
		"description": "Print allows you to output either strings or numeric values to the current output channel."
	},
	"NPrint Expression[,Expression...]": {
		"prefix": "NPrint",
		"body": "NPrint ${1:Expression[,Expression...]}",
		"description": "NPrint allows you to output either strings or numeric values to the current output channel."
	},
	"Str$(Expression)": {
		"prefix": "Str$",
		"body": "Str$(${1:Expression})",
		"description": "This returns a string equivalent of the numeric value Expression."
	},
	"Format FormatString": {
		"prefix": "Format",
		"body": "Format ${1:FormatString}",
		"description": "Format allows you to control the output of any numeric values by the Print or NPrint commands."
	},
	"FloatMode Mode : -1=standard, 0=guess, 1=exp": {
		"prefix": "FloatMode",
		"body": "FloatMode ${1:Mode : -1=standard, 0=guess, 1=exp}",
		"description": "FloatMode allows you to control how floating point numbers are output by the Print or NPrint commands."
	},
	"UStr$(Expression)": {
		"prefix": "UStr$",
		"body": "UStr$(${1:Expression})",
		"description": "This returns a string equivalent of the numeric value Expression."
	},
	"Queue Queue#,Max Items": {
		"prefix": "Queue",
		"body": "Queue ${1:Queue#,Max Items}",
		"description": ""
	},
	"QBlit Queue#,Shape#,X,Y[,Excessonoff]": {
		"prefix": "QBlit",
		"body": "QBlit ${1:Queue#,Shape#,X,Y[,Excessonoff]}",
		"description": "QBlit performs similarly to Blit, and is also used to draw a shape onto the currently used bitmap."
	},
	"UnQueue Queue#[,BitMap#]": {
		"prefix": "UnQueue",
		"body": "UnQueue ${1:Queue#[,BitMap#]}",
		"description": "UnQueue is used to erase all 'remembered' items in a queue."
	},
	"QBlitMode BLTCON0": {
		"prefix": "QBlitMode",
		"body": "QBlitMode ${1:BLTCON0}",
		"description": "QBlitMode allows you to control how the blister operates when QBlitting shapes to bitmaps."
	},
	"FlushQueue Queue#": {
		"prefix": "FlushQueue",
		"body": "FlushQueue ${1:Queue#}",
		"description": "FlushQueue will force the specified queue object to be 'emptied', causing the next UnQueue command to have no effect."
	},
	"Screen [Screen#,Mode[,Title$]]|[Screen#,X,Y,W,H,D,Viewmode,Title$,Dpen,Bpen[,BitMap#]": {
		"prefix": "Screen",
		"body": "Screen ${1:[Screen#,Mode[,Title$]]|[Screen#,X,Y,W,H,D,Viewmode,Title$,Dpen,Bpen[,BitMap#]}",
		"description": "Screen#,X,Y,Width,Height,Depth,VMode,Title$,Dpen,Bpen[,BMap#]  Screen will open an Intuition screen."
	},
	"WbToScreen Screen#": {
		"prefix": "WbToScreen",
		"body": "WbToScreen ${1:Screen#}",
		"description": "WbToScreen will assign the Workbench screen a screen object number."
	},
	"LoadScreen Screen#,Filename$[,Palette#]": {
		"prefix": "LoadScreen",
		"body": "LoadScreen ${1:Screen#,Filename$[,Palette#]}",
		"description": "LoadScreen loads an IFF ILBM picture into the screen object specified by Screen#."
	},
	"FindScreen Screen#[,Title$]": {
		"prefix": "FindScreen",
		"body": "FindScreen ${1:Screen#[,Title$]}",
		"description": "This command will find a screen and give it an object number so it can be referenced in your programs."
	},
	"SMouseX": {
		"prefix": "SMouseX",
		"body": "SMouseX",
		"description": "SMouseX returns the horizontal position of the mouse relative to the left edge of the currently used screen."
	},
	"SMouseY": {
		"prefix": "SMouseY",
		"body": "SMouseY",
		"description": "SMouseY returns the vertical position of the mouse relative to the top of the current screen."
	},
	"ShowScreen Screen#": {
		"prefix": "ShowScreen",
		"body": "ShowScreen ${1:Screen#}",
		"description": "ShowScreen will cause the specified screen object to be moved to the front of the display."
	},
	"ScreenPens Text,Shine,Shadow,Fill,FillText,Background,HighLight": {
		"prefix": "ScreenPens",
		"body": "ScreenPens ${1:Text,Shine,Shadow,Fill,FillText,Background,HighLight}",
		"description": "ScreenPens configures the 10 default pens used for system gadgets in WorkBench 2."
	},
	"ViewPort(Screen#)": {
		"prefix": "ViewPort",
		"body": "ViewPort(${1:Screen#})",
		"description": "The ViewPort function returns the location of the specified screens ViewPort."
	},
	"ShowBitMap [BitMap#]": {
		"prefix": "ShowBitMap",
		"body": "ShowBitMap ${1:[BitMap#]}",
		"description": "The ShowBitMap command is the Amiga-mode version of the Show command."
	},
	"CloseScreen Screen#": {
		"prefix": "CloseScreen",
		"body": "CloseScreen ${1:Screen#}",
		"description": "CloseScreen has been added for convenience."
	},
	"HideScreen Screen#": {
		"prefix": "HideScreen",
		"body": "HideScreen ${1:Screen#}",
		"description": "Move Screen to back of all Screens open in the system."
	},
	"BeepScreen Screen#": {
		"prefix": "BeepScreen",
		"body": "BeepScreen ${1:Screen#}",
		"description": "Flash specified screen."
	},
	"MoveScreen Screen#,deltax,deltay": {
		"prefix": "MoveScreen",
		"body": "MoveScreen ${1:Screen#,deltax,deltay}",
		"description": "Move specified screen by specified amount."
	},
	"ScreenTags Screen#,Title$ [&TagList] or [[,Tag,Data]...]": {
		"prefix": "ScreenTags",
		"body": "ScreenTags ${1:Screen#,Title$ [&TagList] or [[,Tag,Data]...]}",
		"description": "Full access to all the Amiga's new display resoutions is now available in Amiga mode by use of the Screen Tags command."
	},
	"OpenSerial device$,unit#,baud,io_serflags": {
		"prefix": "OpenSerial",
		"body": "OpenSerial ${1:device$,unit#,baud,io_serflags}",
		"description": "OpenSerial is used to configure a Serial Port for use."
	},
	"WriteSerial unit#,byte": {
		"prefix": "WriteSerial",
		"body": "WriteSerial ${1:unit#,byte}",
		"description": "WriteSerial sends one byte to the serial port."
	},
	"WriteSerialString unit#,string[,Flags 1=DoIO 2=TrueString]": {
		"prefix": "WriteSerialString",
		"body": "WriteSerialString ${1:unit#,string[,Flags 1=DoIO 2=TrueString]}",
		"description": "WriteSerialString is similar to WriteSerial but sends a complete string to the serial port."
	},
	"ReadSerial(unit#[,flags 1=wait on])  returns -1 if nothing waiting": {
		"prefix": "ReadSerial",
		"body": "ReadSerial(${1:unit#[,flags 1=wait on])  returns -1 if nothing waiting})",
		"description": "ReadSerial returns the next byte waiting in the serial port's read buffer."
	},
	"ReadSerialString(unit#)  returns null if nothing waiting": {
		"prefix": "ReadSerialString",
		"body": "ReadSerialString(${1:unit#)  returns null if nothing waiting})",
		"description": "ReadSerialString puts the serial port's read buffer into a string, if the buffer is empty the function will return a null string (length=0)."
	},
	"CloseSerial unit#": {
		"prefix": "CloseSerial",
		"body": "CloseSerial ${1:unit#}",
		"description": "The CloseSerial command will close the port, enabling other programs to use it."
	},
	"SetSerialBuffer unit#,bufferlength": {
		"prefix": "SetSerialBuffer",
		"body": "SetSerialBuffer ${1:unit#,bufferlength}",
		"description": "SetSerialBuffer changes the size of the ports read buffer."
	},
	"SetSerialLens unit#,readlen,writelen,stopbits": {
		"prefix": "SetSerialLens",
		"body": "SetSerialLens ${1:unit#,readlen,writelen,stopbits}",
		"description": "SetSerialLens allows you to change the size of characters read and written by the serial device."
	},
	"SetSerialParams unit#": {
		"prefix": "SetSerialParams",
		"body": "SetSerialParams ${1:unit#}",
		"description": "For advanced users, SetSerialParams tells the serial port when parameters are changed This would only be necesary if they were changed by poking offsets from IOExtSer which is returned by the OpenSerial command."
	},
	"SerialEvent(unit#)": {
		"prefix": "SerialEvent",
		"body": "SerialEvent(${1:unit#})",
		"description": "SerialEvent is used when your program is handling events from more than I source, Windows, ARexx etc."
	},
	"ReadSerialMem unit#,Address,Length": {
		"prefix": "ReadSerialMem",
		"body": "ReadSerialMem ${1:unit#,Address,Length}",
		"description": "ReadSerialMem will fill the given memory space with data from the given serial port."
	},
	"WriteSerialMem unit#,Address,Length": {
		"prefix": "WriteSerialMem",
		"body": "WriteSerialMem ${1:unit#,Address,Length}",
		"description": ""
	},
	"LoadShape Shape#,Filename$[,Palette#]": {
		"prefix": "LoadShape",
		"body": "LoadShape ${1:Shape#,Filename$[,Palette#]}",
		"description": "LoadShape allows you to load an ILBM IFF file into a shape object."
	},
	"MakeCookie Shape#": {
		"prefix": "MakeCookie",
		"body": "MakeCookie ${1:Shape#}",
		"description": "MakeCookie allows you to create a'cookiecut' for an individual shape."
	},
	"ShapeWidth(Shape#)": {
		"prefix": "ShapeWidth",
		"body": "ShapeWidth(${1:Shape#})",
		"description": "The ShapeWidth function returns the width, in pixels, of a previously created shape object."
	},
	"ShapeHeight(Shape#)": {
		"prefix": "ShapeHeight",
		"body": "ShapeHeight(${1:Shape#})",
		"description": "The ShapeHeight function returns the height, in pixels, of a previously created shape object."
	},
	"Handle Shape#,X,Y": {
		"prefix": "Handle",
		"body": "Handle ${1:Shape#,X,Y}",
		"description": "All shapes have an associated 'handle'."
	},
	"AutoCookie On|Off": {
		"prefix": "AutoCookie",
		"body": "AutoCookie ${1:On|Off}",
		"description": "When shapes objects are used by any of the blitting routines (for example, Blit), they usually require the presence of what is known as a'cookiecut'."
	},
	"CopyShape Shape#,Shape#": {
		"prefix": "CopyShape",
		"body": "CopyShape ${1:Shape#,Shape#}",
		"description": "CopyShape will produce an exact copy of one shape object in another shape object."
	},
	"GetaShape Shape#,X,Y,Width,Height": {
		"prefix": "GetaShape",
		"body": "GetaShape ${1:Shape#,X,Y,Width,Height}",
		"description": "GetaShape lets you transfer a rectangular area of the currently used bitmap into the specified shape object."
	},
	"SaveShapes Shape#,Shape#,Filename$": {
		"prefix": "SaveShapes",
		"body": "SaveShapes ${1:Shape#,Shape#,Filename$}",
		"description": "SaveShapes allows you to create a file containing a range of shape objects."
	},
	"LoadShapes Shape#[,Shape#],Filename$": {
		"prefix": "LoadShapes",
		"body": "LoadShapes ${1:Shape#[,Shape#],Filename$}",
		"description": "LoadShapes lets you load a 'range' of shapes from disk into a series of shape objects."
	},
	"MidHandle Shape#": {
		"prefix": "MidHandle",
		"body": "MidHandle ${1:Shape#}",
		"description": "MidHandle will cause the handle of the specified shape to be set to it's centre."
	},
	"DecodeShapes Shape#[,Shape#],MemoryLocation": {
		"prefix": "DecodeShapes",
		"body": "DecodeShapes ${1:Shape#[,Shape#],MemoryLocation}",
		"description": "DecodeShapes, similar to DecodeMedModule ensures the data is in chip and then configures the Shape object(s) to point to the data."
	},
	"InitShape Shape#,Width,Height,Depth": {
		"prefix": "InitShape",
		"body": "InitShape ${1:Shape#,Width,Height,Depth}",
		"description": "InitShape has been added to simple create blank shape objects."
	},
	"Scale Shape#,X Ratio,Y Ratio[,Palette#]": {
		"prefix": "Scale",
		"body": "Scale ${1:Shape#,X Ratio,Y Ratio[,Palette#]}",
		"description": "Scale is a very powerful command which may be used to 'stretch' or'shrink' shape objects."
	},
	"XFlip Shape#": {
		"prefix": "XFlip",
		"body": "XFlip ${1:Shape#}",
		"description": "The XFlip command is one of Blitz's powerful shape manipulation commands."
	},
	"YFlip Shape#": {
		"prefix": "YFlip",
		"body": "YFlip ${1:Shape#}",
		"description": "The YFlip command may be used to vertically 'mirror' a shape object."
	},
	"Rotate Shape#,Angle Ratio": {
		"prefix": "Rotate",
		"body": "Rotate ${1:Shape#,Angle Ratio}",
		"description": "The Rotate command allows you to rotate a shape object."
	},
	"Circle x,y,rx[,ry],color": {
		"prefix": "Circle",
		"body": "Circle ${1:x,y,rx[,ry],color}",
		"description": "Circle will draw an open circle onto the currently used bitmap."
	},
	"Circlef x,y,rx[,ry],color": {
		"prefix": "Circlef",
		"body": "Circlef ${1:x,y,rx[,ry],color}",
		"description": "Circlef will draw a filled circle onto the currently used bitmap."
	},
	"Box x1,y1,x2,y2,color": {
		"prefix": "Box",
		"body": "Box ${1:x1,y1,x2,y2,color}",
		"description": "The Box command draws a rectangular outline onto the currently used bitmap."
	},
	"Boxf x1,y1,x2,y2,color": {
		"prefix": "Boxf",
		"body": "Boxf ${1:x1,y1,x2,y2,color}",
		"description": "Boxf draws a solid rectangular shape on the currently used bitmap."
	},
	"Line [x1,y1,]x2,y2,color[,width]": {
		"prefix": "Line",
		"body": "Line ${1:[x1,y1,]x2,y2,color[,width]}",
		"description": "The Line command draws a line connecting two pixels onto the currently used bitmap."
	},
	"FreeFill frees memory allocated for 2d fill routines": {
		"prefix": "FreeFill",
		"body": "FreeFill ${1:frees memory allocated for 2d fill routines}",
		"description": "FreeFill will deallocate the memory that Blitz uses to execute the commands Circlef, FloodFill, ReMap and Boxf."
	},
	"AllocFill for internal use only (polylib.obj)": {
		"prefix": "AllocFill",
		"body": "AllocFill ${1:for internal use only (polylib.obj)}",
		"description": ""
	},
	"ReMap colour# to replace,destination colour# [,BitMap destintion": {
		"prefix": "ReMap",
		"body": "ReMap ${1:colour# to replace,destination colour# [,BitMap destintion}",
		"description": "ReMap is used to change all the pixels on a BitMap in one colour to another colour."
	},
	"FloodFill x,y,colour [,border colour]": {
		"prefix": "FloodFill",
		"body": "FloodFill ${1:x,y,colour [,border colour]}",
		"description": "FloodFill will 'colour in' a region of the screen starting at the coordinates X,Y."
	},
	"Poly numpts,*coords.w,color": {
		"prefix": "Poly",
		"body": "Poly ${1:numpts,*coords.w,color}",
		"description": "Poly is a bitmap based commands such as Box and Line."
	},
	"Polyf numpts,*coords.w,color[,color2]": {
		"prefix": "Polyf",
		"body": "Polyf ${1:numpts,*coords.w,color[,color2]}",
		"description": "Same as Poly except Polyf draws filled polygons and has an optional parameter color2, if used this colour will be used if the coordinates are listed in anti-clockwise order, useful for 3D type applications."
	},
	"BitPlanesBitMap srcbitmap,destbitmap,planepick": {
		"prefix": "BitPlanesBitMap",
		"body": "BitPlanesBitMap ${1:srcbitmap,destbitmap,planepick}",
		"description": "BitPlanesBitMap creates a 'dummy' bitmap from the SrcBitMap with only the bitplanes specified by the PlanePick mask."
	},
	"ClipBlit Shape#,X,Y,[Excess]": {
		"prefix": "ClipBlit",
		"body": "ClipBlit ${1:Shape#,X,Y,[Excess]}",
		"description": "ClipBlit is the same as the Blit command except ClipBlit will clip the shape to the inside of the used bitmap, all blit commands in Blitz are due to be expanded with this feature."
	},
	"ClipBlitMode BPLCON0": {
		"prefix": "ClipBlitMode",
		"body": "ClipBlitMode ${1:BPLCON0}",
		"description": "Same as BlitMode except applies to the ClipBlit command."
	},
	"BitMapWindow srcbitmap,destbitmap,x,y,w,h": {
		"prefix": "BitMapWindow",
		"body": "BitMapWindow ${1:srcbitmap,destbitmap,x,y,w,h}",
		"description": "BitMapWindow creates a dummy bitmap inside another bitmap."
	},
	"BitMapOrigin BitMap#,x,y": {
		"prefix": "BitMapOrigin",
		"body": "BitMapOrigin ${1:BitMap#,x,y}",
		"description": "BitMapOrigin allows the programmer to relocate the origin (0,0) of the bitmap used by the drawing commands line, poly, box and circle."
	},
	"Sort Arrayname()": {
		"prefix": "Sort",
		"body": "Sort ${1:Arrayname()}",
		"description": "Sort will cause the specified array to be sorted."
	},
	"SortUp": {
		"prefix": "SortUp",
		"body": "SortUp",
		"description": "SortUp may be used to force the Sort command to sort arrays into ascending order."
	},
	"SortDown": {
		"prefix": "SortDown",
		"body": "SortDown",
		"description": "SortDown may be used to force the Sort command to sort arrays into descending order."
	},
	"By": {
		"prefix": "By",
		"body": "By",
		"description": ""
	},
	"Speak string": {
		"prefix": "Speak",
		"body": "Speak ${1:string}",
		"description": "The Speak command will first convert the given string to phonetics and then pass it to the Narrator."
	},
	"SetVoice rate(150),pitch(110),expression(1),sex,volume(64),freq(22200)": {
		"prefix": "SetVoice",
		"body": "SetVoice ${1:rate(150),pitch(110),expression(1),sex,volume(64),freq(22200)}",
		"description": "SetVoice alters the sound of the Amiga's speech synthsiser by changing the vocal characteristics listed in the parameters above."
	},
	"Translate$ returns phoneme translation of a string": {
		"prefix": "Translate$",
		"body": "Translate$ ${1:returns phoneme translation of a string}",
		"description": "Translate$() returns the phonetic equivalent of the string for use with the PhoneticSpeak command."
	},
	"PhoneticSpeak phonetic string": {
		"prefix": "PhoneticSpeak",
		"body": "PhoneticSpeak ${1:phonetic string}",
		"description": "PhoneticSpeak is similar to the Speak command but should only be passed strings containing legal phonemes such as that produced by the Translate$() function."
	},
	"VoiceLoc returns location of newvoice struct": {
		"prefix": "VoiceLoc",
		"body": "VoiceLoc ${1:returns location of newvoice struct}",
		"description": "VoiceLoc returns a pointer to the internal variables in the speech synthesiser that enable the user to access new parameters added to the V37 Narrator Device."
	},
	"GetaSprite Sprite#,Shape#": {
		"prefix": "GetaSprite",
		"body": "GetaSprite ${1:Sprite#,Shape#}",
		"description": "To be able to display a sprite, you must first create a sprite object."
	},
	"ShowSprite Sprite#,X,Y,Sprite Channel": {
		"prefix": "ShowSprite",
		"body": "ShowSprite ${1:Sprite#,X,Y,Sprite Channel}",
		"description": "ShowSprite is the command used to actually display a sprite through a sprite channel."
	},
	"InFront Sprite Channel": {
		"prefix": "InFront",
		"body": "InFront ${1:Sprite Channel}",
		"description": "A feature of sprites is that they may be displayed either 'in front of' or 'behind' the bitmap graphics they are appearing in."
	},
	"InFrontF Sprite Channel": {
		"prefix": "InFrontF",
		"body": "InFrontF ${1:Sprite Channel}",
		"description": "InFrontF is used on dualplayfield slices to determine sprite/playfield priority with respect to the foreground playfield."
	},
	"InFrontB Sprite Channel": {
		"prefix": "InFrontB",
		"body": "InFrontB ${1:Sprite Channel}",
		"description": "InFrontB is used on dualplayfield slices to determine sprite/playfield priority with respect to the background playfield."
	},
	"SaveSprites Sprite#,Sprite#,Filename$": {
		"prefix": "SaveSprites",
		"body": "SaveSprites ${1:Sprite#,Sprite#,Filename$}",
		"description": "SaveSprites allows you to create a file containing a range of sprite objects."
	},
	"LoadSprites Sprite#[,Sprite#],Filename$": {
		"prefix": "LoadSprites",
		"body": "LoadSprites ${1:Sprite#[,Sprite#],Filename$}",
		"description": "LoadSprites lets you load a 'range' of sprites from disk into a series of sprite objects."
	},
	"SpriteMode 0=16 1=32 2=64": {
		"prefix": "SpriteMode",
		"body": "SpriteMode ${1:0=16 1=32 2=64}",
		"description": "For use with the capabilities of the new Display library SpriteMode is used to define the width of sprites to be used in the program."
	},
	"Stencil Stencil#,BitMap#": {
		"prefix": "Stencil",
		"body": "Stencil ${1:Stencil#,BitMap#}",
		"description": "The Stencil command will create a stencil object based on the contents of a previously created bitmap."
	},
	"SBlit Stencil#,Shape#,X,Y[,Excessonoff]": {
		"prefix": "SBlit",
		"body": "SBlit ${1:Stencil#,Shape#,X,Y[,Excessonoff]}",
		"description": "SBlit works identically to the Blit command, and also updates the specified Stencil#."
	},
	"SBlitMode BLTCON0": {
		"prefix": "SBlitMode",
		"body": "SBlitMode ${1:BLTCON0}",
		"description": "SBlitmode is used to determine how the SBlit command operates."
	},
	"Left$(String$,Length)": {
		"prefix": "Left$",
		"body": "Left$(${1:String$,Length})",
		"description": "This function returns the Length leftmost characters of string String$."
	},
	"Right$(String$,Length)": {
		"prefix": "Right$",
		"body": "Right$(${1:String$,Length})",
		"description": "Right$() returns the rightmost Length characters from string String$."
	},
	"Mid$(String$,Startchar[,Length])": {
		"prefix": "Mid$",
		"body": "Mid$(${1:String$,Startchar[,Length]})",
		"description": "This function returns Length characters of string String$ starting at character Startchar."
	},
	"Hex$(Expression)": {
		"prefix": "Hex$",
		"body": "Hex$(${1:Expression})",
		"description": "Hex$() returns an 8 character string equivalent to the hexadecimal representation of Expression."
	},
	"Bin$(Expression)": {
		"prefix": "Bin$",
		"body": "Bin$(${1:Expression})",
		"description": "Hex$() returns a 32 character string equivalent to the binary representation of Expression."
	},
	"Chr$(Expression)": {
		"prefix": "Chr$",
		"body": "Chr$(${1:Expression})",
		"description": "Chr$ returns a one character string equivalent to the ASCII character Expression."
	},
	"Asc(String$)": {
		"prefix": "Asc",
		"body": "Asc(${1:String$})",
		"description": "Asc() returns the ASCII value of the first characters in the string String$."
	},
	"String$(String$,Repeats)": {
		"prefix": "String$",
		"body": "String$(${1:String$,Repeats})",
		"description": "This function will return a string containing Repeats sequential occurrences of the string String$."
	},
	"Instr(String$,Findstring$[,Startpos])": {
		"prefix": "Instr",
		"body": "Instr(${1:String$,Findstring$[,Startpos]})",
		"description": "Instr attempts to locate FindString$ within String$."
	},
	"Replace$(String$,Findstring$,Replacestring$)": {
		"prefix": "Replace$",
		"body": "Replace$(${1:String$,Findstring$,Replacestring$})",
		"description": "Replace$() will search the string String$ for any occurrences of the string Findstring$ and replace it with the string Replacestring$."
	},
	"Mki$(Integer)": {
		"prefix": "Mki$",
		"body": "Mki$(${1:Integer})",
		"description": "This will create a two byte character string, given the two byte numeric value Numeric."
	},
	"Mkl$(Long)": {
		"prefix": "Mkl$",
		"body": "Mkl$(${1:Long})",
		"description": "This will create a four byte character string, given the four byte numeric value Long."
	},
	"Cvi(String$)": {
		"prefix": "Cvi",
		"body": "Cvi(${1:String$})",
		"description": "Cvi returns an integer value equivalent to the left 2 characters of String$."
	},
	"Cvl(String$)": {
		"prefix": "Cvl",
		"body": "Cvl(${1:String$})",
		"description": "Cvl returns a long value equivalent to the left 4 characters of String$."
	},
	"Len(String$)": {
		"prefix": "Len",
		"body": "Len(${1:String$})",
		"description": "Len returns the length of the string String$."
	},
	"UnLeft$(String$,Length)": {
		"prefix": "UnLeft$",
		"body": "UnLeft$(${1:String$,Length})",
		"description": "UnLeft$() removes the rightmost Length characters from the string String$."
	},
	"UnRight$(String$,Length)": {
		"prefix": "UnRight$",
		"body": "UnRight$(${1:String$,Length})",
		"description": "UnRight$() removes the leftmost Length characters from the string String$."
	},
	"StripLead$(String$,Ascii)": {
		"prefix": "StripLead$",
		"body": "StripLead$(${1:String$,Ascii})",
		"description": ""
	},
	"StripTrail$(String$,Ascii)": {
		"prefix": "StripTrail$",
		"body": "StripTrail$(${1:String$,Ascii})",
		"description": "StripTrail$ removes all trailing occurrences of the ASCII character specified by Expression from the string String$."
	},
	"LSet$(String$,Characters)": {
		"prefix": "LSet$",
		"body": "LSet$(${1:String$,Characters})",
		"description": "This function returns a string of Characters characters long."
	},
	"RSet$(String$,Characters)": {
		"prefix": "RSet$",
		"body": "RSet$(${1:String$,Characters})",
		"description": "This function returns a string of Characters characters long."
	},
	"Centre$(String$,Characters)": {
		"prefix": "Centre$",
		"body": "Centre$(${1:String$,Characters})",
		"description": "This function returns a string of Characters characters long."
	},
	"LCase$(String$)": {
		"prefix": "LCase$",
		"body": "LCase$(${1:String$})",
		"description": "This function returns the string String$ converted into lowercase."
	},
	"UCase$(String$)": {
		"prefix": "UCase$",
		"body": "UCase$(${1:String$})",
		"description": "This function returns the string String$ converted to uppercase."
	},
	"CaseSense On|Off": {
		"prefix": "CaseSense",
		"body": "CaseSense ${1:On|Off}",
		"description": "CaseSense allows you to control the searching mode used by the Instr and Replace$ functions."
	},
	"Mkq$(Quick)": {
		"prefix": "Mkq$",
		"body": "Mkq$(${1:Quick})",
		"description": "This will create a four byte character string, given the four byte numeric value Quick."
	},
	"Cvq(String$)": {
		"prefix": "Cvq",
		"body": "Cvq(${1:String$})",
		"description": "Cvq returns a quick value equivalent to the left 4 characters of String$."
	},
	"LoadModule Module#,Filename$": {
		"prefix": "LoadModule",
		"body": "LoadModule ${1:Module#,Filename$}",
		"description": "LoadModule loads in from disk a soundtracker/noisetracker music module."
	},
	"PlayModule Module#": {
		"prefix": "PlayModule",
		"body": "PlayModule ${1:Module#}",
		"description": "PlayModule will cause a previously loaded soundtracker/noisetracker song module to be played back."
	},
	"StopModule": {
		"prefix": "StopModule",
		"body": "StopModule",
		"description": "StopModule will cause any soundtracker/noisetracker modules which may be currently playing to stop."
	},
	"CreateMsgPort": {
		"prefix": "CreateMsgPort",
		"body": "CreateMsgPort",
		"description": "*UserPort.port=CreateMsgPort(PortName$)."
	},
	"DeleteMsgPort": {
		"prefix": "DeleteMsgPort",
		"body": "DeleteMsgPort",
		"description": "*UserPort."
	},
	"Wait": {
		"prefix": "Wait",
		"body": "Wait",
		"description": "Wait halts all program execution until an event occurs that the program is interested in."
	},
	"TaskName$ task": {
		"prefix": "TaskName$",
		"body": "TaskName$ ${1:task}",
		"description": ""
	},
	"Val(String$)": {
		"prefix": "Val",
		"body": "Val(${1:String$})",
		"description": "This functions converts the string String$ into a numeric value and returns this value."
	},
	"Int(Expression)": {
		"prefix": "Int",
		"body": "Int(${1:Expression})",
		"description": "This returns the Integer part (before the decimal point) of Expression."
	},
	"Sgn(Expression)": {
		"prefix": "Sgn",
		"body": "Sgn(${1:Expression})",
		"description": "Sgn returns the sign of Expression."
	},
	"Frac(Expression)": {
		"prefix": "Frac",
		"body": "Frac(${1:Expression})",
		"description": "Frac() returns the fractional part of Expression."
	},
	"QFrac(Quick)": {
		"prefix": "QFrac",
		"body": "QFrac(${1:Quick})",
		"description": "QFrac() returns the fractional part of a quick value."
	},
	"QWrap(Quick,Low,High)": {
		"prefix": "QWrap",
		"body": "QWrap(${1:Quick,Low,High})",
		"description": "QWrap will wrap the result of the Quick expression if Quick is greater than or equal to high, or less than low."
	},
	"Rnd [(Range)]": {
		"prefix": "Rnd",
		"body": "Rnd ${1:[(Range)]}",
		"description": "This function returns a random number."
	},
	"QAbs(Quick)": {
		"prefix": "QAbs",
		"body": "QAbs(${1:Quick})",
		"description": "QAbs works just like Abs except that the value it accepts is a Quick."
	},
	"Abs(Expression)": {
		"prefix": "Abs",
		"body": "Abs(${1:Expression})",
		"description": "This function returns the positive equivalent of Expression."
	},
	"QLimit(Quick,Low,High)": {
		"prefix": "QLimit",
		"body": "QLimit(${1:Quick,Low,High})",
		"description": ""
	},
	"NTSC": {
		"prefix": "NTSC",
		"body": "NTSC",
		"description": "This function returns 0 if the display is currently in PAL mode, or -1 if currently in NTSC mode."
	},
	"DispHeight": {
		"prefix": "DispHeight",
		"body": "DispHeight",
		"description": "DispHeight will return 256 if executed on a PAL Amiga, or 200 if executed on an NTSC Amiga."
	},
	"VPos": {
		"prefix": "VPos",
		"body": "VPos",
		"description": "VPos returns the video's beam vertical position."
	},
	"True": {
		"prefix": "True",
		"body": "True",
		"description": "True is a system constant with a value of -1."
	},
	"False": {
		"prefix": "False",
		"body": "False",
		"description": "False is a system constant with a value of 0."
	},
	"QAngle(Src X,Src Y,Dest X,Dest Y)": {
		"prefix": "QAngle",
		"body": "QAngle(${1:Src X,Src Y,Dest X,Dest Y})",
		"description": "QAngle returns the angle between the two 2D coordinates passed."
	},
	"Window Window#,X,Y,Width,Height,Flags,Title$,Dpen,Bpen[,GadgetList#[,BitMap#]]": {
		"prefix": "Window",
		"body": "Window ${1:Window#,X,Y,Width,Height,Flags,Title$,Dpen,Bpen[,GadgetList#[,BitMap#]]}",
		"description": "Window opens an Intuition window on the currently used screen."
	},
	"WaitEvent": {
		"prefix": "WaitEvent",
		"body": "WaitEvent",
		"description": "WaitEvent will halt program excution until an Intuition event has been received."
	},
	"Event": {
		"prefix": "Event",
		"body": "Event",
		"description": "Event works similarly to WaitEvent in that it returns the IDCMP flag of any outstanding windows events."
	},
	"GadgetHit": {
		"prefix": "GadgetHit",
		"body": "GadgetHit",
		"description": "GadgetHit returns the identification number of the gadget that caused the most recent 'gadget pushed' or 'gadget released' event."
	},
	"EventWindow": {
		"prefix": "EventWindow",
		"body": "EventWindow",
		"description": "EventWindow may be used to determine in which window the most recent window event occured."
	},
	"DefaultIDCMP IDCMP_Flags": {
		"prefix": "DefaultIDCMP",
		"body": "DefaultIDCMP ${1:IDCMP_Flags}",
		"description": "DefaultIDCMP allows you to set the IDCMP flags used when opening further windows."
	},
	"MenuHit": {
		"prefix": "MenuHit",
		"body": "MenuHit",
		"description": "MenuHit returns the identification number of the menu that caused the last menu event."
	},
	"ItemHit": {
		"prefix": "ItemHit",
		"body": "ItemHit",
		"description": "ItemHit returns the identification number of the menu item that caused the last menu event."
	},
	"SubHit": {
		"prefix": "SubHit",
		"body": "SubHit",
		"description": "SubHit returns the identification number of the the menu subitem that caused the last menu event."
	},
	"WindowFont IntuiFont# [,SoftStyle]": {
		"prefix": "WindowFont",
		"body": "WindowFont ${1:IntuiFont# [,SoftStyle]}",
		"description": "WindowFont sets the font for the currently used window."
	},
	"WPlot X,Y,Colour": {
		"prefix": "WPlot",
		"body": "WPlot ${1:X,Y,Colour}",
		"description": "WPlot plots a pixel in the currently used window at the coordinates X,Y in the colour specified by Colour."
	},
	"WBox X1,Y1,X2,Y2,Colour": {
		"prefix": "WBox",
		"body": "WBox ${1:X1,Y1,X2,Y2,Colour}",
		"description": "WBox draws a solid rectangle in the currently used window."
	},
	"WCircle X,Y,Radius,Colour": {
		"prefix": "WCircle",
		"body": "WCircle ${1:X,Y,Radius,Colour}",
		"description": "WCircle allows you to draw a circle in the currently used window."
	},
	"WEllipse X,Y,X Radius,Y Radius,Colour": {
		"prefix": "WEllipse",
		"body": "WEllipse ${1:X,Y,X Radius,Y Radius,Colour}",
		"description": "WEllipse draws an ellipse in the currently used window."
	},
	"WCls [Colour]": {
		"prefix": "WCls",
		"body": "WCls ${1:[Colour]}",
		"description": "WCls will clear the currently used window to colour 0, or a colour is specified, then it will be cleared to this colour."
	},
	"WLocate Cursor x,Cursor y": {
		"prefix": "WLocate",
		"body": "WLocate ${1:Cursor x,Cursor y}",
		"description": "WLocate is used to set the text cursor position within the currently used window."
	},
	"WindowInput Window#": {
		"prefix": "WindowInput",
		"body": "WindowInput ${1:Window#}",
		"description": ""
	},
	"WindowOutput Window#": {
		"prefix": "WindowOutput",
		"body": "WindowOutput ${1:Window#}",
		"description": "WindowOutput will cause any future executions of either the Print or NPrint statements to send their output as text to the specified window object."
	},
	"Qualifier": {
		"prefix": "Qualifier",
		"body": "Qualifier",
		"description": "Qualifier will return the qualifier of the last key that caused a 'key press' event to occur."
	},
	"RawKey": {
		"prefix": "RawKey",
		"body": "RawKey",
		"description": "RawKey returns the raw key code of a key that caused the most recent 'key press' evens."
	},
	"Cursor Thickness : <0 - block, >=0": {
		"prefix": "Cursor",
		"body": "Cursor ${1:Thickness : <0 - block, >=0}",
		"description": "underline thickness."
	},
	"Editat": {
		"prefix": "Editat",
		"body": "Editat",
		"description": "After executing an Edit$ or Edit function, Editat may be used to determine the horizontal character position of the cursor at the time the function was exited."
	},
	"EditFrom [Characterpos]": {
		"prefix": "EditFrom",
		"body": "EditFrom ${1:[Characterpos]}",
		"description": "EditFrom allows you to control how the Edit$ and Edit functions operate when used within windows."
	},
	"EditExit": {
		"prefix": "EditExit",
		"body": "EditExit",
		"description": "EditExit returns the ASCII value of the character that was used to exit a window based Edit$ or Edit function."
	},
	"WScroll X1,Y1,X2,Y2,Delta X,Delta Y[,colour]": {
		"prefix": "WScroll",
		"body": "WScroll ${1:X1,Y1,X2,Y2,Delta X,Delta Y[,colour]}",
		"description": "WScroll will cause a rectangular area of the currently used window to be moved or 'scrolled'."
	},
	"WMouseX": {
		"prefix": "WMouseX",
		"body": "WMouseX",
		"description": "WMouseX returns the horizontal x coordinate of the mouse relative to the left edge of the current window."
	},
	"WMouseY": {
		"prefix": "WMouseY",
		"body": "WMouseY",
		"description": "WMouseY returns the vertical y coordinate of the mouse relative to the top of the current window."
	},
	"WColour Foreground Colour[,Background Colour]": {
		"prefix": "WColour",
		"body": "WColour ${1:Foreground Colour[,Background Colour]}",
		"description": "WColour sets the foreground and background colour of printed text for the currently used window."
	},
	"WJam Jammode": {
		"prefix": "WJam",
		"body": "WJam ${1:Jammode}",
		"description": "WJam sets the text drawing mode of the currently used window."
	},
	"Wline X1,Y1,X2,Y3[,Xn,Yn...],Colour": {
		"prefix": "Wline",
		"body": "Wline ${1:X1,Y1,X2,Y3[,Xn,Yn...],Colour}",
		"description": ""
	},
	"Activate Window#": {
		"prefix": "Activate",
		"body": "Activate ${1:Window#}",
		"description": "Activate will activate the window specified by Window#."
	},
	"WindowX": {
		"prefix": "WindowX",
		"body": "WindowX",
		"description": "WindowX returns the horizontal pixel location of the top left corner of the currently used window, relative to the screen the window appears in."
	},
	"WindowY": {
		"prefix": "WindowY",
		"body": "WindowY",
		"description": "WindowY returns the vertical pixel location of the top left corner of the currently used window, relative to the screen the window appears in."
	},
	"MButtons": {
		"prefix": "MButtons",
		"body": "MButtons",
		"description": "MButtons returns the codes for the mouse buttons that caused the most recent 'mouse buttons' event."
	},
	"Menus On|Off": {
		"prefix": "Menus",
		"body": "Menus ${1:On|Off}",
		"description": "The Menus command may be used to turn ALL menus either on or off."
	},
	"WCursX": {
		"prefix": "WCursX",
		"body": "WCursX",
		"description": "WCursX returns the horizontal location of the text cursor of the currently used window."
	},
	"WCursY": {
		"prefix": "WCursY",
		"body": "WCursY",
		"description": "WCursY returns the vertical location of the text cursor of the currently used window."
	},
	"WPointer Shape#": {
		"prefix": "WPointer",
		"body": "WPointer ${1:Shape#}",
		"description": "WPointer allows you to determine the mouse pointer imagery used in the currently used window."
	},
	"MenusOn": {
		"prefix": "MenusOn",
		"body": "MenusOn",
		"description": ""
	},
	"MenusOff": {
		"prefix": "MenusOff",
		"body": "MenusOff",
		"description": ""
	},
	"WMove X,Y": {
		"prefix": "WMove",
		"body": "WMove ${1:X,Y}",
		"description": "WMove will move the current window to screen position X,Y."
	},
	"WSize Width,Height": {
		"prefix": "WSize",
		"body": "WSize ${1:Width,Height}",
		"description": "WSize will alter the width and height of the current window to the values specified by Width and Height."
	},
	"WindowWidth": {
		"prefix": "WindowWidth",
		"body": "WindowWidth",
		"description": "WindowWidth returns the pixel width of the currently used window."
	},
	"WindowHeight": {
		"prefix": "WindowHeight",
		"body": "WindowHeight",
		"description": "WindowHeight returns the pixel height of the currently used window."
	},
	"InnerWidth": {
		"prefix": "InnerWidth",
		"body": "InnerWidth",
		"description": "InnerWidth returns the pixel width of the area inside the border of the currently used window."
	},
	"InnerHeight": {
		"prefix": "InnerHeight",
		"body": "InnerHeight",
		"description": "InnerHeight returns the pixel height of the area inside the border of the currently used window."
	},
	"InnerCls [Colour]": {
		"prefix": "InnerCls",
		"body": "InnerCls ${1:[Colour]}",
		"description": "InnerCls will clear only the inner portion of the currently used window."
	},
	"WTopOff": {
		"prefix": "WTopOff",
		"body": "WTopOff",
		"description": "WTopOff returns the number of pixels between the top of the current window border and the inside of the window."
	},
	"WLeftOff": {
		"prefix": "WLeftOff",
		"body": "WLeftOff",
		"description": "WLeftOff returns the number of pixels between the left edge of the current window border and the inside of the window."
	},
	"SizeLimits Min Width,Min Height,Max Width,Max Height": {
		"prefix": "SizeLimits",
		"body": "SizeLimits ${1:Min Width,Min Height,Max Width,Max Height}",
		"description": "SizeLimits sets the limits that any new windows can be sized to with the sizing gadget."
	},
	"EMouseX": {
		"prefix": "EMouseX",
		"body": "EMouseX",
		"description": "EMouseX will return the horizontal position of the mouse pointer at the time the most recent window event occured."
	},
	"EMouseY": {
		"prefix": "EMouseY",
		"body": "EMouseY",
		"description": "EMouseY will return the vertical position of the mouse pointer at the time the most recent window event occured."
	},
	"AddIDCMP IDCMP_Flags": {
		"prefix": "AddIDCMP",
		"body": "AddIDCMP ${1:IDCMP_Flags}",
		"description": "AddIDCMP allows you to 'add in' IDCMP flags to the IDCMP flags selected by DefaultIDCMP."
	},
	"SubIDCMP IDCMP_Flags": {
		"prefix": "SubIDCMP",
		"body": "SubIDCMP ${1:IDCMP_Flags}",
		"description": "SubIDCMP allows you to 'subtract out' IDCMP flags from the IDCMP flags selected by DefaultIDCMP."
	},
	"FlushEvents [IDCMP_Flag]": {
		"prefix": "FlushEvents",
		"body": "FlushEvents ${1:[IDCMP_Flag]}",
		"description": ""
	},
	"CatchDosErrs": {
		"prefix": "CatchDosErrs",
		"body": "CatchDosErrs",
		"description": "Whenever you are executing AmigaDos I/O (for example, reading or writing a file), there is always the possibility of something going wrong (for example, disk not inserted."
	},
	"RastPort(Window#)": {
		"prefix": "RastPort",
		"body": "RastPort(${1:Window#})",
		"description": "RastPort returns the specified Window's RastPort address."
	},
	"SetEventFilter preprocess,postprocess": {
		"prefix": "SetEventFilter",
		"body": "SetEventFilter ${1:preprocess,postprocess}",
		"description": ""
	},
	"WTitle windowtitle$[,screentitle$]": {
		"prefix": "WTitle",
		"body": "WTitle ${1:windowtitle$[,screentitle$]}",
		"description": "WTitle is used to alter both the current window's title bar and it's screens title bar."
	},
	"CloseWindow Window#": {
		"prefix": "CloseWindow",
		"body": "CloseWindow ${1:Window#}",
		"description": "CloseWindow has been added for convenience."
	},
	"WPrintScroll": {
		"prefix": "WPrintScroll",
		"body": "WPrintScroll",
		"description": "WPrintScroll will scroll the current window upwards if the text cursor is below the bottom of the window and adjust the cursor accordingly."
	},
	"WBlit Shape#,x,y": {
		"prefix": "WBlit",
		"body": "WBlit ${1:Shape#,x,y}",
		"description": "WBlit can be used to blit any shape to the current window."
	},
	"BitMaptoWindow Bitmap#,Window#[,srcx,srcy,destx,desty,wid,height]": {
		"prefix": "BitMaptoWindow",
		"body": "BitMaptoWindow ${1:Bitmap#,Window#[,srcx,srcy,destx,desty,wid,height]}",
		"description": "BitMaptoWindow will copy a bitmap to a window in an operating system friendly manner (what do you expect)."
	},
	"EventCode": {
		"prefix": "EventCode",
		"body": "EventCode",
		"description": "EventCode returns the actual code of the last Event received by your program,."
	},
	"EventQualifier": {
		"prefix": "EventQualifier",
		"body": "EventQualifier",
		"description": "EventQualifier returns the contents of the Qualifier field."
	},
	"PositionSuperBitMap x,y": {
		"prefix": "PositionSuperBitMap",
		"body": "PositionSuperBitMap ${1:x,y}",
		"description": "PositionSuperBitMap is used to display a certain area of the bitmap in a super bitmap window."
	},
	"GetSuperBitMap": {
		"prefix": "GetSuperBitMap",
		"body": "GetSuperBitMap",
		"description": "After rendering changes to a superbitmap window the bitmap attached can also be updated with the GetSuperBitMap."
	},
	"PutSuperBitMap": {
		"prefix": "PutSuperBitMap",
		"body": "PutSuperBitMap",
		"description": "See GetSuperBitmap description."
	},
	"WindowTags Window#,Flags,Title$ [,&TagList] or [[,Tag,Data]...]": {
		"prefix": "WindowTags",
		"body": "WindowTags ${1:Window#,Flags,Title$ [,&TagList] or [[,Tag,Data]...]}",
		"description": "Similar to ScreenTags, WindowTags allows the advanced user to open a Blitz window with a list of OS Tags as described in the documentation for the operating system prior to 2."
	},
	"AddWaitEvent bitnumber,returncode.l": {
		"prefix": "AddWaitEvent",
		"body": "AddWaitEvent ${1:bitnumber,returncode.l}",
		"description": ""
	},
	"DelWaitEvent bitnumber": {
		"prefix": "DelWaitEvent",
		"body": "DelWaitEvent ${1:bitnumber}",
		"description": ""
	},
	"EventiAddress": {
		"prefix": "EventiAddress",
		"body": "EventiAddress",
		"description": ""
	},
	"WaitSigBits": {
		"prefix": "WaitSigBits",
		"body": "WaitSigBits",
		"description": ""
	},
	"LoadTrackerModule(TrackerModule#,Name)": {
		"prefix": "LoadTrackerModule",
		"body": "LoadTrackerModule(${1:TrackerModule#,Name})",
		"description": ""
	},
	"StartTracker(TrackerModule#)": {
		"prefix": "StartTracker",
		"body": "StartTracker(${1:TrackerModule#})",
		"description": ""
	},
	"StopTracker(Stops current playing module)": {
		"prefix": "StopTracker",
		"body": "StopTracker(${1:Stops current playing module})",
		"description": ""
	},
	"DecodeModule TrackerModule#,ModuleAddress": {
		"prefix": "DecodeModule",
		"body": "DecodeModule ${1:TrackerModule#,ModuleAddress}",
		"description": ""
	},
	"GetTrackerSize(TrackerModule#)": {
		"prefix": "GetTrackerSize",
		"body": "GetTrackerSize(${1:TrackerModule#})",
		"description": ""
	},
	"GetTrackerLocation(TrackerModule#)": {
		"prefix": "GetTrackerLocation",
		"body": "GetTrackerLocation(${1:TrackerModule#})",
		"description": ""
	},
	"FreeTrackerModule TrackerModule#": {
		"prefix": "FreeTrackerModule",
		"body": "FreeTrackerModule ${1:TrackerModule#}",
		"description": ""
	},
	"GetTrackerEvent": {
		"prefix": "GetTrackerEvent",
		"body": "GetTrackerEvent",
		"description": ""
	},
	"CheckTrackerEvent": {
		"prefix": "CheckTrackerEvent",
		"body": "CheckTrackerEvent",
		"description": ""
	},
	"WaitTrackerEvent": {
		"prefix": "WaitTrackerEvent",
		"body": "WaitTrackerEvent",
		"description": ""
	},
	"CheckTrackerID(TrackerModule#)": {
		"prefix": "CheckTrackerID",
		"body": "CheckTrackerID(${1:TrackerModule#})",
		"description": ""
	},
	"ModuleToChip(TrackerModule#)": {
		"prefix": "ModuleToChip",
		"body": "ModuleToChip(${1:TrackerModule#})",
		"description": ""
	},
	"GetModuleName$(TrackerModule#)": {
		"prefix": "GetModuleName$",
		"body": "GetModuleName$(${1:TrackerModule#})",
		"description": ""
	},
	"ModulePositionJump(Position#)": {
		"prefix": "ModulePositionJump",
		"body": "ModulePositionJump(${1:Position#})",
		"description": ""
	},
	"GetModulePosition": {
		"prefix": "GetModulePosition",
		"body": "GetModulePosition",
		"description": ""
	},
	"PauseModule": {
		"prefix": "PauseModule",
		"body": "PauseModule",
		"description": ""
	},
	"ChangeTrackerVBlank": {
		"prefix": "ChangeTrackerVBlank",
		"body": "ChangeTrackerVBlank",
		"description": ""
	},
	"PlayTracker": {
		"prefix": "PlayTracker",
		"body": "PlayTracker",
		"description": ""
	},
	"TrackerVolume Volume Range: 0-64": {
		"prefix": "TrackerVolume",
		"body": "TrackerVolume ${1:Volume Range: 0-64}",
		"description": ""
	},
	"ChangeTrackerMask Channel_Mask": {
		"prefix": "ChangeTrackerMask",
		"body": "ChangeTrackerMask ${1:Channel_Mask}",
		"description": ""
	},
	"ModulePatterns(Module #)": {
		"prefix": "ModulePatterns",
		"body": "ModulePatterns(${1:Module #})",
		"description": ""
	},
	"EasyRequest Result=EasyRequest([#Window,]title$,body$,gtext$)": {
		"prefix": "EasyRequest",
		"body": "EasyRequest ${1:Result=EasyRequest([#Window,]title$,body$,gtext$)}",
		"description": ""
	},
	"PrtText String": {
		"prefix": "PrtText",
		"body": "PrtText ${1:String}",
		"description": ""
	},
	"Hardcopy Screen#,X,Y,Width,Height,PtrWidth,PrtHeight,Flags": {
		"prefix": "Hardcopy",
		"body": "Hardcopy ${1:Screen#,X,Y,Width,Height,PtrWidth,PrtHeight,Flags}",
		"description": ""
	},
	"PrtCommand Command,Para1,Para2,Para3,Para4": {
		"prefix": "PrtCommand",
		"body": "PrtCommand ${1:Command,Para1,Para2,Para3,Para4}",
		"description": ""
	},
	"CheckPrt -1=Printer Off|-3=Printer Offline|-4=Printer On": {
		"prefix": "CheckPrt",
		"body": "CheckPrt ${1:-1=Printer Off|-3=Printer Offline|-4=Printer On}",
		"description": ""
	},
	"IsLocale <>0 if locale exists": {
		"prefix": "IsLocale",
		"body": "IsLocale ${1:<>0 if locale exists}",
		"description": ""
	},
	"UseCatalog Catalogname": {
		"prefix": "UseCatalog",
		"body": "UseCatalog ${1:Catalogname}",
		"description": ""
	},
	"FreeCatalog": {
		"prefix": "FreeCatalog",
		"body": "FreeCatalog",
		"description": ""
	},
	"GetLocaleStr(#StringNumber,DefaultString$)": {
		"prefix": "GetLocaleStr",
		"body": "GetLocaleStr(${1:#StringNumber,DefaultString$})",
		"description": ""
	},
	"OpenConsole #Window,#Console": {
		"prefix": "OpenConsole",
		"body": "OpenConsole ${1:#Window,#Console}",
		"description": ""
	},
	"PrintCon Console#,Expression": {
		"prefix": "PrintCon",
		"body": "PrintCon ${1:Console#,Expression}",
		"description": ""
	},
	"NPrintCon Console#,Expression": {
		"prefix": "NPrintCon",
		"body": "NPrintCon ${1:Console#,Expression}",
		"description": ""
	},
	"CloseConsole Console#": {
		"prefix": "CloseConsole",
		"body": "CloseConsole ${1:Console#}",
		"description": ""
	},
	"ZoneInit [zone_num#]|[#start_num,#end_num]": {
		"prefix": "ZoneInit",
		"body": "ZoneInit ${1:[zone_num#]|[#start_num,#end_num]}",
		"description": "intialize zones."
	},
	"SetZone num,x1,y1[,x2,y2]|[,radius]": {
		"prefix": "SetZone",
		"body": "SetZone ${1:num,x1,y1[,x2,y2]|[,radius]}",
		"description": ""
	},
	"Zone(x,y)": {
		"prefix": "Zone",
		"body": "Zone(${1:x,y})",
		"description": ""
	},
	"ZoneTest(start_num[,end_num],x,y)": {
		"prefix": "ZoneTest",
		"body": "ZoneTest(${1:start_num[,end_num],x,y})",
		"description": ""
	},
	"ZoneTable": {
		"prefix": "ZoneTable",
		"body": "ZoneTable",
		"description": "returns address of the current zone table."
	},
	"JFire(port)": {
		"prefix": "JFire",
		"body": "JFire(${1:port})",
		"description": ""
	},
	"JVert(port)": {
		"prefix": "JVert",
		"body": "JVert(${1:port})",
		"description": ""
	},
	"JHoriz(port)": {
		"prefix": "JHoriz",
		"body": "JHoriz(${1:port})",
		"description": ""
	},
	"AllFire([joybits])": {
		"prefix": "AllFire",
		"body": "AllFire(${1:[joybits]})",
		"description": ""
	},
	"ZoneTableSize": {
		"prefix": "ZoneTableSize",
		"body": "ZoneTableSize",
		"description": "returns size of the current zone table."
	},
	"NewZoneTable table#,num_zones": {
		"prefix": "NewZoneTable",
		"body": "NewZoneTable ${1:table#,num_zones}",
		"description": ""
	},
	"UseZoneTable": {
		"prefix": "UseZoneTable",
		"body": "UseZoneTable",
		"description": "- select a zone table for use."
	},
	"FreeZoneTable table#": {
		"prefix": "FreeZoneTable",
		"body": "FreeZoneTable ${1:table#}",
		"description": ""
	},
	"ZoneTableNumber": {
		"prefix": "ZoneTableNumber",
		"body": "ZoneTableNumber",
		"description": "returns the number of the current zone table."
	},
	"ZoneMode": {
		"prefix": "ZoneMode",
		"body": "ZoneMode",
		"description": "- returns -1 for 68020 mode or 0 for 68000 mode."
	},
	"SetZoneMode mode": {
		"prefix": "SetZoneMode",
		"body": "SetZoneMode ${1:mode}",
		"description": ""
	},
	"JAdaptorStatus On/Off": {
		"prefix": "JAdaptorStatus",
		"body": "JAdaptorStatus ${1:On/Off}",
		"description": "status of four player adaptor reading."
	},
	"GetZoneX1(zone)": {
		"prefix": "GetZoneX1",
		"body": "GetZoneX1(${1:zone})",
		"description": "returns the start x pos of a zone."
	},
	"GetZoneY1(zone)": {
		"prefix": "GetZoneY1",
		"body": "GetZoneY1(${1:zone})",
		"description": "returns the start y pos of a zone."
	},
	"GetZoneX2(zone)": {
		"prefix": "GetZoneX2",
		"body": "GetZoneX2(${1:zone})",
		"description": "returns the end x pos of a zone."
	},
	"GetZoneY2(zone)": {
		"prefix": "GetZoneY2",
		"body": "GetZoneY2(${1:zone})",
		"description": "returns the end pos of a zone."
	},
	"ReadJoyPad port#      --B,R,Y,G,FF,RW,PL,0": {
		"prefix": "ReadJoyPad",
		"body": "ReadJoyPad ${1:port#      --B,R,Y,G,FF,RW,PL,0}",
		"description": ""
	},
	"OpenDisk unit#[,devicename$]": {
		"prefix": "OpenDisk",
		"body": "OpenDisk ${1:unit#[,devicename$]}",
		"description": ""
	},
	"MotorOn unit#": {
		"prefix": "MotorOn",
		"body": "MotorOn ${1:unit#}",
		"description": ""
	},
	"CloseDisk unit#": {
		"prefix": "CloseDisk",
		"body": "CloseDisk ${1:unit#}",
		"description": ""
	},
	"ReadSector unit#,sector#,buffer[,numsectors]": {
		"prefix": "ReadSector",
		"body": "ReadSector ${1:unit#,sector#,buffer[,numsectors]}",
		"description": ""
	},
	"MotorOff unit#": {
		"prefix": "MotorOff",
		"body": "MotorOff ${1:unit#}",
		"description": ""
	},
	"WriteSector unit#,sector#,buffer[,numsectors]": {
		"prefix": "WriteSector",
		"body": "WriteSector ${1:unit#,sector#,buffer[,numsectors]}",
		"description": ""
	},
	"FormatTrack unit#,track#,buffer[,numtracks]": {
		"prefix": "FormatTrack",
		"body": "FormatTrack ${1:unit#,track#,buffer[,numtracks]}",
		"description": ""
	},
	"WriteBoot unit#[,bootdata]": {
		"prefix": "WriteBoot",
		"body": "WriteBoot ${1:unit#[,bootdata]}",
		"description": ""
	},
	"DiskStatus unit#": {
		"prefix": "DiskStatus",
		"body": "DiskStatus ${1:unit#}",
		"description": ""
	},
	"DiskIO unit#": {
		"prefix": "DiskIO",
		"body": "DiskIO ${1:unit#}",
		"description": ""
	},
	"BootProg unit#,memoryaddress": {
		"prefix": "BootProg",
		"body": "BootProg ${1:unit#,memoryaddress}",
		"description": ""
	},
	"DiskMotor": {
		"prefix": "DiskMotor",
		"body": "DiskMotor",
		"description": "; Returns -1 if motor is on."
	},
	"GetIconObject(filename$)": {
		"prefix": "GetIconObject",
		"body": "GetIconObject(${1:filename$})",
		"description": ""
	},
	"FindToolValue(tooltype$)": {
		"prefix": "FindToolValue",
		"body": "FindToolValue(${1:tooltype$})",
		"description": ""
	},
	"SetToolValue(tooltype$,value$[,status])": {
		"prefix": "SetToolValue",
		"body": "SetToolValue(${1:tooltype$,value$[,status]})",
		"description": ""
	},
	"PutIconObject(filename$[,icontype])": {
		"prefix": "PutIconObject",
		"body": "PutIconObject(${1:filename$[,icontype]})",
		"description": ""
	},
	"FreeIconObject": {
		"prefix": "FreeIconObject",
		"body": "FreeIconObject",
		"description": "- free the disk object of a icon."
	},
	"MatchToolValue(tooltype$,value$)": {
		"prefix": "MatchToolValue",
		"body": "MatchToolValue(${1:tooltype$,value$})",
		"description": ""
	},
	"NewToolType(tooltype$,value$[,status])": {
		"prefix": "NewToolType",
		"body": "NewToolType(${1:tooltype$,value$[,status]})",
		"description": ""
	},
	"FindToolNumber(tooltype#)": {
		"prefix": "FindToolNumber",
		"body": "FindToolNumber(${1:tooltype#})",
		"description": ""
	},
	"ClearToolTypes": {
		"prefix": "ClearToolTypes",
		"body": "ClearToolTypes",
		"description": ""
	},
	"SetIconHit width,height": {
		"prefix": "SetIconHit",
		"body": "SetIconHit ${1:width,height}",
		"description": ""
	},
	"ShapeToIcon shape[,shape]": {
		"prefix": "ShapeToIcon",
		"body": "ShapeToIcon ${1:shape[,shape]}",
		"description": ""
	},
	"SetIconType object_type": {
		"prefix": "SetIconType",
		"body": "SetIconType ${1:object_type}",
		"description": ""
	},
	"IconRender render_flags": {
		"prefix": "IconRender",
		"body": "IconRender ${1:render_flags}",
		"description": ""
	},
	"IconDefTool tool$": {
		"prefix": "IconDefTool",
		"body": "IconDefTool ${1:tool$}",
		"description": ""
	},
	"FindToolType(tooltype$[,bracket_check])": {
		"prefix": "FindToolType",
		"body": "FindToolType(${1:tooltype$[,bracket_check]})",
		"description": ""
	},
	"IconToShape shape[,shape]": {
		"prefix": "IconToShape",
		"body": "IconToShape ${1:shape[,shape]}",
		"description": ""
	},
	"StringSort list,sizeof.type[,offset]": {
		"prefix": "StringSort",
		"body": "StringSort ${1:list,sizeof.type[,offset]}",
		"description": "sort from start of list."
	},
	"ListBase(list)": {
		"prefix": "ListBase",
		"body": "ListBase(${1:list})",
		"description": ""
	},
	"StringSortItem list,sizeof.type[,offset]": {
		"prefix": "StringSortItem",
		"body": "StringSortItem ${1:list,sizeof.type[,offset]}",
		"description": "sort from current list item."
	},
	"StringSortDir direction": {
		"prefix": "StringSortDir",
		"body": "StringSortDir ${1:direction}",
		"description": ""
	},
	"ReqFileRequest([title$][,flags])": {
		"prefix": "ReqFileRequest",
		"body": "ReqFileRequest(${1:[title$][,flags]})",
		"description": ""
	},
	"ReqFileLoc": {
		"prefix": "ReqFileLoc",
		"body": "ReqFileLoc",
		"description": ""
	},
	"ReqOutput windowptr": {
		"prefix": "ReqOutput",
		"body": "ReqOutput ${1:windowptr}",
		"description": ""
	},
	"ReqFlags flags": {
		"prefix": "ReqFlags",
		"body": "ReqFlags ${1:flags}",
		"description": ""
	},
	"ReqColour(colour)": {
		"prefix": "ReqColour",
		"body": "ReqColour(${1:colour})",
		"description": ""
	},
	"PackPBM sourceaddr,destaddr,length": {
		"prefix": "PackPBM",
		"body": "PackPBM ${1:sourceaddr,destaddr,length}",
		"description": ""
	},
	"UnpackIFF(sourceaddr,bitmap#[,numlines,xy_offset])": {
		"prefix": "UnpackIFF",
		"body": "UnpackIFF(${1:sourceaddr,bitmap#[,numlines,xy_offset]})",
		"description": ""
	},
	"ILBMPalette(sourceaddr,palette#[,#offset)": {
		"prefix": "ILBMPalette",
		"body": "ILBMPalette(${1:sourceaddr,palette#[,#offset})",
		"description": ""
	},
	"ILBMGrab sourceaddr,bitmap#,palette#": {
		"prefix": "ILBMGrab",
		"body": "ILBMGrab ${1:sourceaddr,bitmap#,palette#}",
		"description": ""
	},
	"LoadIFF(filename$,bitmap[,palette])": {
		"prefix": "LoadIFF",
		"body": "LoadIFF(${1:filename$,bitmap[,palette]})",
		"description": ""
	},
	"ChunkHeader(a$)": {
		"prefix": "ChunkHeader",
		"body": "ChunkHeader(${1:a$})",
		"description": ""
	},
	"UnPackPBM sourceaddr,destaddr,length": {
		"prefix": "UnPackPBM",
		"body": "UnPackPBM ${1:sourceaddr,destaddr,length}",
		"description": ""
	},
	"IFFDepth address -": {
		"prefix": "IFFDepth",
		"body": "IFFDepth ${1:address -}",
		"description": "address of your ILBM IFF file."
	},
	"IFFWidth address -": {
		"prefix": "IFFWidth",
		"body": "IFFWidth ${1:address -}",
		"description": "address of your ILBM IFF file."
	},
	"IFFHeight address -": {
		"prefix": "IFFHeight",
		"body": "IFFHeight ${1:address -}",
		"description": "address of your ILBM IFF file."
	},
	"IFFViewmode address -": {
		"prefix": "IFFViewmode",
		"body": "IFFViewmode ${1:address -}",
		"description": "address of your ILBM IFF file."
	},
	"InitList list#,var": {
		"prefix": "InitList",
		"body": "InitList ${1:list#,var}",
		"description": ""
	},
	"AddListItem list#": {
		"prefix": "AddListItem",
		"body": "AddListItem ${1:list#}",
		"description": ""
	},
	"SetListItem list#,var": {
		"prefix": "SetListItem",
		"body": "SetListItem ${1:list#,var}",
		"description": ""
	},
	"NextListItem list#": {
		"prefix": "NextListItem",
		"body": "NextListItem ${1:list#}",
		"description": ""
	},
	"GetListItem list#,var": {
		"prefix": "GetListItem",
		"body": "GetListItem ${1:list#,var}",
		"description": ""
	},
	"PrevListItem list#": {
		"prefix": "PrevListItem",
		"body": "PrevListItem ${1:list#}",
		"description": ""
	},
	"FirstListItem list#": {
		"prefix": "FirstListItem",
		"body": "FirstListItem ${1:list#}",
		"description": ""
	},
	"LastListItem list#": {
		"prefix": "LastListItem",
		"body": "LastListItem ${1:list#}",
		"description": ""
	},
	"AddFirstListItem list#": {
		"prefix": "AddFirstListItem",
		"body": "AddFirstListItem ${1:list#}",
		"description": ""
	},
	"AddLastListItem list#": {
		"prefix": "AddLastListItem",
		"body": "AddLastListItem ${1:list#}",
		"description": ""
	},
	"DelListItem list#": {
		"prefix": "DelListItem",
		"body": "DelListItem ${1:list#}",
		"description": ""
	},
	"AddrListItem list#": {
		"prefix": "AddrListItem",
		"body": "AddrListItem ${1:list#}",
		"description": ""
	},
	"PalRed(colour#)": {
		"prefix": "PalRed",
		"body": "PalRed(${1:colour#})",
		"description": ""
	},
	"PalGreen(colour#)": {
		"prefix": "PalGreen",
		"body": "PalGreen(${1:colour#})",
		"description": ""
	},
	"PalBlue(colour#)": {
		"prefix": "PalBlue",
		"body": "PalBlue(${1:colour#})",
		"description": ""
	},
	"PaletteInfo palette#": {
		"prefix": "PaletteInfo",
		"body": "PaletteInfo ${1:palette#}",
		"description": ""
	},
	"AGAPalRed(colour#)": {
		"prefix": "AGAPalRed",
		"body": "AGAPalRed(${1:colour#})",
		"description": ""
	},
	"AGAPalGreen(colour#)": {
		"prefix": "AGAPalGreen",
		"body": "AGAPalGreen(${1:colour#})",
		"description": ""
	},
	"AGAPalBlue(colour#)": {
		"prefix": "AGAPalBlue",
		"body": "AGAPalBlue(${1:colour#})",
		"description": ""
	},
	"PalAdjust palette#,ratio.q[,start_col,end_col]": {
		"prefix": "PalAdjust",
		"body": "PalAdjust ${1:palette#,ratio.q[,start_col,end_col]}",
		"description": ""
	},
	"FillPalette palette#,r,g,b[,start_col,end_col]": {
		"prefix": "FillPalette",
		"body": "FillPalette ${1:palette#,r,g,b[,start_col,end_col]}",
		"description": "fill palette with r,g,b values."
	},
	"AGAFillPalette palette#,r,g,b[,start_col,end_col]": {
		"prefix": "AGAFillPalette",
		"body": "AGAFillPalette ${1:palette#,r,g,b[,start_col,end_col]}",
		"description": "fill palette with AGA r,g,b values."
	},
	"CopyColour sourcepal#,destpal#,colsource#,coldest#": {
		"prefix": "CopyColour",
		"body": "CopyColour ${1:sourcepal#,destpal#,colsource#,coldest#}",
		"description": ""
	},
	"CPUCls bitmap#": {
		"prefix": "CPUCls",
		"body": "CPUCls ${1:bitmap#}",
		"description": ""
	},
	"SaveCMAP palette#,filename$": {
		"prefix": "SaveCMAP",
		"body": "SaveCMAP ${1:palette#,filename$}",
		"description": ""
	},
	"MergeBitplanes srcbitmap,srcbitmap,destbitmap,numplanes": {
		"prefix": "MergeBitplanes",
		"body": "MergeBitplanes ${1:srcbitmap,srcbitmap,destbitmap,numplanes}",
		"description": ""
	},
	"ClearBitmap bitmap#,delay[,height,offset]": {
		"prefix": "ClearBitmap",
		"body": "ClearBitmap ${1:bitmap#,delay[,height,offset]}",
		"description": ""
	},
	"FadeInBitmap bitmapsource#,bitmapdest#,delay[,height,offset1,offset2]": {
		"prefix": "FadeInBitmap",
		"body": "FadeInBitmap ${1:bitmapsource#,bitmapdest#,delay[,height,offset1,offset2]}",
		"description": ""
	},
	"ZoomX4 source#,dest#,sourceadd,destadd,width,height[,xy_select]": {
		"prefix": "ZoomX4",
		"body": "ZoomX4 ${1:source#,dest#,sourceadd,destadd,width,height[,xy_select]}",
		"description": ""
	},
	"Derez source#,dest#,sourceadd,destadd,derez_value,height": {
		"prefix": "Derez",
		"body": "Derez ${1:source#,dest#,sourceadd,destadd,derez_value,height}",
		"description": ""
	},
	"ZoomXY xzoom,yzoom,height": {
		"prefix": "ZoomXY",
		"body": "ZoomXY ${1:xzoom,yzoom,height}",
		"description": ""
	},
	"InitZoomXY source#,dest#,sourceadd,destadd": {
		"prefix": "InitZoomXY",
		"body": "InitZoomXY ${1:source#,dest#,sourceadd,destadd}",
		"description": ""
	},
	"ZoomX2 source#,dest#,sourceadd,destadd,width,height": {
		"prefix": "ZoomX2",
		"body": "ZoomX2 ${1:source#,dest#,sourceadd,destadd,width,height}",
		"description": ""
	},
	"GetZoomTables": {
		"prefix": "GetZoomTables",
		"body": "GetZoomTables",
		"description": "return pointer to array of tables."
	},
	"ZoomX8 source#,dest#,sourceadd,destadd,width,height": {
		"prefix": "ZoomX8",
		"body": "ZoomX8 ${1:source#,dest#,sourceadd,destadd,width,height}",
		"description": ""
	},
	"ADDValue(bitmap#,x,y)": {
		"prefix": "ADDValue",
		"body": "ADDValue(${1:bitmap#,x,y})",
		"description": ""
	},
	"ReduceX2 source#,dest#,sourceadd,destadd,width,height": {
		"prefix": "ReduceX2",
		"body": "ReduceX2 ${1:source#,dest#,sourceadd,destadd,width,height}",
		"description": ""
	},
	"ZoomyZoom bitmap#": {
		"prefix": "ZoomyZoom",
		"body": "ZoomyZoom ${1:bitmap#}",
		"description": ""
	},
	"FNSPrint fontnum,x,y,a$/string_address[,prefs,colour]": {
		"prefix": "FNSPrint",
		"body": "FNSPrint ${1:fontnum,x,y,a$/string_address[,prefs,colour]}",
		"description": ""
	},
	"InstallFNS(fontnum,address)": {
		"prefix": "InstallFNS",
		"body": "InstallFNS(${1:fontnum,address})",
		"description": ""
	},
	"FNSOutput bitmap[,clip_update (On|Off)]": {
		"prefix": "FNSOutput",
		"body": "FNSOutput ${1:bitmap[,clip_update (On|Off)]}",
		"description": ""
	},
	"FNSInk colour": {
		"prefix": "FNSInk",
		"body": "FNSInk ${1:colour}",
		"description": ""
	},
	"FNSPrefs prefs[,colour]": {
		"prefix": "FNSPrefs",
		"body": "FNSPrefs ${1:prefs[,colour]}",
		"description": ""
	},
	"FNSHeight(fontnum)": {
		"prefix": "FNSHeight",
		"body": "FNSHeight(${1:fontnum})",
		"description": ""
	},
	"FNSClip xmin,ymin,xmax,ymax": {
		"prefix": "FNSClip",
		"body": "FNSClip ${1:xmin,ymin,xmax,ymax}",
		"description": ""
	},
	"FNSClipOutput": {
		"prefix": "FNSClipOutput",
		"body": "FNSClipOutput",
		"description": "set clipping zone to output bitmap size."
	},
	"RemoveFNS fontnum": {
		"prefix": "RemoveFNS",
		"body": "RemoveFNS ${1:fontnum}",
		"description": ""
	},
	"FNSUnderline(fontnum)": {
		"prefix": "FNSUnderline",
		"body": "FNSUnderline(${1:fontnum})",
		"description": ""
	},
	"FNSLength(fontnum,a$[,prefs])": {
		"prefix": "FNSLength",
		"body": "FNSLength(${1:fontnum,a$[,prefs]})",
		"description": ""
	},
	"FNSVersion": {
		"prefix": "FNSVersion",
		"body": "FNSVersion",
		"description": "returns quick, lastest version=1.1."
	},
	"FNSOrigin [x,y]": {
		"prefix": "FNSOrigin",
		"body": "FNSOrigin ${1:[x,y]}",
		"description": ""
	},
	"FNSWidth(fontnum)": {
		"prefix": "FNSWidth",
		"body": "FNSWidth(${1:fontnum})",
		"description": ""
	},
	"FNSLoad(fontname$,fontslot)": {
		"prefix": "FNSLoad",
		"body": "FNSLoad(${1:fontname$,fontslot})",
		"description": ""
	},
	"FNSSlot": {
		"prefix": "FNSSlot",
		"body": "FNSSlot",
		"description": ""
	},
	"FNSUnload fontslot": {
		"prefix": "FNSUnload",
		"body": "FNSUnload ${1:fontslot}",
		"description": ""
	},
	"FNSSetTab tab_size": {
		"prefix": "FNSSetTab",
		"body": "FNSSetTab ${1:tab_size}",
		"description": "set tab size in pixels."
	},
	"FNSShadowPrint fontnum,x,y,a$/string_address,[prefs,colour[,shadow]]": {
		"prefix": "FNSShadowPrint",
		"body": "FNSShadowPrint ${1:fontnum,x,y,a$/string_address,[prefs,colour[,shadow]]}",
		"description": ""
	},
	"Encrypt memadr,length[,wheel1,wheel2,wheel3]": {
		"prefix": "Encrypt",
		"body": "Encrypt ${1:memadr,length[,wheel1,wheel2,wheel3]}",
		"description": ""
	},
	"Decrypt memadr,length,wheel1,wheel2,wheel3[,mode]": {
		"prefix": "Decrypt",
		"body": "Decrypt ${1:memadr,length,wheel1,wheel2,wheel3[,mode]}",
		"description": ""
	},
	"GetWheel wheel#": {
		"prefix": "GetWheel",
		"body": "GetWheel ${1:wheel#}",
		"description": ""
	},
	"AddVarTrace variable,string$,output": {
		"prefix": "AddVarTrace",
		"body": "AddVarTrace ${1:variable,string$,output}",
		"description": "add a variable trace."
	},
	"DelVarTrace variable$": {
		"prefix": "DelVarTrace",
		"body": "DelVarTrace ${1:variable$}",
		"description": "remove a trace on a named variable."
	},
	"VarTraceWindow": {
		"prefix": "VarTraceWindow",
		"body": "VarTraceWindow",
		"description": "open the variable trace window on the debugger screen."
	},
	"DisAsmWindow [address]": {
		"prefix": "DisAsmWindow",
		"body": "DisAsmWindow ${1:[address]}",
		"description": "open the disassembly window on the debugger screen."
	},
	"CopperTrace address,[,offset]": {
		"prefix": "CopperTrace",
		"body": "CopperTrace ${1:address,[,offset]}",
		"description": "offset<>0 for CopList objects."
	},
	"ProcControl [On/Off]": {
		"prefix": "ProcControl",
		"body": "ProcControl ${1:[On/Off]}",
		"description": ""
	},
	"MemoryWindow num#,address": {
		"prefix": "MemoryWindow",
		"body": "MemoryWindow ${1:num#,address}",
		"description": "open a memory window on the debugger screen."
	},
	"DoColSplit cols_adr,numlines,colour_register": {
		"prefix": "DoColSplit",
		"body": "DoColSplit ${1:cols_adr,numlines,colour_register}",
		"description": ""
	},
	"RedoColSplit cols_adr,numlines,ccoffset": {
		"prefix": "RedoColSplit",
		"body": "RedoColSplit ${1:cols_adr,numlines,ccoffset}",
		"description": ""
	},
	"CopperReset coplist#,startline[,ccoffset]": {
		"prefix": "CopperReset",
		"body": "CopperReset ${1:coplist#,startline[,ccoffset]}",
		"description": ""
	},
	"CopperEnd": {
		"prefix": "CopperEnd",
		"body": "CopperEnd",
		"description": ""
	},
	"CopperInfoBlock": {
		"prefix": "CopperInfoBlock",
		"body": "CopperInfoBlock",
		"description": ""
	},
	"CopperCommand copins1,copins2": {
		"prefix": "CopperCommand",
		"body": "CopperCommand ${1:copins1,copins2}",
		"description": ""
	},
	"CopperMove register,value": {
		"prefix": "CopperMove",
		"body": "CopperMove ${1:register,value}",
		"description": ""
	},
	"CopperWait x,y": {
		"prefix": "CopperWait",
		"body": "CopperWait ${1:x,y}",
		"description": ""
	},
	"CopperSkip x,y": {
		"prefix": "CopperSkip",
		"body": "CopperSkip ${1:x,y}",
		"description": ""
	},
	"GetCCOffset": {
		"prefix": "GetCCOffset",
		"body": "GetCCOffset",
		"description": "get current custom copper offset."
	},
	"CopperAGACol col#,r,g,b": {
		"prefix": "CopperAGACol",
		"body": "CopperAGACol ${1:col#,r,g,b}",
		"description": ""
	},
	"CopperResetAdr coplist#,startline": {
		"prefix": "CopperResetAdr",
		"body": "CopperResetAdr ${1:coplist#,startline}",
		"description": ""
	},
	"ColSplitBplcon3 bplcon3": {
		"prefix": "ColSplitBplcon3",
		"body": "ColSplitBplcon3 ${1:bplcon3}",
		"description": "low byte of bplcon 3."
	},
	"OpenCD [devicename,unit]": {
		"prefix": "OpenCD",
		"body": "OpenCD ${1:[devicename,unit]}",
		"description": "open a CD compatible device."
	},
	"CloseCD": {
		"prefix": "CloseCD",
		"body": "CloseCD",
		"description": ""
	},
	"CDDoor on/off": {
		"prefix": "CDDoor",
		"body": "CDDoor ${1:on/off}",
		"description": ""
	},
	"CDPlayTrack track#,numtracks": {
		"prefix": "CDPlayTrack",
		"body": "CDPlayTrack ${1:track#,numtracks}",
		"description": ""
	},
	"CDReadTOC": {
		"prefix": "CDReadTOC",
		"body": "CDReadTOC",
		"description": ""
	},
	"CDStatus": {
		"prefix": "CDStatus",
		"body": "CDStatus",
		"description": ""
	},
	"CDStop": {
		"prefix": "CDStop",
		"body": "CDStop",
		"description": ""
	},
	"CDVolume volume,lengthoffade": {
		"prefix": "CDVolume",
		"body": "CDVolume ${1:volume,lengthoffade}",
		"description": ""
	},
	"CDNumTracks": {
		"prefix": "CDNumTracks",
		"body": "CDNumTracks",
		"description": ""
	},
	"CDFirstTrack": {
		"prefix": "CDFirstTrack",
		"body": "CDFirstTrack",
		"description": ""
	},
	"CDLastTrack": {
		"prefix": "CDLastTrack",
		"body": "CDLastTrack",
		"description": ""
	},
	"CDTrackLength track#": {
		"prefix": "CDTrackLength",
		"body": "CDTrackLength ${1:track#}",
		"description": ""
	},
	"CDUpdateInfo": {
		"prefix": "CDUpdateInfo",
		"body": "CDUpdateInfo",
		"description": "update track playing/time information."
	},
	"CDFlush": {
		"prefix": "CDFlush",
		"body": "CDFlush",
		"description": ""
	},
	"CDPause on/off": {
		"prefix": "CDPause",
		"body": "CDPause ${1:on/off}",
		"description": ""
	},
	"CDRewind": {
		"prefix": "CDRewind",
		"body": "CDRewind",
		"description": ""
	},
	"CDFastForward": {
		"prefix": "CDFastForward",
		"body": "CDFastForward",
		"description": ""
	},
	"CDNormalSpeed": {
		"prefix": "CDNormalSpeed",
		"body": "CDNormalSpeed",
		"description": ""
	},
	"CDSpeed speed": {
		"prefix": "CDSpeed",
		"body": "CDSpeed ${1:speed}",
		"description": ""
	},
	"CDTrackMins [offset]": {
		"prefix": "CDTrackMins",
		"body": "CDTrackMins ${1:[offset]}",
		"description": "mins for current track."
	},
	"CDTrackSecs [offset]": {
		"prefix": "CDTrackSecs",
		"body": "CDTrackSecs ${1:[offset]}",
		"description": "secs for current track."
	},
	"CDTrackPlaying": {
		"prefix": "CDTrackPlaying",
		"body": "CDTrackPlaying",
		"description": "current track being played."
	},
	"MakeCommodity(name$,title$,description$": {
		"prefix": "MakeCommodity",
		"body": "MakeCommodity(${1:name$,title$,description$})",
		"description": ""
	},
	"SetHotKey(hotkeynum,hotkey$)": {
		"prefix": "SetHotKey",
		"body": "SetHotKey(${1:hotkeynum,hotkey$})",
		"description": ""
	},
	"HotKeyHit": {
		"prefix": "HotKeyHit",
		"body": "HotKeyHit",
		"description": ""
	},
	"WaitCommodity": {
		"prefix": "WaitCommodity",
		"body": "WaitCommodity",
		"description": ""
	},
	"CommodityEvent": {
		"prefix": "CommodityEvent",
		"body": "CommodityEvent",
		"description": ""
	},
	"ExchangeMessage": {
		"prefix": "ExchangeMessage",
		"body": "ExchangeMessage",
		"description": ""
	},
	"ExchangeDisable": {
		"prefix": "ExchangeDisable",
		"body": "ExchangeDisable",
		"description": ""
	},
	"ExchangeEnable": {
		"prefix": "ExchangeEnable",
		"body": "ExchangeEnable",
		"description": ""
	},
	"ExchangeAppear": {
		"prefix": "ExchangeAppear",
		"body": "ExchangeAppear",
		"description": ""
	},
	"ExchangeDisAppear": {
		"prefix": "ExchangeDisAppear",
		"body": "ExchangeDisAppear",
		"description": ""
	},
	"ExchangeKill": {
		"prefix": "ExchangeKill",
		"body": "ExchangeKill",
		"description": ""
	},
	"ExchangeListChange": {
		"prefix": "ExchangeListChange",
		"body": "ExchangeListChange",
		"description": ""
	},
	"ExchangeUnique": {
		"prefix": "ExchangeUnique",
		"body": "ExchangeUnique",
		"description": ""
	},
	"CxDisable": {
		"prefix": "CxDisable",
		"body": "CxDisable",
		"description": ""
	},
	"CxEnable": {
		"prefix": "CxEnable",
		"body": "CxEnable",
		"description": ""
	},
	"CxAppear": {
		"prefix": "CxAppear",
		"body": "CxAppear",
		"description": ""
	},
	"CxDisAppear": {
		"prefix": "CxDisAppear",
		"body": "CxDisAppear",
		"description": ""
	},
	"CxKill": {
		"prefix": "CxKill",
		"body": "CxKill",
		"description": ""
	},
	"CxListChange": {
		"prefix": "CxListChange",
		"body": "CxListChange",
		"description": ""
	},
	"CxUnique": {
		"prefix": "CxUnique",
		"body": "CxUnique",
		"description": ""
	},
	"SetCxStatus on|off": {
		"prefix": "SetCxStatus",
		"body": "SetCxStatus ${1:on|off}",
		"description": ""
	},
	"CommodityMsgPort": {
		"prefix": "CommodityMsgPort",
		"body": "CommodityMsgPort",
		"description": "-- returns the message port address."
	},
	"AddAppWindow(windownumber)": {
		"prefix": "AddAppWindow",
		"body": "AddAppWindow(${1:windownumber})",
		"description": ""
	},
	"DelAppWindow(windownumber)": {
		"prefix": "DelAppWindow",
		"body": "DelAppWindow(${1:windownumber})",
		"description": ""
	},
	"AddAppMenu(id,text$)": {
		"prefix": "AddAppMenu",
		"body": "AddAppMenu(${1:id,text$})",
		"description": ""
	},
	"DelAppMenu(id)": {
		"prefix": "DelAppMenu",
		"body": "DelAppMenu(${1:id})",
		"description": ""
	},
	"AddAppIcon(id,text$,filename$[,x,y])": {
		"prefix": "AddAppIcon",
		"body": "AddAppIcon(${1:id,text$,filename$[,x,y]})",
		"description": ""
	},
	"DelAppIcon(id)": {
		"prefix": "DelAppIcon",
		"body": "DelAppIcon(${1:id})",
		"description": ""
	},
	"AppEvent": {
		"prefix": "AppEvent",
		"body": "AppEvent",
		"description": ""
	},
	"AppEventType": {
		"prefix": "AppEventType",
		"body": "AppEventType",
		"description": ""
	},
	"AppEventID": {
		"prefix": "AppEventID",
		"body": "AppEventID",
		"description": ""
	},
	"NextAppFile": {
		"prefix": "NextAppFile",
		"body": "NextAppFile",
		"description": ""
	},
	"AppFile(num)": {
		"prefix": "AppFile",
		"body": "AppFile(${1:num})",
		"description": ""
	},
	"AppNumFiles": {
		"prefix": "AppNumFiles",
		"body": "AppNumFiles",
		"description": ""
	},
	"AppLock": {
		"prefix": "AppLock",
		"body": "AppLock",
		"description": ""
	},
	"AppMessage": {
		"prefix": "AppMessage",
		"body": "AppMessage",
		"description": ""
	},
	"AppMsgPort": {
		"prefix": "AppMsgPort",
		"body": "AppMsgPort",
		"description": ""
	},
	"AppEventIDCMP": {
		"prefix": "AppEventIDCMP",
		"body": "AppEventIDCMP",
		"description": ""
	},
	"RIAnimInit(address,bitmap#,palette# [,xy_offset]|[,x,y])": {
		"prefix": "RIAnimInit",
		"body": "RIAnimInit(${1:address,bitmap#,palette# [,xy_offset]|[,x,y]})",
		"description": ""
	},
	"RINextAnimFrame(bitmap#)": {
		"prefix": "RINextAnimFrame",
		"body": "RINextAnimFrame(${1:bitmap#})",
		"description": ""
	},
	"AnimLoop On|Off": {
		"prefix": "AnimLoop",
		"body": "AnimLoop ${1:On|Off}",
		"description": ""
	},
	"RIAnimFrameCount": {
		"prefix": "RIAnimFrameCount",
		"body": "RIAnimFrameCount",
		"description": ""
	},
	"RIAnimDepth address -": {
		"prefix": "RIAnimDepth",
		"body": "RIAnimDepth ${1:address -}",
		"description": "address of your animation file."
	},
	"RIAnimWidth address -": {
		"prefix": "RIAnimWidth",
		"body": "RIAnimWidth ${1:address -}",
		"description": "address of your animation file."
	},
	"RIAnimHeight address -": {
		"prefix": "RIAnimHeight",
		"body": "RIAnimHeight ${1:address -}",
		"description": "address of your animation file."
	},
	"CachesOn bitmask": {
		"prefix": "CachesOn",
		"body": "CachesOn ${1:bitmask}",
		"description": ""
	},
	"Reboot": {
		"prefix": "Reboot",
		"body": "Reboot",
		"description": "-- performs a cold reboot."
	},
	"Lisa": {
		"prefix": "Lisa",
		"body": "Lisa",
		"description": "-- returns Lisa chip version."
	},
	"MakeDir [success=] MakeDir(Dirname$)": {
		"prefix": "MakeDir",
		"body": "MakeDir ${1:[success=] MakeDir(Dirname$)}",
		"description": ""
	},
	"Rename(oldfilename$,newfilename$)": {
		"prefix": "Rename",
		"body": "Rename(${1:oldfilename$,newfilename$})",
		"description": ""
	},
	"MemFree": {
		"prefix": "MemFree",
		"body": "MemFree",
		"description": ""
	},
	"GTTagValue([tagvalue])": {
		"prefix": "GTTagValue",
		"body": "GTTagValue(${1:[tagvalue]})",
		"description": ""
	},
	"Timer": {
		"prefix": "Timer",
		"body": "Timer",
		"description": ""
	},
	"Min(a,b)": {
		"prefix": "Min",
		"body": "Min(${1:a,b})",
		"description": ""
	},
	"CopyByte sourceaddr,destaddr,bytes": {
		"prefix": "CopyByte",
		"body": "CopyByte ${1:sourceaddr,destaddr,bytes}",
		"description": ""
	},
	"CopyWord sourceaddr,destaddr,words": {
		"prefix": "CopyWord",
		"body": "CopyWord ${1:sourceaddr,destaddr,words}",
		"description": ""
	},
	"CopyLong sourceaddr,destaddr,longs": {
		"prefix": "CopyLong",
		"body": "CopyLong ${1:sourceaddr,destaddr,longs}",
		"description": ""
	},
	"Max(a,b)": {
		"prefix": "Max",
		"body": "Max(${1:a,b})",
		"description": ""
	},
	"FileSize(filename$)": {
		"prefix": "FileSize",
		"body": "FileSize(${1:filename$})",
		"description": ""
	},
	"BLoad(filename$,[address,[,length,[offset,[memtype]]]])": {
		"prefix": "BLoad",
		"body": "BLoad(${1:filename$,[address,[,length,[offset,[memtype]]]]})",
		"description": ""
	},
	"BSave(filename$,address/bank[,length])": {
		"prefix": "BSave",
		"body": "BSave(${1:filename$,address/bank[,length]})",
		"description": ""
	},
	"Start(bank)": {
		"prefix": "Start",
		"body": "Start(${1:bank})",
		"description": ""
	},
	"Length(bank)": {
		"prefix": "Length",
		"body": "Length(${1:bank})",
		"description": ""
	},
	"Erase bank": {
		"prefix": "Erase",
		"body": "Erase ${1:bank}",
		"description": ""
	},
	"EraseAll": {
		"prefix": "EraseAll",
		"body": "EraseAll",
		"description": ""
	},
	"Reserve(length)|(bank,length[,requirements])": {
		"prefix": "Reserve",
		"body": "Reserve(${1:length)|(bank,length[,requirements]})",
		"description": ""
	},
	"NextBank [startbank]": {
		"prefix": "NextBank",
		"body": "NextBank ${1:[startbank]}",
		"description": ""
	},
	"CachesOff bitmask": {
		"prefix": "CachesOff",
		"body": "CachesOff ${1:bitmask}",
		"description": ""
	},
	"FillMem address,length[,value]": {
		"prefix": "FillMem",
		"body": "FillMem ${1:address,length[,value]}",
		"description": ""
	},
	"KeyCode": {
		"prefix": "KeyCode",
		"body": "KeyCode",
		"description": ""
	},
	"BlitterDone": {
		"prefix": "BlitterDone",
		"body": "BlitterDone",
		"description": ""
	},
	"WaitBlitter": {
		"prefix": "WaitBlitter",
		"body": "WaitBlitter",
		"description": ""
	},
	"FindVolume(volumename)": {
		"prefix": "FindVolume",
		"body": "FindVolume(${1:volumename})",
		"description": ""
	},
	"SwapBank(sourcebank,destbank)": {
		"prefix": "SwapBank",
		"body": "SwapBank(${1:sourcebank,destbank})",
		"description": ""
	},
	"DeviceName$ volumename$": {
		"prefix": "DeviceName$",
		"body": "DeviceName$ ${1:volumename$}",
		"description": ""
	},
	"ChangeDir dir$": {
		"prefix": "ChangeDir",
		"body": "ChangeDir ${1:dir$}",
		"description": ""
	},
	"BankLimit [numbanks]": {
		"prefix": "BankLimit",
		"body": "BankLimit ${1:[numbanks]}",
		"description": ""
	},
	"SaveExec filename$,list()": {
		"prefix": "SaveExec",
		"body": "SaveExec ${1:filename$,list()}",
		"description": ""
	},
	"MTInit &module_addr, &instr_addr, startpos": {
		"prefix": "MTInit",
		"body": "MTInit ${1:&module_addr, &instr_addr, startpos}",
		"description": "Inserts INCBIN module into player, set instr_addr to 0 for normal modules."
	},
	"MTInstall PAL=True/NTSC=False": {
		"prefix": "MTInstall",
		"body": "MTInstall ${1:PAL=True/NTSC=False}",
		"description": "Installs the CIA MOD player in program."
	},
	"MTPlay On/Off": {
		"prefix": "MTPlay",
		"body": "MTPlay ${1:On/Off}",
		"description": "Start/stop module playback."
	},
	"MTRemove": {
		"prefix": "MTRemove",
		"body": "MTRemove",
		"description": "Remove the CIA MOD player from the system."
	},
	"MTEnd": {
		"prefix": "MTEnd",
		"body": "MTEnd",
		"description": "Stop playing current module."
	},
	"MTSoundFX &sample_addr.l, length.w, period.w, volume.w": {
		"prefix": "MTSoundFX",
		"body": "MTSoundFX ${1:&sample_addr.l, length.w, period.w, volume.w}",
		"description": "Volume range: 0..64."
	},
	"MTMasterVolume volume": {
		"prefix": "MTMasterVolume",
		"body": "MTMasterVolume ${1:volume}",
		"description": "Master volume for all music channels. Volume range: 0..64."
	},
	"MTMusicMask bitmask.b": {
		"prefix": "MTMusicMask",
		"body": "MTMusicMask ${1:bitmask.b}",
		"description": "Set bits 0-3 to reserve channels for music only."
	},
	"MTMusicChannels 0..4": {
		"prefix": "MTMusicChannels",
		"body": "MTMusicChannels ${1:0..4}",
		"description": "Number of channels dedicated to music."
	},
	"MTE8Trigger": {
		"prefix": "MTE8Trigger",
		"body": "MTE8Trigger",
		"description": "Value of the last E8 command in case you want to trigger game events from a module."
	},
	"RTEZRequest(Title$,BodyText$,GadgetText$ [,ReqPosition [,DefaultResponse,Flags]])": {
		"prefix": "RTEZRequest",
		"body": "RTEZRequest(${1:Title$,BodyText$,GadgetText$ [,ReqPosition [,DefaultResponse,Flags]]})",
		"description": ""
	},
	"RTEZLoadFile(Title$,Filename$)": {
		"prefix": "RTEZLoadFile",
		"body": "RTEZLoadFile(${1:Title$,Filename$})",
		"description": ""
	},
	"RTEZFontRequest(Title$)": {
		"prefix": "RTEZFontRequest",
		"body": "RTEZFontRequest(${1:Title$})",
		"description": ""
	},
	"RTEZScreenModeRequest(Title$ [,DisplayFlags])": {
		"prefix": "RTEZScreenModeRequest",
		"body": "RTEZScreenModeRequest(${1:Title$ [,DisplayFlags]})",
		"description": ""
	},
	"RTEZPaletteRequest(Title$,FirstColour)": {
		"prefix": "RTEZPaletteRequest",
		"body": "RTEZPaletteRequest(${1:Title$,FirstColour})",
		"description": ""
	},
	"RTEZGetLong(Title$,BodyText$ [,DefaultValue])": {
		"prefix": "RTEZGetLong",
		"body": "RTEZGetLong(${1:Title$,BodyText$ [,DefaultValue]})",
		"description": ""
	},
	"RTEZGetLongRange(Title$,BodyText$,Min,Max [,DefaultValue])": {
		"prefix": "RTEZGetLongRange",
		"body": "RTEZGetLongRange(${1:Title$,BodyText$,Min,Max [,DefaultValue]})",
		"description": ""
	},
	"RTEZGetString(Title$,BodyText$,MaxChars [,DefaultString])": {
		"prefix": "RTEZGetString",
		"body": "RTEZGetString(${1:Title$,BodyText$,MaxChars [,DefaultString]})",
		"description": ""
	},
	"RTEZSaveFile(Title$,Filename$)": {
		"prefix": "RTEZSaveFile",
		"body": "RTEZSaveFile(${1:Title$,Filename$})",
		"description": ""
	},
	"RTEZSetDefaultDirectory Requester#,Directory$": {
		"prefix": "RTEZSetDefaultDirectory",
		"body": "RTEZSetDefaultDirectory ${1:Requester#,Directory$}",
		"description": ""
	},
	"RTEZPathRequest(Title$)": {
		"prefix": "RTEZPathRequest",
		"body": "RTEZPathRequest(${1:Title$})",
		"description": ""
	},
	"RTLockWindow(Window#)": {
		"prefix": "RTLockWindow",
		"body": "RTLockWindow(${1:Window#})",
		"description": ""
	},
	"RTUnlockWindow Window#,Lock": {
		"prefix": "RTUnlockWindow",
		"body": "RTUnlockWindow ${1:Window#,Lock}",
		"description": ""
	},
	"RTEZSetPattern Requester#,Pattern$": {
		"prefix": "RTEZSetPattern",
		"body": "RTEZSetPattern ${1:Requester#,Pattern$}",
		"description": ""
	},
	"RTEZFreePattern Requester#": {
		"prefix": "RTEZFreePattern",
		"body": "RTEZFreePattern ${1:Requester#}",
		"description": ""
	},
	"RTEZFlagsRequest(Title$,BodyText$,GadgetText$,IDCMPFlags [,ReqPosition])": {
		"prefix": "RTEZFlagsRequest",
		"body": "RTEZFlagsRequest(${1:Title$,BodyText$,GadgetText$,IDCMPFlags [,ReqPosition]})",
		"description": ""
	},
	"RTRequest(BodyText$,GadgetText$,TagList)": {
		"prefix": "RTRequest",
		"body": "RTRequest(${1:BodyText$,GadgetText$,TagList})",
		"description": ""
	},
	"RTFileRequest(Title$,FileName$,TagList)": {
		"prefix": "RTFileRequest",
		"body": "RTFileRequest(${1:Title$,FileName$,TagList})",
		"description": ""
	},
	"RTEZMultiLoadFile(Title$)": {
		"prefix": "RTEZMultiLoadFile",
		"body": "RTEZMultiLoadFile(${1:Title$})",
		"description": ""
	},
	"RTNextPathEntry": {
		"prefix": "RTNextPathEntry",
		"body": "RTNextPathEntry",
		"description": ""
	},
	"RTASyncRequest(Title$,BodyText$,GadgetText$)": {
		"prefix": "RTASyncRequest",
		"body": "RTASyncRequest(${1:Title$,BodyText$,GadgetText$})",
		"description": ""
	},
	"RTCheckASyncRequest": {
		"prefix": "RTCheckASyncRequest",
		"body": "RTCheckASyncRequest",
		"description": ""
	},
	"RTEndASyncRequest": {
		"prefix": "RTEndASyncRequest",
		"body": "RTEndASyncRequest",
		"description": ""
	},
	"RTVersion": {
		"prefix": "RTVersion",
		"body": "RTVersion",
		"description": ""
	},
	"RTRevision": {
		"prefix": "RTRevision",
		"body": "RTRevision",
		"description": ""
	},
	"IsReqToolsActive": {
		"prefix": "IsReqToolsActive",
		"body": "IsReqToolsActive",
		"description": ""
	},
	"RTASyncPaletteRequest(Title$,FirstColour)": {
		"prefix": "RTASyncPaletteRequest",
		"body": "RTASyncPaletteRequest(${1:Title$,FirstColour})",
		"description": ""
	},
	"RTCheckASyncPaletteRequest": {
		"prefix": "RTCheckASyncPaletteRequest",
		"body": "RTCheckASyncPaletteRequest",
		"description": ""
	},
	"RTEndASyncPaletteRequest": {
		"prefix": "RTEndASyncPaletteRequest",
		"body": "RTEndASyncPaletteRequest",
		"description": ""
	},
	"PICreateRequest(Title$,Min,Max [,NoGagdet])": {
		"prefix": "PICreateRequest",
		"body": "PICreateRequest(${1:Title$,Min,Max [,NoGagdet]})",
		"description": ""
	},
	"PIEndRequest": {
		"prefix": "PIEndRequest",
		"body": "PIEndRequest",
		"description": ""
	},
	"PIUpdateRequest(Value)": {
		"prefix": "PIUpdateRequest",
		"body": "PIUpdateRequest(${1:Value})",
		"description": ""
	},
	"ColourRequest Colour#": {
		"prefix": "ColourRequest",
		"body": "ColourRequest ${1:Colour#}",
		"description": ""
	},
	"TextRequest(Text,Title,Left Text[,[Middle Text,]Right Text])": {
		"prefix": "TextRequest",
		"body": "TextRequest(${1:Text,Title,Left Text[,[Middle Text,]Right Text]})",
		"description": ""
	},
	"FileReqSize Lines High,File Length,Device Length,": {
		"prefix": "FileReqSize",
		"body": "FileReqSize ${1:Lines High,File Length,Device Length,}",
		"description": ""
	},
	"ReqFileRequest$(Title$,File$,Path$,Flags)": {
		"prefix": "ReqFileRequest$",
		"body": "ReqFileRequest$(${1:Title$,File$,Path$,Flags})",
		"description": ""
	},
	"FileFilter Show$,Hide$": {
		"prefix": "FileFilter",
		"body": "FileFilter ${1:Show$,Hide$}",
		"description": ""
	},
	"TextTimeout Timeout Seconds": {
		"prefix": "TextTimeout",
		"body": "TextTimeout ${1:Timeout Seconds}",
		"description": ""
	},
	"ReqColours Text,Detail,Block[,File,Dir,Device[,GadText,GadBox,StringName,StringBox,Frame]]": {
		"prefix": "ReqColours",
		"body": "ReqColours ${1:Text,Detail,Block[,File,Dir,Device[,GadText,GadBox,StringName,StringBox,Frame]]}",
		"description": ""
	},
	"GetString$(Title$,Default$,Visable size,Max length)": {
		"prefix": "GetString$",
		"body": "GetString$(${1:Title$,Default$,Visable size,Max length})",
		"description": ""
	},
	"FileStructure Pointer to file requester structor": {
		"prefix": "FileStructure",
		"body": "FileStructure ${1:Pointer to file requester structor}",
		"description": ""
	},
	"NextFile$ Returns next file form MaxSelect$": {
		"prefix": "NextFile$",
		"body": "NextFile$ ${1:Returns next file form MaxSelect$}",
		"description": ""
	},
	"MaxSelect$ Path$=(Title$,File$,Path$,Flags,number of files)": {
		"prefix": "MaxSelect$",
		"body": "MaxSelect$ ${1:Path$=(Title$,File$,Path$,Flags,number of files)}",
		"description": ""
	},
	"ReqFontSize Returns font size": {
		"prefix": "ReqFontSize",
		"body": "ReqFontSize ${1:Returns font size}",
		"description": ""
	},
	"Req_Base Returns pointer to req.library": {
		"prefix": "Req_Base",
		"body": "Req_Base ${1:Returns pointer to req.library}",
		"description": ""
	},
	"Dos_Base Returns pointer to dos.library": {
		"prefix": "Dos_Base",
		"body": "Dos_Base ${1:Returns pointer to dos.library}",
		"description": ""
	},
	"Int_Base Returns pointer to intuition.library": {
		"prefix": "Int_Base",
		"body": "Int_Base ${1:Returns pointer to intuition.library}",
		"description": ""
	},
	"Gfx_Base Returns pointer to graphics.library": {
		"prefix": "Gfx_Base",
		"body": "Gfx_Base ${1:Returns pointer to graphics.library}",
		"description": ""
	},
	"Rex_Base Returns pointer to RexxSys.library ?": {
		"prefix": "Rex_Base",
		"body": "Rex_Base ${1:Returns pointer to RexxSys.library ?}",
		"description": ""
	},
	"Con_Base Returns pointer to console.device": {
		"prefix": "Con_Base",
		"body": "Con_Base ${1:Returns pointer to console.device}",
		"description": ""
	},
	"Null(String$)": {
		"prefix": "Null",
		"body": "Null(${1:String$})",
		"description": "Returns address of null-termed string."
	},
	"ChipFree": {
		"prefix": "ChipFree",
		"body": "ChipFree",
		"description": "Returns largest block of free CHIP memory."
	},
	"FastFree": {
		"prefix": "FastFree",
		"body": "FastFree",
		"description": "Returns largest block of free FAST memory."
	},
	"LargestFree": {
		"prefix": "LargestFree",
		"body": "LargestFree",
		"description": "Returns largest block of memory available."
	},
	"IntuitionBase": {
		"prefix": "IntuitionBase",
		"body": "IntuitionBase",
		"description": ";Returns Intuition Library base."
	},
	"DosBase": {
		"prefix": "DosBase",
		"body": "DosBase",
		"description": ";Returns DOS Library base."
	},
	"GraphicsBase": {
		"prefix": "GraphicsBase",
		"body": "GraphicsBase",
		"description": ";Returns Graphics Library base."
	},
	"FFPBase": {
		"prefix": "FFPBase",
		"body": "FFPBase",
		"description": ";Returns FFP Math Library base."
	},
	"DiskFontBase": {
		"prefix": "DiskFontBase",
		"body": "DiskFontBase",
		"description": ";Returns DiskFont Library base."
	},
	"CommoditiesBase": {
		"prefix": "CommoditiesBase",
		"body": "CommoditiesBase",
		"description": ";Returns Commodities Library base."
	},
	"IconBase": {
		"prefix": "IconBase",
		"body": "IconBase",
		"description": ";Returns Icon Library base."
	},
	"RexxSysBase": {
		"prefix": "RexxSysBase",
		"body": "RexxSysBase",
		"description": ";Returns RexxSys Library base."
	},
	"Request(Title$,text$,button$)": {
		"prefix": "Request",
		"body": "Request(${1:Title$,text$,button$})",
		"description": "OS 2.0 & above System Requester."
	},
	"ActiveScreen": {
		"prefix": "ActiveScreen",
		"body": "ActiveScreen",
		"description": ";Returns ADDRESS of current Intuition screen."
	},
	"ScreenWidth": {
		"prefix": "ScreenWidth",
		"body": "ScreenWidth",
		"description": ";Returns width in pixels of active screen."
	},
	"ScreenHeight": {
		"prefix": "ScreenHeight",
		"body": "ScreenHeight",
		"description": ";Returns height in pixels of active screen."
	},
	"ActiveWindow": {
		"prefix": "ActiveWindow",
		"body": "ActiveWindow",
		"description": ";Returns ADDRESS of current Intuition window."
	},
	"WaitFor(IDCMP Code)": {
		"prefix": "WaitFor",
		"body": "WaitFor(${1:IDCMP Code})",
		"description": "Delays until specified Intuition event occurs."
	},
	"ShowRequesters [0=Cancel] [1=On Workbench Screen] [2=In Current Window]": {
		"prefix": "ShowRequesters",
		"body": "ShowRequesters ${1:[0=Cancel] [1=On Workbench Screen] [2=In Current Window]}",
		"description": ""
	},
	"Xor(expression,expression)": {
		"prefix": "Xor",
		"body": "Xor(${1:expression,expression})",
		"description": "Returns Exclusive OR of two expressions."
	},
	"Largest.l(Long Integer1,Long Integer2)": {
		"prefix": "Largest.l",
		"body": "Largest.l(${1:Long Integer1,Long Integer2})",
		"description": ""
	},
	"Smallest.l(Long Integer1,Long Integer2)": {
		"prefix": "Smallest.l",
		"body": "Smallest.l(${1:Long Integer1,Long Integer2})",
		"description": ""
	},
	"Largest.q(Quick1,Quick2)": {
		"prefix": "Largest.q",
		"body": "Largest.q(${1:Quick1,Quick2})",
		"description": ""
	},
	"Smallest.q(Quick1,Quick2)": {
		"prefix": "Smallest.q",
		"body": "Smallest.q(${1:Quick1,Quick2})",
		"description": ""
	},
	"Largest(Integer1,Integer2)": {
		"prefix": "Largest",
		"body": "Largest(${1:Integer1,Integer2})",
		"description": ""
	},
	"Smallest(Integer1,Integer2)": {
		"prefix": "Smallest",
		"body": "Smallest(${1:Integer1,Integer2})",
		"description": ""
	},
	"Avg.l(Long Integer 1,Long Integer 2)": {
		"prefix": "Avg.l",
		"body": "Avg.l(${1:Long Integer 1,Long Integer 2})",
		"description": ""
	},
	"Avg.q(Quick1,Quick2)": {
		"prefix": "Avg.q",
		"body": "Avg.q(${1:Quick1,Quick2})",
		"description": ""
	},
	"Avg(Integer1,Integer2)": {
		"prefix": "Avg",
		"body": "Avg(${1:Integer1,Integer2})",
		"description": ""
	},
	"RRandomize Seed": {
		"prefix": "RRandomize",
		"body": "RRandomize ${1:Seed}",
		"description": ""
	},
	"RRnd(Low,High)": {
		"prefix": "RRnd",
		"body": "RRnd(${1:Low,High})",
		"description": ""
	},
	"Hex#(HexString$)": {
		"prefix": "Hex#",
		"body": "Hex#(${1:HexString$})",
		"description": "Converts hexadecimal (in string) value to decimal."
	},
	"Bin#(BinString$)": {
		"prefix": "Bin#",
		"body": "Bin#(${1:BinString$})",
		"description": "Converts binary value (in string) to decimal."
	},
	"IncSound Success=IncSound(SOUND#,?LABEL or ADDRESS)": {
		"prefix": "IncSound",
		"body": "IncSound ${1:Success=IncSound(SOUND#,?LABEL or ADDRESS)}",
		"description": ""
	},
	"IncBitmap Success=IncBitmap(BITMAP#,?LABEL or ADDRESS)": {
		"prefix": "IncBitmap",
		"body": "IncBitmap ${1:Success=IncBitmap(BITMAP#,?LABEL or ADDRESS)}",
		"description": ""
	},
	"IncMod Success=IncMod(TRACKER-MODULE#,?LABEL or ADDRESS)": {
		"prefix": "IncMod",
		"body": "IncMod ${1:Success=IncMod(TRACKER-MODULE#,?LABEL or ADDRESS)}",
		"description": ""
	},
	"IncMed Success=IncMed(MED-MODULE#,?LABEL or ADDRESS)": {
		"prefix": "IncMed",
		"body": "IncMed ${1:Success=IncMed(MED-MODULE#,?LABEL or ADDRESS)}",
		"description": ""
	},
	"IncShape Success=IncShape(SHAPE#,?LABEL or ADDRESS [,Cookiecut?])": {
		"prefix": "IncShape",
		"body": "IncShape ${1:Success=IncShape(SHAPE#,?LABEL or ADDRESS [,Cookiecut?])}",
		"description": ""
	},
	"IncNextShape Success=IncNextShape [(Cookiecut?)]": {
		"prefix": "IncNextShape",
		"body": "IncNextShape ${1:Success=IncNextShape [(Cookiecut?)]}",
		"description": "*MUST* use with IncShape(...)."
	},
	"IncDataABS Bytes=IncDataABS(?LABEL or ADDRESS,DESTINATION ADDRESS)": {
		"prefix": "IncDataABS",
		"body": "IncDataABS ${1:Bytes=IncDataABS(?LABEL or ADDRESS,DESTINATION ADDRESS)}",
		"description": ""
	},
	"IncData Address=IncData(?LABEL or ADDRESS,MEMTYPE)": {
		"prefix": "IncData",
		"body": "IncData ${1:Address=IncData(?LABEL or ADDRESS,MEMTYPE)}",
		"description": "0=fast 2=chip 65536=clearmem."
	},
	"FreeIncData SIZE,ADDRESS": {
		"prefix": "FreeIncData",
		"body": "FreeIncData ${1:SIZE,ADDRESS}",
		"description": "As returned from IncSize(...) and IncData(...)."
	},
	"SaveIncData Success=SaveIncData(Filename$,?LABEL or ADDRESS)": {
		"prefix": "SaveIncData",
		"body": "SaveIncData ${1:Success=SaveIncData(Filename$,?LABEL or ADDRESS)}",
		"description": ""
	},
	"IncText$ n$=IncText$(?LABEL or ADDRESS[,max length])": {
		"prefix": "IncText$",
		"body": "IncText$ ${1:n$=IncText$(?LABEL or ADDRESS[,max length])}",
		"description": ""
	},
	"IncSize bytes=IncSize(?LABEL OR ADDRESS)": {
		"prefix": "IncSize",
		"body": "IncSize ${1:bytes=IncSize(?LABEL OR ADDRESS)}",
		"description": ""
	},
	"Freq Channelmask,period": {
		"prefix": "Freq",
		"body": "Freq ${1:Channelmask,period}",
		"description": ""
	},
	"Quiet ChannelMask": {
		"prefix": "Quiet",
		"body": "Quiet ${1:ChannelMask}",
		"description": "Stops specified currently playing sounds."
	},
	"VWaitPos RasterLine": {
		"prefix": "VWaitPos",
		"body": "VWaitPos ${1:RasterLine}",
		"description": ""
	},
	"Ticks": {
		"prefix": "Ticks",
		"body": "Ticks",
		"description": ";'ticks' since last ResetTimer (1/50 secs. PAL, 1/60 NTSC)."
	},
	"ResetTimer": {
		"prefix": "ResetTimer",
		"body": "ResetTimer",
		"description": ";Resets timer to zero 'Ticks.'."
	},
	"JoyC(Port)": {
		"prefix": "JoyC",
		"body": "JoyC(${1:Port})",
		"description": "For 2-button controllers:  Detects buttons pressed."
	},
	"CheckAGA": {
		"prefix": "CheckAGA",
		"body": "CheckAGA",
		"description": ";Returns 'TRUE' for AGA machines, otherwise returns 'FALSE'."
	},
	"PeekTo$(Address,byte)": {
		"prefix": "PeekTo$",
		"body": "PeekTo$(${1:Address,byte})",
		"description": "Reads memory into string upto specified byte."
	},
	"ForcePAL": {
		"prefix": "ForcePAL",
		"body": "ForcePAL",
		"description": ";Forces screen mode to PAL (50hz)."
	},
	"ForceNTSC": {
		"prefix": "ForceNTSC",
		"body": "ForceNTSC",
		"description": ";Forces screen mode to NTSC (60hz)."
	},
	"Depth(Bitmap#)": {
		"prefix": "Depth",
		"body": "Depth(${1:Bitmap#})",
		"description": "Returns DEPTH of specified bitmap."
	},
	"ClickMouse": {
		"prefix": "ClickMouse",
		"body": "ClickMouse",
		"description": ";Waits for left mouse button to be CLICKED."
	},
	"Index List()": {
		"prefix": "Index",
		"body": "Index ${1:List()}",
		"description": "Returns index from top of LIST."
	},
	"SPACE$(number of spaces)": {
		"prefix": "SPACE$",
		"body": "SPACE$(${1:number of spaces})",
		"description": ""
	},
	"Checksum(String$)": {
		"prefix": "Checksum",
		"body": "Checksum(${1:String$})",
		"description": "Returns a unique checksum for a given string."
	},
	"CharCount(String$,byte)": {
		"prefix": "CharCount",
		"body": "CharCount(${1:String$,byte})",
		"description": "Returns no. occurances of 'byte' in 'string$'."
	},
	"SearchEnd(String$,byte,# from End)": {
		"prefix": "SearchEnd",
		"body": "SearchEnd(${1:String$,byte,# from End})",
		"description": "Searches string backwards for Nth byte."
	},
	"SearchBegin(String$,byte,# from Begin)": {
		"prefix": "SearchBegin",
		"body": "SearchBegin(${1:String$,byte,# from Begin})",
		"description": "Searches string for Nth byte."
	},
	"Cipher$(String$)": {
		"prefix": "Cipher$",
		"body": "Cipher$(${1:String$})",
		"description": "Create/Unencrypt a Cipher$() string."
	},
	"Repeats(String$)": {
		"prefix": "Repeats",
		"body": "Repeats(${1:String$})",
		"description": "Returns # repetitive characters at front of string."
	},
	"CHDir [success=] CHDir(Path$)": {
		"prefix": "CHDir",
		"body": "CHDir ${1:[success=] CHDir(Path$)}",
		"description": "CHange current DIRectory."
	},
	"CurrentDir$": {
		"prefix": "CurrentDir$",
		"body": "CurrentDir$",
		"description": "Current directory name."
	},
	"MoreEntries": {
		"prefix": "MoreEntries",
		"body": "MoreEntries",
		"description": "True if more entries in Examined directory."
	},
	"EntryDir": {
		"prefix": "EntryDir",
		"body": "EntryDir",
		"description": "True if last Examined object or entry is a directory."
	},
	"EntryName$": {
		"prefix": "EntryName$",
		"body": "EntryName$",
		"description": "Filename of last Examined object or entry."
	},
	"EntryBits$": {
		"prefix": "EntryBits$",
		"body": "EntryBits$",
		"description": "Possible bits: H, S, A, P, R, W, E, D."
	},
	"EntrySize": {
		"prefix": "EntrySize",
		"body": "EntrySize",
		"description": "Bytesize of last Examined object or entry."
	},
	"EntryDate": {
		"prefix": "EntryDate",
		"body": "EntryDate",
		"description": "Date$(EntryDate) returns date of last Examined object or entry."
	},
	"EntryHour": {
		"prefix": "EntryHour",
		"body": "EntryHour",
		"description": "Hour of last Examined object or entry."
	},
	"EntryMins": {
		"prefix": "EntryMins",
		"body": "EntryMins",
		"description": "Minutes of last Examined object or entry."
	},
	"EntrySecs": {
		"prefix": "EntrySecs",
		"body": "EntrySecs",
		"description": "Seconds of last Examined object or entry."
	},
	"EntryComment$": {
		"prefix": "EntryComment$",
		"body": "EntryComment$",
		"description": "Comment String of last Examined object or entry."
	},
	"CopyFile [success=] CopyFile(Source$,Dest$)": {
		"prefix": "CopyFile",
		"body": "CopyFile ${1:[success=] CopyFile(Source$,Dest$)}",
		"description": ""
	},
	"SetCopyBuffer BufferSize": {
		"prefix": "SetCopyBuffer",
		"body": "SetCopyBuffer ${1:BufferSize}",
		"description": "Default is 4096 bytes, min. 1024 bytes."
	},
	"NameFile [success=] Rename(Oldfilename$,Newfilename$)": {
		"prefix": "NameFile",
		"body": "NameFile ${1:[success=] Rename(Oldfilename$,Newfilename$)}",
		"description": ""
	},
	"AnalyzeDisk(DriveName$)": {
		"prefix": "AnalyzeDisk",
		"body": "AnalyzeDisk(${1:DriveName$})",
		"description": "TRUE if device name is valid."
	},
	"DiskUnit": {
		"prefix": "DiskUnit",
		"body": "DiskUnit",
		"description": "Unit# of last drive analyzed."
	},
	"DiskErrors": {
		"prefix": "DiskErrors",
		"body": "DiskErrors",
		"description": "No. of soft errors on last drive analyzed."
	},
	"DiskCapacity": {
		"prefix": "DiskCapacity",
		"body": "DiskCapacity",
		"description": "Capacity in bytes of last drive analyzed."
	},
	"DiskUsed": {
		"prefix": "DiskUsed",
		"body": "DiskUsed",
		"description": "No. bytes used of last analyzed drive."
	},
	"DiskBlocks": {
		"prefix": "DiskBlocks",
		"body": "DiskBlocks",
		"description": "Bytes per block of last drive analyzed."
	},
	"DiskFree": {
		"prefix": "DiskFree",
		"body": "DiskFree",
		"description": "No. free bytes on last analyzed disk."
	},
	"MoveFile [success=] MoveFile(Source$,Dest$)": {
		"prefix": "MoveFile",
		"body": "MoveFile ${1:[success=] MoveFile(Source$,Dest$)}",
		"description": ""
	},
	"GetAssigns(Type)": {
		"prefix": "GetAssigns",
		"body": "GetAssigns(${1:Type})",
		"description": "Types are: 0=Devices, 1=Directories 2=Volumes."
	},
	"Assign$": {
		"prefix": "Assign$",
		"body": "Assign$",
		"description": "Null-string indicates end of list."
	},
	"Examine [success=] Examine(Pathname$)": {
		"prefix": "Examine",
		"body": "Examine ${1:[success=] Examine(Pathname$)}",
		"description": ""
	},
	"SetFileComment [success=] SetFileComment(Filename$,Comment$)": {
		"prefix": "SetFileComment",
		"body": "SetFileComment ${1:[success=] SetFileComment(Filename$,Comment$)}",
		"description": ""
	},
	"SetBits [success=] SetBits(Bits$,Filename$)": {
		"prefix": "SetBits",
		"body": "SetBits ${1:[success=] SetBits(Bits$,Filename$)}",
		"description": "<HSPARWED>."
	},
	"SetWildString [result=] SetWildString(Pattern$)": {
		"prefix": "SetWildString",
		"body": "SetWildString ${1:[result=] SetWildString(Pattern$)}",
		"description": "0=Failed, 1=Found WildCards, 2=No WildCards."
	},
	"MatchWild(String$)": {
		"prefix": "MatchWild",
		"body": "MatchWild(${1:String$})",
		"description": "TRUE=Match, FALSE=No Match."
	},
	"DosError$": {
		"prefix": "DosError$",
		"body": "DosError$",
		"description": "Reason for last failed DOS action."
	},
	"DiskState": {
		"prefix": "DiskState",
		"body": "DiskState",
		"description": "0=Write-Protected, 1=Validating, 2=Validated."
	},
	"DiskType$": {
		"prefix": "DiskType$",
		"body": "DiskType$",
		"description": "4-char string ID."
	},
	"FilePart$(FullPath$)": {
		"prefix": "FilePart$",
		"body": "FilePart$(${1:FullPath$})",
		"description": "\"DH0:S/User-Startup\" -> \"User-Startup\"."
	},
	"PathPart$(FullPath$)": {
		"prefix": "PathPart$",
		"body": "PathPart$(${1:FullPath$})",
		"description": "\"DH0:S/User-Startup\" -> \"DH0:S\"."
	},
	"FullPath$(PathPart$,FilePart$)": {
		"prefix": "FullPath$",
		"body": "FullPath$(${1:PathPart$,FilePart$})",
		"description": "\"DH0:S\" + \"User-Startup\" -> \"DH0:S/User-Startup\"."
	},
	"NoMoreEntries": {
		"prefix": "NoMoreEntries",
		"body": "NoMoreEntries",
		"description": "Release lock on currently Examined object."
	},
	"GetLocal$(Name$)": {
		"prefix": "GetLocal$",
		"body": "GetLocal$(${1:Name$})",
		"description": "Returns DOS local variable."
	},
	"GetEnv$(Name$)": {
		"prefix": "GetEnv$",
		"body": "GetEnv$(${1:Name$})",
		"description": "Returns DOS environmental variable."
	},
	"SetLocal [success=] SetLocal(Name$,Value$)": {
		"prefix": "SetLocal",
		"body": "SetLocal ${1:[success=] SetLocal(Name$,Value$)}",
		"description": "Sets DOS local variable."
	},
	"SetEnv [success=] SetEnv(Name$,Value$)": {
		"prefix": "SetEnv",
		"body": "SetEnv ${1:[success=] SetEnv(Name$,Value$)}",
		"description": "Sets DOS environmental variable."
	},
	"UnSetLocal [success=] UnSetLocal(Name$)": {
		"prefix": "UnSetLocal",
		"body": "UnSetLocal ${1:[success=] UnSetLocal(Name$)}",
		"description": "Removes DOS local variable."
	},
	"UnSetEnv [success=] UnSetEnv(Name$)": {
		"prefix": "UnSetEnv",
		"body": "UnSetEnv ${1:[success=] UnSetEnv(Name$)}",
		"description": "Removes DOS environmental variable."
	},
	"Run [*Process=] Run(Filename$,Args$[,StackSize])": {
		"prefix": "Run",
		"body": "Run ${1:[*Process=] Run(Filename$,Args$[,StackSize])}",
		"description": ""
	},
	"ComparePaths(Path1$,Path2$)": {
		"prefix": "ComparePaths",
		"body": "ComparePaths(${1:Path1$,Path2$})",
		"description": "0=Unrelated, 1=Same Dir or File, 2=On Same Volume."
	},
	"Assign [success=] Assign(Name$,ToPath$)": {
		"prefix": "Assign",
		"body": "Assign ${1:[success=] Assign(Name$,ToPath$)}",
		"description": "e.g. Assign \"Blitz2:\",\"DH1:Blitz2\"."
	},
	"Exec DosCommands$": {
		"prefix": "Exec",
		"body": "Exec ${1:DosCommands$}",
		"description": "String is executed."
	},
	"WriteCD32Mem(AppName$,FileName$,Address,Length/10)": {
		"prefix": "WriteCD32Mem",
		"body": "WriteCD32Mem(${1:AppName$,FileName$,Address,Length/10})",
		"description": "Writes to the non-volatile memory of the CD32 from a memory location."
	},
	"ReadCD32Mem(AppName$,FileName$,Address,Length/10)": {
		"prefix": "ReadCD32Mem",
		"body": "ReadCD32Mem(${1:AppName$,FileName$,Address,Length/10})",
		"description": "Reads the non-volatile memory of the CD32 to a memory location."
	},
	"InitCD32": {
		"prefix": "InitCD32",
		"body": "InitCD32",
		"description": "returns true if ok, false if fails."
	},
	"ExamineCD32": {
		"prefix": "ExamineCD32",
		"body": "ExamineCD32",
		"description": "-1=programdisk 0=nodisk n=number of tracks."
	},
	"PlayCD32 track#[,numtracks]": {
		"prefix": "PlayCD32",
		"body": "PlayCD32 ${1:track#[,numtracks]}",
		"description": "Makes the CD32 go boom tiddly pom depending on what type of music track is specified."
	},
	"StopCD32": {
		"prefix": "StopCD32",
		"body": "StopCD32",
		"description": "No explanation necessary, well it is sort of self explanatory."
	},
	"ControlCD32": {
		"prefix": "ControlCD32",
		"body": "ControlCD32",
		"description": "0=play 1=pause 2=ffwd 3=rewind."
	},
	"TocCD32": {
		"prefix": "TocCD32",
		"body": "TocCD32",
		"description": "returns location of the toc read by Examine."
	},
	"ConfigCD32 [&TagList]": {
		"prefix": "ConfigCD32",
		"body": "ConfigCD32 ${1:[&TagList]}",
		"description": "can return &currentconfig."
	},
	"ReadCD32(CD_Offset,Address,Length)": {
		"prefix": "ReadCD32",
		"body": "ReadCD32(${1:CD_Offset,Address,Length})",
		"description": "Wo, only good for lowlevel people who want to protect their software in more ways than one."
	},
	"GetIconInfo": {
		"prefix": "GetIconInfo",
		"body": "GetIconInfo",
		"description": "success.w=GetIconInfo(Info#,filename$)  -1=ok, 0=fail."
	},
	"IconTool$": {
		"prefix": "IconTool$",
		"body": "IconTool$",
		"description": "tool$=IconTool$(Info#,type$)  Empty string=NOT FOUND."
	},
	"IconType": {
		"prefix": "IconType",
		"body": "IconType",
		"description": "type.w=IconType(Info#)  Returns the icon type. #WBDRAWER,#WBTOOL etc.."
	},
	"IconDefTool$": {
		"prefix": "IconDefTool$",
		"body": "IconDefTool$",
		"description": "deftool$=IconDefTool$(Info#)  Returns the icons default tool."
	},
	"IconStack": {
		"prefix": "IconStack",
		"body": "IconStack",
		"description": "stackSize.l=IconType(Info#)  Returns the stack size set in the icon."
	},
	"IconSubTool$": {
		"prefix": "IconSubTool$",
		"body": "IconSubTool$",
		"description": "boolean.w=IconSubTool$(type$,sub$) -1=Found  0=Not found."
	},
	"XBDiskPlay Filename$,Channelmask[,Vol1[,Vol2...]]": {
		"prefix": "XBDiskPlay",
		"body": "XBDiskPlay ${1:Filename$,Channelmask[,Vol1[,Vol2...]]}",
		"description": ""
	},
	"XBDiskBuffer Bufferlen": {
		"prefix": "XBDiskBuffer",
		"body": "XBDiskBuffer ${1:Bufferlen}",
		"description": ""
	},
	"XBLoadSound Sound#,Filename$": {
		"prefix": "XBLoadSound",
		"body": "XBLoadSound ${1:Sound#,Filename$}",
		"description": ""
	},
	"XBSound Sound#,Channelmask[,Vol1[,Vol2...]]": {
		"prefix": "XBSound",
		"body": "XBSound ${1:Sound#,Channelmask[,Vol1[,Vol2...]]}",
		"description": ""
	},
	"XBVolume Channelmask,Vol1[,Vol2...]": {
		"prefix": "XBVolume",
		"body": "XBVolume ${1:Channelmask,Vol1[,Vol2...]}",
		"description": ""
	},
	"XBFilter On|Off": {
		"prefix": "XBFilter",
		"body": "XBFilter ${1:On|Off}",
		"description": ""
	},
	"XBLoopSound Sound#,Channelmask[,Vol1[,Vol2...]]": {
		"prefix": "XBLoopSound",
		"body": "XBLoopSound ${1:Sound#,Channelmask[,Vol1[,Vol2...]]}",
		"description": ""
	},
	"XBInitSound Sound#,Length[,Period[,Repeat]]": {
		"prefix": "XBInitSound",
		"body": "XBInitSound ${1:Sound#,Length[,Period[,Repeat]]}",
		"description": ""
	},
	"XBSoundData Sound#,Offset,Data": {
		"prefix": "XBSoundData",
		"body": "XBSoundData ${1:Sound#,Offset,Data}",
		"description": ""
	},
	"XBPeekSound(Sound#,Offset)": {
		"prefix": "XBPeekSound",
		"body": "XBPeekSound(${1:Sound#,Offset})",
		"description": ""
	},
	"XBDecodeSound Sound#,MemoryLocation": {
		"prefix": "XBDecodeSound",
		"body": "XBDecodeSound ${1:Sound#,MemoryLocation}",
		"description": ""
	},
	"XBSetPeriod Sound#,Period": {
		"prefix": "XBSetPeriod",
		"body": "XBSetPeriod ${1:Sound#,Period}",
		"description": ""
	},
	"CMPMEM(source,dest,length) 0=same,-1 source<dest, +1 source>dest": {
		"prefix": "CMPMEM",
		"body": "CMPMEM(${1:source,dest,length) 0=same,-1 source<dest, +1 source>dest})",
		"description": ""
	},
	"StrToFls string$,destvar,maxlength[,fillchar]": {
		"prefix": "StrToFls",
		"body": "StrToFls ${1:string$,destvar,maxlength[,fillchar]}",
		"description": ""
	},
	"FlsToStr$(startaddr of FLS, maxlength)": {
		"prefix": "FlsToStr$",
		"body": "FlsToStr$(${1:startaddr of FLS, maxlength})",
		"description": ""
	},
	"DBInit(object#,init recs, exp recs,rec struct[,keylength[,offset]])": {
		"prefix": "DBInit",
		"body": "DBInit(${1:object#,init recs, exp recs,rec struct[,keylength[,offset]]})",
		"description": ""
	},
	"DBlistaddr(database #) gives address of nodelist header": {
		"prefix": "DBlistaddr",
		"body": "DBlistaddr(${1:database #) gives address of nodelist header})",
		"description": ""
	},
	"DBfirst(database #) set pointer to the first database entry": {
		"prefix": "DBfirst",
		"body": "DBfirst(${1:database #) set pointer to the first database entry})",
		"description": ""
	},
	"DBlast(database #) set pointer to the last database entry": {
		"prefix": "DBlast",
		"body": "DBlast(${1:database #) set pointer to the last database entry})",
		"description": ""
	},
	"DBnext(database #) set pointer to the next database entry": {
		"prefix": "DBnext",
		"body": "DBnext(${1:database #) set pointer to the next database entry})",
		"description": ""
	},
	"DBprev(database #) set pointer to the previous database entry": {
		"prefix": "DBprev",
		"body": "DBprev(${1:database #) set pointer to the previous database entry})",
		"description": ""
	},
	"DBaddLast(database #,record var) add record to database": {
		"prefix": "DBaddLast",
		"body": "DBaddLast(${1:database #,record var) add record to database})",
		"description": ""
	},
	"DBaddFirst(database #,record var) add record to database": {
		"prefix": "DBaddFirst",
		"body": "DBaddFirst(${1:database #,record var) add record to database})",
		"description": ""
	},
	"DBadd(database #,record var) add record to database": {
		"prefix": "DBadd",
		"body": "DBadd(${1:database #,record var) add record to database})",
		"description": ""
	},
	"DBrecs(database #) gives number of records in database": {
		"prefix": "DBrecs",
		"body": "DBrecs(${1:database #) gives number of records in database})",
		"description": ""
	},
	"DBget(database #,record var) get current record from database": {
		"prefix": "DBget",
		"body": "DBget(${1:database #,record var) get current record from database})",
		"description": ""
	},
	"DBkill(database #) kill current database": {
		"prefix": "DBkill",
		"body": "DBkill(${1:database #) kill current database})",
		"description": ""
	},
	"DBdelete database # delete current entry in database": {
		"prefix": "DBdelete",
		"body": "DBdelete ${1:database # delete current entry in database}",
		"description": ""
	},
	"DBsetpos database #,recs   >sets current entry a number of records from start of database": {
		"prefix": "DBsetpos",
		"body": "DBsetpos ${1:database #,recs   >sets current entry a number of records from start of database}",
		"description": ""
	},
	"DBCasesense On|Off   Switch search case sensitivity on or off": {
		"prefix": "DBCasesense",
		"body": "DBCasesense ${1:On|Off   Switch search case sensitivity on or off}",
		"description": ""
	},
	"DBsetkey database #,On|Off  switch keying On / Off For database": {
		"prefix": "DBsetkey",
		"body": "DBsetkey ${1:database #,On|Off  switch keying On / Off For database}",
		"description": ""
	},
	"DBmemtype memtype  define type of memory to store database": {
		"prefix": "DBmemtype",
		"body": "DBmemtype ${1:memtype  define type of memory to store database}",
		"description": ""
	},
	"DBfind(database #,searchstring$[,length,offset[,startrec]])": {
		"prefix": "DBfind",
		"body": "DBfind(${1:database #,searchstring$[,length,offset[,startrec]]})",
		"description": ""
	},
	"DBfindnext(database #)": {
		"prefix": "DBfindnext",
		"body": "DBfindnext(${1:database #})",
		"description": ""
	},
	"DBupdate database #,record variable": {
		"prefix": "DBupdate",
		"body": "DBupdate ${1:database #,record variable}",
		"description": ""
	},
	"DBSave Database#,filename$": {
		"prefix": "DBSave",
		"body": "DBSave ${1:Database#,filename$}",
		"description": ""
	},
	"DBLoad Database#,filename$": {
		"prefix": "DBLoad",
		"body": "DBLoad ${1:Database#,filename$}",
		"description": ""
	},
	"DBisnext(Database#)": {
		"prefix": "DBisnext",
		"body": "DBisnext(${1:Database#})",
		"description": ""
	},
	"DBisprev(Database#)": {
		"prefix": "DBisprev",
		"body": "DBisprev(${1:Database#})",
		"description": ""
	},
	"DBcurrent(Database#)": {
		"prefix": "DBcurrent",
		"body": "DBcurrent(${1:Database#})",
		"description": ""
	},
	"DBmodified(Database#)": {
		"prefix": "DBmodified",
		"body": "DBmodified(${1:Database#})",
		"description": ""
	},
	"DBactive(Database#) Is a database active or not ?": {
		"prefix": "DBactive",
		"body": "DBactive(${1:Database#) Is a database active or not ?})",
		"description": ""
	},
	"DBpush(Database#) hold onto this record": {
		"prefix": "DBpush",
		"body": "DBpush(${1:Database#) hold onto this record})",
		"description": ""
	},
	"DBpop(Database#) retrieve a pushed record": {
		"prefix": "DBpop",
		"body": "DBpop(${1:Database#) retrieve a pushed record})",
		"description": ""
	},
	"InitChunky Chunky#,width,height,flags (1=24bit 2=8bit)": {
		"prefix": "InitChunky",
		"body": "InitChunky ${1:Chunky#,width,height,flags (1=24bit 2=8bit)}",
		"description": ""
	},
	"FreeChunky Chunky#": {
		"prefix": "FreeChunky",
		"body": "FreeChunky ${1:Chunky#}",
		"description": ""
	},
	"LoadChunky Chunky#,IFFfilename$": {
		"prefix": "LoadChunky",
		"body": "LoadChunky ${1:Chunky#,IFFfilename$}",
		"description": ""
	},
	"SaveChunky Chunky#,IFFfilename$": {
		"prefix": "SaveChunky",
		"body": "SaveChunky ${1:Chunky#,IFFfilename$}",
		"description": ""
	},
	"ReadChunky Chunky#,rawfilename$": {
		"prefix": "ReadChunky",
		"body": "ReadChunky ${1:Chunky#,rawfilename$}",
		"description": ""
	},
	"WriteChunky Chunky#,rawfilename$": {
		"prefix": "WriteChunky",
		"body": "WriteChunky ${1:Chunky#,rawfilename$}",
		"description": ""
	},
	"ProcessChunky chunky#,contrast": {
		"prefix": "ProcessChunky",
		"body": "ProcessChunky ${1:chunky#,contrast}",
		"description": ""
	},
	"AdjustChunky chunky#,DeltaRed,DeltaGreen,DeltaBlue,": {
		"prefix": "AdjustChunky",
		"body": "AdjustChunky ${1:chunky#,DeltaRed,DeltaGreen,DeltaBlue,}",
		"description": ""
	},
	"ScaleChunkyX srcchunky#,destchunky#,newwidth": {
		"prefix": "ScaleChunkyX",
		"body": "ScaleChunkyX ${1:srcchunky#,destchunky#,newwidth}",
		"description": ""
	},
	"ScaleChunkyY srcchunky#,destchunky#,newheight": {
		"prefix": "ScaleChunkyY",
		"body": "ScaleChunkyY ${1:srcchunky#,destchunky#,newheight}",
		"description": ""
	},
	"CopyChunky srcchunky#,destchunky#,[sx,sy,w,h,dx,dy]": {
		"prefix": "CopyChunky",
		"body": "CopyChunky ${1:srcchunky#,destchunky#,[sx,sy,w,h,dx,dy]}",
		"description": ""
	},
	"GreyChunky chunky#": {
		"prefix": "GreyChunky",
		"body": "GreyChunky ${1:chunky#}",
		"description": ""
	},
	"KillGreyChunky chunky#": {
		"prefix": "KillGreyChunky",
		"body": "KillGreyChunky ${1:chunky#}",
		"description": ""
	},
	"ColorChunky chunky#": {
		"prefix": "ColorChunky",
		"body": "ColorChunky ${1:chunky#}",
		"description": ""
	},
	"ChunkyLoc chunky#": {
		"prefix": "ChunkyLoc",
		"body": "ChunkyLoc ${1:chunky#}",
		"description": ""
	},
	"ChunkyConvert chunky#[,palette]|[,array.l(),numcols]": {
		"prefix": "ChunkyConvert",
		"body": "ChunkyConvert ${1:chunky#[,palette]|[,array.l(),numcols]}",
		"description": ""
	},
	"ChunkyToBitMap Chunky#,Bitmap#": {
		"prefix": "ChunkyToBitMap",
		"body": "ChunkyToBitMap ${1:Chunky#,Bitmap#}",
		"description": ""
	},
	"CPlot Chunky#,x,y[,color.l],[red.b,green.b,blue.b]": {
		"prefix": "CPlot",
		"body": "CPlot ${1:Chunky#,x,y[,color.l],[red.b,green.b,blue.b]}",
		"description": ""
	},
	"GPlot Chunky#,x,y,color.b": {
		"prefix": "GPlot",
		"body": "GPlot ${1:Chunky#,x,y,color.b}",
		"description": ""
	},
	"CPoint(Chunky#,x,y)": {
		"prefix": "CPoint",
		"body": "CPoint(${1:Chunky#,x,y})",
		"description": ""
	},
	"GPoint(Chunky#,x,y)": {
		"prefix": "GPoint",
		"body": "GPoint(${1:Chunky#,x,y})",
		"description": ""
	},
	"Col8(array.l(),numcols,rgb.l)": {
		"prefix": "Col8",
		"body": "Col8(${1:array.l(),numcols,rgb.l})",
		"description": ""
	},
	"ModuleSampleName(Module#,Sample#[0-30])": {
		"prefix": "ModuleSampleName",
		"body": "ModuleSampleName(${1:Module#,Sample#[0-30]})",
		"description": ""
	},
	"GetPatternPosition": {
		"prefix": "GetPatternPosition",
		"body": "GetPatternPosition",
		"description": ""
	},
	"SetSongPatternPosition Pattern#,Position#": {
		"prefix": "SetSongPatternPosition",
		"body": "SetSongPatternPosition ${1:Pattern#,Position#}",
		"description": ""
	},
	"GetTrackerVolume(TrackerChannel#)": {
		"prefix": "GetTrackerVolume",
		"body": "GetTrackerVolume(${1:TrackerChannel#})",
		"description": ""
	},
	"GetTrackerNote(TrackerChannel#)": {
		"prefix": "GetTrackerNote",
		"body": "GetTrackerNote(${1:TrackerChannel#})",
		"description": ""
	},
	"SetTrackerTempo Tempo": {
		"prefix": "SetTrackerTempo",
		"body": "SetTrackerTempo ${1:Tempo}",
		"description": ""
	},
	"GetTrackerInstrument(TrackerChannel#)": {
		"prefix": "GetTrackerInstrument",
		"body": "GetTrackerInstrument(${1:TrackerChannel#})",
		"description": ""
	},
	"GetSongPosition": {
		"prefix": "GetSongPosition",
		"body": "GetSongPosition",
		"description": ""
	},
	"GetSongLength": {
		"prefix": "GetSongLength",
		"body": "GetSongLength",
		"description": ""
	},
	"StartTrackerPatPos(TrackerModule#,Pattern#,Position#)": {
		"prefix": "StartTrackerPatPos",
		"body": "StartTrackerPatPos(${1:TrackerModule#,Pattern#,Position#})",
		"description": ""
	},
	"GetSampleLocation(Sample#)": {
		"prefix": "GetSampleLocation",
		"body": "GetSampleLocation(${1:Sample#})",
		"description": ""
	},
	"GetSampleLength(Sample#)": {
		"prefix": "GetSampleLength",
		"body": "GetSampleLength(${1:Sample#})",
		"description": ""
	},
	"GetSampleName(Sample#)": {
		"prefix": "GetSampleName",
		"body": "GetSampleName(${1:Sample#})",
		"description": ""
	},
	"BuildNoteTable": {
		"prefix": "BuildNoteTable",
		"body": "BuildNoteTable",
		"description": ""
	},
	"GetTrackerNoteNumber(TrackerChannel#)": {
		"prefix": "GetTrackerNoteNumber",
		"body": "GetTrackerNoteNumber(${1:TrackerChannel#})",
		"description": ""
	},
	"TrackerPlayLoop(Continuous play.)": {
		"prefix": "TrackerPlayLoop",
		"body": "TrackerPlayLoop(${1:Continuous play.})",
		"description": ""
	},
	"TrackerPlayOnce(Play module once then stop.)": {
		"prefix": "TrackerPlayOnce",
		"body": "TrackerPlayOnce(${1:Play module once then stop.})",
		"description": ""
	},
	"TrackerModuleEnd(TRUE if module has finished playing.)": {
		"prefix": "TrackerModuleEnd",
		"body": "TrackerModuleEnd(${1:TRUE if module has finished playing.})",
		"description": ""
	},
	"TrackerDeInitialise(De-Allocates CIA timers)": {
		"prefix": "TrackerDeInitialise",
		"body": "TrackerDeInitialise(${1:De-Allocates CIA timers})",
		"description": ""
	},
	"TrackerReInitialise(Re-Allocates CIA timers)": {
		"prefix": "TrackerReInitialise",
		"body": "TrackerReInitialise(${1:Re-Allocates CIA timers})",
		"description": ""
	},
	"STCLength address   -": {
		"prefix": "STCLength",
		"body": "STCLength ${1:address   -}",
		"description": "returns unpacked size."
	},
	"STCStart address   -": {
		"prefix": "STCStart",
		"body": "STCStart ${1:address   -}",
		"description": "returns address of unpacked data."
	},
	"STCSafeLen address   -": {
		"prefix": "STCSafeLen",
		"body": "STCSafeLen ${1:address   -}",
		"description": "safe unpack buffer size."
	},
	"STCLoad filename$,address": {
		"prefix": "STCLoad",
		"body": "STCLoad ${1:filename$,address}",
		"description": ""
	},
	"STCDecrunch source[,dest]": {
		"prefix": "STCDecrunch",
		"body": "STCDecrunch ${1:source[,dest]}",
		"description": ""
	},
	"CludgeSound sound#,address": {
		"prefix": "CludgeSound",
		"body": "CludgeSound ${1:sound#,address}",
		"description": ""
	},
	"CludgeShapes shape#,numshapes,address": {
		"prefix": "CludgeShapes",
		"body": "CludgeShapes ${1:shape#,numshapes,address}",
		"description": ""
	},
	"SafeToBlit shape,x,y": {
		"prefix": "SafeToBlit",
		"body": "SafeToBlit ${1:shape,x,y}",
		"description": ""
	},
	"LELoadShapes shape#[,shape#],filename$[,palette#]": {
		"prefix": "LELoadShapes",
		"body": "LELoadShapes ${1:shape#[,shape#],filename$[,palette#]}",
		"description": ""
	},
	"LESaveShapes shape#,shape#,filename$[,palette#]": {
		"prefix": "LESaveShapes",
		"body": "LESaveShapes ${1:shape#,shape#,filename$[,palette#]}",
		"description": ""
	},
	"LECompressShapes True|False": {
		"prefix": "LECompressShapes",
		"body": "LECompressShapes ${1:True|False}",
		"description": ""
	},
	"LECludgeShapes shape#,shape#,address,palette#[,copymemflag]": {
		"prefix": "LECludgeShapes",
		"body": "LECludgeShapes ${1:shape#,shape#,address,palette#[,copymemflag]}",
		"description": ""
	},
	"LEInitShape shape#,width,height,depth": {
		"prefix": "LEInitShape",
		"body": "LEInitShape ${1:shape#,width,height,depth}",
		"description": ""
	},
	"LEScanShapes startshape#,endshape#": {
		"prefix": "LEScanShapes",
		"body": "LEScanShapes ${1:startshape#,endshape#}",
		"description": ""
	},
	"LEMaxShapeWidth": {
		"prefix": "LEMaxShapeWidth",
		"body": "LEMaxShapeWidth",
		"description": ""
	},
	"LEMaxShapeHeight": {
		"prefix": "LEMaxShapeHeight",
		"body": "LEMaxShapeHeight",
		"description": ""
	},
	"LEMaxShapeDepth": {
		"prefix": "LEMaxShapeDepth",
		"body": "LEMaxShapeDepth",
		"description": ""
	},
	"IsNonvolatile -": {
		"prefix": "IsNonvolatile",
		"body": "IsNonvolatile ${1:-}",
		"description": "returns true if library is open."
	},
	"StoreNVData AppName,ItemName,data,byte_length": {
		"prefix": "StoreNVData",
		"body": "StoreNVData ${1:AppName,ItemName,data,byte_length}",
		"description": ""
	},
	"GetCopyNV AppName,ItemName": {
		"prefix": "GetCopyNV",
		"body": "GetCopyNV ${1:AppName,ItemName}",
		"description": ""
	},
	"FreeNVData APTR": {
		"prefix": "FreeNVData",
		"body": "FreeNVData ${1:APTR}",
		"description": ""
	},
	"GetNVList appname": {
		"prefix": "GetNVList",
		"body": "GetNVList ${1:appname}",
		"description": ""
	},
	"TimerReset": {
		"prefix": "TimerReset",
		"body": "TimerReset",
		"description": ""
	},
	"PortSigBit msgport": {
		"prefix": "PortSigBit",
		"body": "PortSigBit ${1:msgport}",
		"description": ""
	},
	"WorkbenchHere": {
		"prefix": "WorkbenchHere",
		"body": "WorkbenchHere",
		"description": ""
	},
	"EZRequest [title$,]body$[,gadget$] | title$,body$,gadget$[,var..]": {
		"prefix": "EZRequest",
		"body": "EZRequest ${1:[title$,]body$[,gadget$] | title$,body$,gadget$[,var..]}",
		"description": ""
	},
	"Flip$(String$)": {
		"prefix": "Flip$",
		"body": "Flip$(${1:String$})",
		"description": ""
	},
	"InitArgParse parameter$": {
		"prefix": "InitArgParse",
		"body": "InitArgParse ${1:parameter$}",
		"description": ""
	},
	"NextArg$": {
		"prefix": "NextArg$",
		"body": "NextArg$",
		"description": "get next parameter."
	},
	"EZOutput [win#]": {
		"prefix": "EZOutput",
		"body": "EZOutput ${1:[win#]}",
		"description": ""
	},
	"EZRequestArgs args..": {
		"prefix": "EZRequestArgs",
		"body": "EZRequestArgs ${1:args..}",
		"description": ""
	},
	"EZSeparator char": {
		"prefix": "EZSeparator",
		"body": "EZSeparator ${1:char}",
		"description": ""
	},
	"ClickWait": {
		"prefix": "ClickWait",
		"body": "ClickWait",
		"description": ""
	},
	"ProgPath$": {
		"prefix": "ProgPath$",
		"body": "ProgPath$",
		"description": ""
	},
	"ProgDir$": {
		"prefix": "ProgDir$",
		"body": "ProgDir$",
		"description": ""
	},
	"ProgName$": {
		"prefix": "ProgName$",
		"body": "ProgName$",
		"description": ""
	},
	"FromBlitz": {
		"prefix": "FromBlitz",
		"body": "FromBlitz",
		"description": ""
	},
	"LtoS(longword) -": {
		"prefix": "LtoS",
		"body": "LtoS(${1:longword) -})",
		"description": "convert LONG to STRING."
	},
	"ASCRaw(rawkey)": {
		"prefix": "ASCRaw",
		"body": "ASCRaw(${1:rawkey})",
		"description": ""
	},
	"RawASC(char)": {
		"prefix": "RawASC",
		"body": "RawASC(${1:char})",
		"description": ""
	},
	"OpenFontPrefs [filename$]": {
		"prefix": "OpenFontPrefs",
		"body": "OpenFontPrefs ${1:[filename$]}",
		"description": ""
	},
	"CloseFontPrefs": {
		"prefix": "CloseFontPrefs",
		"body": "CloseFontPrefs",
		"description": ""
	},
	"DefaultFontHeight fonttype  (0=Icon,1=System,2=Screen)": {
		"prefix": "DefaultFontHeight",
		"body": "DefaultFontHeight ${1:fonttype  (0=Icon,1=System,2=Screen)}",
		"description": ""
	},
	"DefaultFontName fonttype  (0=Icon,1=System,2=Screen)": {
		"prefix": "DefaultFontName",
		"body": "DefaultFontName ${1:fonttype  (0=Icon,1=System,2=Screen)}",
		"description": ""
	},
	"CreateMenuStrip GTMenuList#": {
		"prefix": "CreateMenuStrip",
		"body": "CreateMenuStrip ${1:GTMenuList#}",
		"description": ""
	},
	"GTSetMenu GTMenuList#": {
		"prefix": "GTSetMenu",
		"body": "GTSetMenu ${1:GTMenuList#}",
		"description": ""
	},
	"GTUnSetMenu": {
		"prefix": "GTUnSetMenu",
		"body": "GTUnSetMenu",
		"description": "removes the gtmenulist from the current window."
	},
	"GTMenuTitle GTMenuList#,menu,title$": {
		"prefix": "GTMenuTitle",
		"body": "GTMenuTitle ${1:GTMenuList#,menu,title$}",
		"description": ""
	},
	"GTMenuItem GTMenuList#,flags,menu,item[,itemtext$[,shortcut$[,mutualexclude[,UserData]]": {
		"prefix": "GTMenuItem",
		"body": "GTMenuItem ${1:GTMenuList#,flags,menu,item[,itemtext$[,shortcut$[,mutualexclude[,UserData]]}",
		"description": ""
	},
	"GTMenuState GTMenuList#[,Menu[,Item[,Subitem]]],On|Off": {
		"prefix": "GTMenuState",
		"body": "GTMenuState ${1:GTMenuList#[,Menu[,Item[,Subitem]]],On|Off}",
		"description": ""
	},
	"GTSubItem GTMenuList#,flags,menu,item,subitem[,itemtext$[,shortcut$[,mutualexclude[,UserData]]]]": {
		"prefix": "GTSubItem",
		"body": "GTSubItem ${1:GTMenuList#,flags,menu,item,subitem[,itemtext$[,shortcut$[,mutualexclude[,UserData]]]]}",
		"description": ""
	},
	"GTMenuChecked(GTMenuList#,Menu,Item[,Subitem])": {
		"prefix": "GTMenuChecked",
		"body": "GTMenuChecked(${1:GTMenuList#,Menu,Item[,Subitem]})",
		"description": ""
	},
	"GTSetMenuChecked GTMenuList#,Menu,Item[,Subitem],Off|On": {
		"prefix": "GTSetMenuChecked",
		"body": "GTSetMenuChecked ${1:GTMenuList#,Menu,Item[,Subitem],Off|On}",
		"description": ""
	},
	"GTFreeMenu GTMenuList#,Menu[,Item[,Subitem]]": {
		"prefix": "GTFreeMenu",
		"body": "GTFreeMenu ${1:GTMenuList#,Menu[,Item[,Subitem]]}",
		"description": ""
	},
	"GTGetUserData(GTMenuList#,Menu,Item[,Subitem])": {
		"prefix": "GTGetUserData",
		"body": "GTGetUserData(${1:GTMenuList#,Menu,Item[,Subitem]})",
		"description": ""
	},
	"InitSerialIO baud,numbytes,inbuf,outbuf": {
		"prefix": "InitSerialIO",
		"body": "InitSerialIO ${1:baud,numbytes,inbuf,outbuf}",
		"description": ""
	},
	"FinitSerialIO": {
		"prefix": "FinitSerialIO",
		"body": "FinitSerialIO",
		"description": ""
	},
	"SetSerialMode mode   -": {
		"prefix": "SetSerialMode",
		"body": "SetSerialMode ${1:mode   -}",
		"description": "determine master/slave."
	},
	"EndSerialIO": {
		"prefix": "EndSerialIO",
		"body": "EndSerialIO",
		"description": "disable serial read/write."
	},
	"PutSerial address,bytes | byte": {
		"prefix": "PutSerial",
		"body": "PutSerial ${1:address,bytes | byte}",
		"description": ""
	},
	"GetSerial [address,bytes]": {
		"prefix": "GetSerial",
		"body": "GetSerial ${1:[address,bytes]}",
		"description": ""
	},
	"FlushSerialIO": {
		"prefix": "FlushSerialIO",
		"body": "FlushSerialIO",
		"description": "make sure serial port is empty."
	},
	"SyncSerial syncbyte": {
		"prefix": "SyncSerial",
		"body": "SyncSerial ${1:syncbyte}",
		"description": ""
	},
	"DoSerialIO [numbytes-1]": {
		"prefix": "DoSerialIO",
		"body": "DoSerialIO ${1:[numbytes-1]}",
		"description": ""
	},
	"SetIOBuffers inbuf,outbuf": {
		"prefix": "SetIOBuffers",
		"body": "SetIOBuffers ${1:inbuf,outbuf}",
		"description": ""
	},
	"SetIOSpeed baudrate": {
		"prefix": "SetIOSpeed",
		"body": "SetIOSpeed ${1:baudrate}",
		"description": ""
	},
	"SetIOSize bytes": {
		"prefix": "SetIOSize",
		"body": "SetIOSize ${1:bytes}",
		"description": ""
	},
	"CheckSerial": {
		"prefix": "CheckSerial",
		"body": "CheckSerial",
		"description": ""
	},
	"SyncPut address,bytes": {
		"prefix": "SyncPut",
		"body": "SyncPut ${1:address,bytes}",
		"description": ""
	},
	"SyncGet address,bytes": {
		"prefix": "SyncGet",
		"body": "SyncGet ${1:address,bytes}",
		"description": ""
	},
	"ConvToPostFix string,buffer": {
		"prefix": "ConvToPostFix",
		"body": "ConvToPostFix ${1:string,buffer}",
		"description": ""
	},
	"PFEvaluate(string)": {
		"prefix": "PFEvaluate",
		"body": "PFEvaluate(${1:string})",
		"description": ""
	},
	"PFRegisters *registerblock": {
		"prefix": "PFRegisters",
		"body": "PFRegisters ${1:*registerblock}",
		"description": "pointer to registers."
	},
	"PFErrorType": {
		"prefix": "PFErrorType",
		"body": "PFErrorType",
		"description": "returns error number or 0 for none."
	},
	"PFErrorText": {
		"prefix": "PFErrorText",
		"body": "PFErrorText",
		"description": "returns error text corresponding to error."
	},
	"PFIndirectAddr": {
		"prefix": "PFIndirectAddr",
		"body": "PFIndirectAddr",
		"description": "returns last indirect lookup."
	},
	"AddNotify idno,filespec$": {
		"prefix": "AddNotify",
		"body": "AddNotify ${1:idno,filespec$}",
		"description": ""
	},
	"RemNotify notify#": {
		"prefix": "RemNotify",
		"body": "RemNotify ${1:notify#}",
		"description": ""
	},
	"CheckNotify": {
		"prefix": "CheckNotify",
		"body": "CheckNotify",
		"description": ""
	},
	"WaitNotify": {
		"prefix": "WaitNotify",
		"body": "WaitNotify",
		"description": ""
	},
	"GetDeviceList flags": {
		"prefix": "GetDeviceList",
		"body": "GetDeviceList ${1:flags}",
		"description": ""
	},
	"NextDevice": {
		"prefix": "NextDevice",
		"body": "NextDevice",
		"description": ""
	},
	"FreeDeviceList": {
		"prefix": "FreeDeviceList",
		"body": "FreeDeviceList",
		"description": ""
	},
	"NotifyPort": {
		"prefix": "NotifyPort",
		"body": "NotifyPort",
		"description": ""
	},
	"GetFileName filepath$": {
		"prefix": "GetFileName",
		"body": "GetFileName ${1:filepath$}",
		"description": ""
	},
	"GetPathName filepath$": {
		"prefix": "GetPathName",
		"body": "GetPathName ${1:filepath$}",
		"description": ""
	},
	"DeviceEntryType": {
		"prefix": "DeviceEntryType",
		"body": "DeviceEntryType",
		"description": "-- dev=0,dir=1,vol=2,late=3,nonbind=4."
	},
	"DataTypeOpen filename$": {
		"prefix": "DataTypeOpen",
		"body": "DataTypeOpen ${1:filename$}",
		"description": ""
	},
	"DataTypeClose": {
		"prefix": "DataTypeClose",
		"body": "DataTypeClose",
		"description": ""
	},
	"DataTypeName": {
		"prefix": "DataTypeName",
		"body": "DataTypeName",
		"description": ""
	},
	"DataTypeBaseName": {
		"prefix": "DataTypeBaseName",
		"body": "DataTypeBaseName",
		"description": ""
	},
	"DataTypeID": {
		"prefix": "DataTypeID",
		"body": "DataTypeID",
		"description": ""
	},
	"DataTypeCreate [&taglist]": {
		"prefix": "DataTypeCreate",
		"body": "DataTypeCreate ${1:[&taglist]}",
		"description": ""
	},
	"AttachDataType window,id[,x,y,width,height] | window,id,&taglist": {
		"prefix": "AttachDataType",
		"body": "AttachDataType ${1:window,id[,x,y,width,height] | window,id,&taglist}",
		"description": ""
	},
	"DetachDataType": {
		"prefix": "DetachDataType",
		"body": "DetachDataType",
		"description": ""
	},
	"DataTypeSuper": {
		"prefix": "DataTypeSuper",
		"body": "DataTypeSuper",
		"description": ""
	},
	"DataTypeBitmap": {
		"prefix": "DataTypeBitmap",
		"body": "DataTypeBitmap",
		"description": ""
	},
	"DataTypesPalette palette#": {
		"prefix": "DataTypesPalette",
		"body": "DataTypesPalette ${1:palette#}",
		"description": ""
	},
	"DataTypeWidth": {
		"prefix": "DataTypeWidth",
		"body": "DataTypeWidth",
		"description": ""
	},
	"DataTypeHeight": {
		"prefix": "DataTypeHeight",
		"body": "DataTypeHeight",
		"description": ""
	},
	"DataTypeDepth": {
		"prefix": "DataTypeDepth",
		"body": "DataTypeDepth",
		"description": ""
	},
	"DataTypeReady": {
		"prefix": "DataTypeReady",
		"body": "DataTypeReady",
		"description": ""
	},
	"SetDataTypeAttr &taglist / attr,data[,attr,data..]": {
		"prefix": "SetDataTypeAttr",
		"body": "SetDataTypeAttr ${1:&taglist / attr,data[,attr,data..]}",
		"description": ""
	},
	"GetDataTypeAttr attribute": {
		"prefix": "GetDataTypeAttr",
		"body": "GetDataTypeAttr ${1:attribute}",
		"description": ""
	},
	"DataTypeModeID [taglist]]": {
		"prefix": "DataTypeModeID",
		"body": "DataTypeModeID ${1:[taglist]]}",
		"description": ""
	},
	"DataTypeGroup": {
		"prefix": "DataTypeGroup",
		"body": "DataTypeGroup",
		"description": ""
	},
	"RXCreatePort(name$)": {
		"prefix": "RXCreatePort",
		"body": "RXCreatePort(${1:name$})",
		"description": ""
	},
	"RXDeletePort": {
		"prefix": "RXDeletePort",
		"body": "RXDeletePort",
		"description": ""
	},
	"RXReadPort": {
		"prefix": "RXReadPort",
		"body": "RXReadPort",
		"description": ""
	},
	"RXWaitPort": {
		"prefix": "RXWaitPort",
		"body": "RXWaitPort",
		"description": ""
	},
	"RXReplyMsg errcode[,result$]": {
		"prefix": "RXReplyMsg",
		"body": "RXReplyMsg ${1:errcode[,result$]}",
		"description": ""
	},
	"RXRunCommand [portname$,]command$": {
		"prefix": "RXRunCommand",
		"body": "RXRunCommand ${1:[portname$,]command$}",
		"description": ""
	},
	"RXSendersName": {
		"prefix": "RXSendersName",
		"body": "RXSendersName",
		"description": ""
	},
	"RXSendCommand [portname$,]command$": {
		"prefix": "RXSendCommand",
		"body": "RXSendCommand ${1:[portname$,]command$}",
		"description": ""
	},
	"RXNumArgs": {
		"prefix": "RXNumArgs",
		"body": "RXNumArgs",
		"description": ""
	},
	"RXGetArg argnum": {
		"prefix": "RXGetArg",
		"body": "RXGetArg ${1:argnum}",
		"description": ""
	},
	"RXExecuteScript scriptname$": {
		"prefix": "RXExecuteScript",
		"body": "RXExecuteScript ${1:scriptname$}",
		"description": ""
	},
	"RXRunScript scriptname$": {
		"prefix": "RXRunScript",
		"body": "RXRunScript ${1:scriptname$}",
		"description": ""
	},
	"RXDefaultPort portname$": {
		"prefix": "RXDefaultPort",
		"body": "RXDefaultPort ${1:portname$}",
		"description": ""
	},
	"RXNextArg argnum": {
		"prefix": "RXNextArg",
		"body": "RXNextArg ${1:argnum}",
		"description": ""
	},
	"RXReturnCode": {
		"prefix": "RXReturnCode",
		"body": "RXReturnCode",
		"description": ""
	},
	"RXTokenise on|off": {
		"prefix": "RXTokenise",
		"body": "RXTokenise ${1:on|off}",
		"description": ""
	},
	"NInitApp(#NumMaxAppID)": {
		"prefix": "NInitApp",
		"body": "NInitApp(${1:#NumMaxAppID})",
		"description": "Initialize App library for use -."
	},
	"NAddAppWindow(#AppID, WindowID)": {
		"prefix": "NAddAppWindow",
		"body": "NAddAppWindow(${1:#AppID, WindowID})",
		"description": "Transform a window into AppWindow -."
	},
	"NRemoveAppWindow(#AppID)": {
		"prefix": "NRemoveAppWindow",
		"body": "NRemoveAppWindow(${1:#AppID})",
		"description": "Remove the App feature -."
	},
	"NAddAppMenu(#AppID, &Title$)": {
		"prefix": "NAddAppMenu",
		"body": "NAddAppMenu(${1:#AppID, &Title$})",
		"description": "Add a menu in the 'Tools' menu -."
	},
	"NRemoveAppMenu(#AppID)": {
		"prefix": "NRemoveAppMenu",
		"body": "NRemoveAppMenu(${1:#AppID})",
		"description": "Remove the App menu -."
	},
	"NAppEvent": {
		"prefix": "NAppEvent",
		"body": "NAppEvent",
		"description": "Return -1 if nothing or the #AppID -."
	},
	"NAppNumFiles": {
		"prefix": "NAppNumFiles",
		"body": "NAppNumFiles",
		"description": "Return number of file dropped on the window -."
	},
	"NNextAppFile": {
		"prefix": "NNextAppFile",
		"body": "NNextAppFile",
		"description": "Return the next filename -."
	},
	"NASLFileRequest(TagList)": {
		"prefix": "NASLFileRequest",
		"body": "NASLFileRequest(${1:TagList})",
		"description": ""
	},
	"NASLFontRequest(TagList)": {
		"prefix": "NASLFontRequest",
		"body": "NASLFontRequest(${1:TagList})",
		"description": ""
	},
	"NASLScreenRequest(TagList)": {
		"prefix": "NASLScreenRequest",
		"body": "NASLScreenRequest(${1:TagList})",
		"description": ""
	},
	"NASLPosX": {
		"prefix": "NASLPosX",
		"body": "NASLPosX",
		"description": "Return the last opened ASL requester X pos -."
	},
	"NASLPosY": {
		"prefix": "NASLPosY",
		"body": "NASLPosY",
		"description": "Return the last opened ASL requester Y pos-."
	},
	"NASLWidth": {
		"prefix": "NASLWidth",
		"body": "NASLWidth",
		"description": "Return the last opened ASL requester width -."
	},
	"NASLHeight": {
		"prefix": "NASLHeight",
		"body": "NASLHeight",
		"description": "Return the last opened ASL requester height -."
	},
	"NInitASL": {
		"prefix": "NInitASL",
		"body": "NInitASL",
		"description": "Initialize ASL for use -."
	},
	"NUseBitMap(#BitMap)": {
		"prefix": "NUseBitMap",
		"body": "NUseBitMap(${1:#BitMap})",
		"description": ""
	},
	"NBitMap(#BitMap, Width, Height, Depth)": {
		"prefix": "NBitMap",
		"body": "NBitMap(${1:#BitMap, Width, Height, Depth})",
		"description": "Allocate a new bitmap -."
	},
	"NBitMapRastPort": {
		"prefix": "NBitMapRastPort",
		"body": "NBitMapRastPort",
		"description": "Return the used bitmap rastport -."
	},
	"NShowBitMap(#BitMap, ScreenID, x, y)": {
		"prefix": "NShowBitMap",
		"body": "NShowBitMap(${1:#BitMap, ScreenID, x, y})",
		"description": ""
	},
	"NFreeBitMap(#BitMap)": {
		"prefix": "NFreeBitMap",
		"body": "NFreeBitMap(${1:#BitMap})",
		"description": "Free the specified bitmap -."
	},
	"NInitBitMap(#MaxNumBitMaps)": {
		"prefix": "NInitBitMap",
		"body": "NInitBitMap(${1:#MaxNumBitMaps})",
		"description": "Init BitMap environnement -."
	},
	"NBitMapID": {
		"prefix": "NBitMapID",
		"body": "NBitMapID",
		"description": "Return the used bitmap pointer -."
	},
	"c2p040_320_200(ChunkyBufferAdress, BitmapAdress)": {
		"prefix": "c2p040_320_200",
		"body": "c2p040_320_200(${1:ChunkyBufferAdress, BitmapAdress})",
		"description": ""
	},
	"c2p040_320_256(ChunkyBufferAdress, BitmapAdress)": {
		"prefix": "c2p040_320_256",
		"body": "c2p040_320_256(${1:ChunkyBufferAdress, BitmapAdress})",
		"description": ""
	},
	"NChunkyBuffer(#Buffer, Width, Height)": {
		"prefix": "NChunkyBuffer",
		"body": "NChunkyBuffer(${1:#Buffer, Width, Height})",
		"description": "Allocate a chunky buffer."
	},
	"NChunkyBlit(ShapeWidth, ShapeHeight, ShapeAddress, X, Y)": {
		"prefix": "NChunkyBlit",
		"body": "NChunkyBlit(${1:ShapeWidth, ShapeHeight, ShapeAddress, X, Y})",
		"description": ""
	},
	"NChunkyBlock(ShapeWidth, ShapeHeight, ShapeAddress, X, Y)": {
		"prefix": "NChunkyBlock",
		"body": "NChunkyBlock(${1:ShapeWidth, ShapeHeight, ShapeAddress, X, Y})",
		"description": ""
	},
	"NChunkyCls(Colour)": {
		"prefix": "NChunkyCls",
		"body": "NChunkyCls(${1:Colour})",
		"description": ""
	},
	"NChunkyPlot(X, Y, Colour)": {
		"prefix": "NChunkyPlot",
		"body": "NChunkyPlot(${1:X, Y, Colour})",
		"description": ""
	},
	"NUseChunkyBuffer(#Buffer)": {
		"prefix": "NUseChunkyBuffer",
		"body": "NUseChunkyBuffer(${1:#Buffer})",
		"description": ""
	},
	"NInitChunky(#NumObjectMax)": {
		"prefix": "NInitChunky",
		"body": "NInitChunky(${1:#NumObjectMax})",
		"description": ""
	},
	"NFreeChunkyBuffer(#Buffer)": {
		"prefix": "NFreeChunkyBuffer",
		"body": "NFreeChunkyBuffer(${1:#Buffer})",
		"description": ""
	},
	"NChunkyID": {
		"prefix": "NChunkyID",
		"body": "NChunkyID",
		"description": "Return the chunkybuffer memory pointer."
	},
	"NSetClipText(String$)": {
		"prefix": "NSetClipText",
		"body": "NSetClipText(${1:String$})",
		"description": "Change the clipboard text -."
	},
	"NGetClipText": {
		"prefix": "NGetClipText",
		"body": "NGetClipText",
		"description": "Return the current clipboard text -."
	},
	"NCreateCommodity(Objects.l, Name$, Title$, Description$, Priority.b, Flag.b)": {
		"prefix": "NCreateCommodity",
		"body": "NCreateCommodity(${1:Objects.l, Name$, Title$, Description$, Priority.b, Flag.b})",
		"description": ""
	},
	"NActivateCommodity Status.l": {
		"prefix": "NActivateCommodity",
		"body": "NActivateCommodity ${1:Status.l}",
		"description": ""
	},
	"NCommodityActivateTranslater #Object.l, Status.l": {
		"prefix": "NCommodityActivateTranslater",
		"body": "NCommodityActivateTranslater ${1:#Object.l, Status.l}",
		"description": ""
	},
	"NCommodityActivateObject #Object.l, Status.l": {
		"prefix": "NCommodityActivateObject",
		"body": "NCommodityActivateObject ${1:#Object.l, Status.l}",
		"description": ""
	},
	"NWaitCommodityEvent": {
		"prefix": "NWaitCommodityEvent",
		"body": "NWaitCommodityEvent",
		"description": ""
	},
	"NCommodityEvent": {
		"prefix": "NCommodityEvent",
		"body": "NCommodityEvent",
		"description": ""
	},
	"NCommodityType": {
		"prefix": "NCommodityType",
		"body": "NCommodityType",
		"description": ""
	},
	"NCommodityID": {
		"prefix": "NCommodityID",
		"body": "NCommodityID",
		"description": ""
	},
	"NCommodityCtrlCSignal": {
		"prefix": "NCommodityCtrlCSignal",
		"body": "NCommodityCtrlCSignal",
		"description": ""
	},
	"NCommodityObjectSignal": {
		"prefix": "NCommodityObjectSignal",
		"body": "NCommodityObjectSignal",
		"description": ""
	},
	"NCommodityCreateObject(#Object.l, Filter$, *InputEvent)": {
		"prefix": "NCommodityCreateObject",
		"body": "NCommodityCreateObject(${1:#Object.l, Filter$, *InputEvent})",
		"description": ""
	},
	"NCommodityDeleteObject #Object.l": {
		"prefix": "NCommodityDeleteObject",
		"body": "NCommodityDeleteObject ${1:#Object.l}",
		"description": ""
	},
	"NCommodityAddInputEvent *InputEvent": {
		"prefix": "NCommodityAddInputEvent",
		"body": "NCommodityAddInputEvent ${1:*InputEvent}",
		"description": ""
	},
	"NCommodityChangeTranslater #Object.l, *InputEvent": {
		"prefix": "NCommodityChangeTranslater",
		"body": "NCommodityChangeTranslater ${1:#Object.l, *InputEvent}",
		"description": ""
	},
	"NCommodityIXChangeFilter(#Object.l, *InputXpression)": {
		"prefix": "NCommodityIXChangeFilter",
		"body": "NCommodityIXChangeFilter(${1:#Object.l, *InputXpression})",
		"description": ""
	},
	"NCommodityChangeFilter(#Object.l, Filter$)": {
		"prefix": "NCommodityChangeFilter",
		"body": "NCommodityChangeFilter(${1:#Object.l, Filter$})",
		"description": ""
	},
	"NBoxFill(x1, y1, x2, y2)": {
		"prefix": "NBoxFill",
		"body": "NBoxFill(${1:x1, y1, x2, y2})",
		"description": "Draw a filled box on the current OutPut -."
	},
	"NPlot(x, y)": {
		"prefix": "NPlot",
		"body": "NPlot(${1:x, y})",
		"description": "Draw a plot on the current OutPut -."
	},
	"NLine(x1, y1, x2, y2)": {
		"prefix": "NLine",
		"body": "NLine(${1:x1, y1, x2, y2})",
		"description": "Draw a line on the current OutPut -."
	},
	"NCircle(x, y, Radius)": {
		"prefix": "NCircle",
		"body": "NCircle(${1:x, y, Radius})",
		"description": "Draw a circle on the current OutPut -."
	},
	"NEllipse(x, y, RadiusX, RadiusY)": {
		"prefix": "NEllipse",
		"body": "NEllipse(${1:x, y, RadiusX, RadiusY})",
		"description": "Draw an ellipse on the current OutPut -."
	},
	"NFrontColour(Colour)": {
		"prefix": "NFrontColour",
		"body": "NFrontColour(${1:Colour})",
		"description": "Change the front colour of the current OutPut -."
	},
	"NBackColour(Colour)": {
		"prefix": "NBackColour",
		"body": "NBackColour(${1:Colour})",
		"description": "Change the back colour of the current OutPut -."
	},
	"NDrawingMode(DrawMode)": {
		"prefix": "NDrawingMode",
		"body": "NDrawingMode(${1:DrawMode})",
		"description": "Change the draw mode of the current OutPut -."
	},
	"NDrawingOutput(RastPort)": {
		"prefix": "NDrawingOutput",
		"body": "NDrawingOutput(${1:RastPort})",
		"description": "Change the current OutPut -."
	},
	"NCopybitMap(BitMapID, SourceX, SourceY, DestX, DestY, Width, Height)": {
		"prefix": "NCopybitMap",
		"body": "NCopybitMap(${1:BitMapID, SourceX, SourceY, DestX, DestY, Width, Height})",
		"description": "Copy the specified bitmap to Output -."
	},
	"NCls(Colour)": {
		"prefix": "NCls",
		"body": "NCls(${1:Colour})",
		"description": "Clear the current output with given colour -."
	},
	"NLocate(x, y)": {
		"prefix": "NLocate",
		"body": "NLocate(${1:x, y})",
		"description": "Set the cursor position for text output -."
	},
	"NDPrint(Text$)": {
		"prefix": "NDPrint",
		"body": "NDPrint(${1:Text$})",
		"description": "Print the specified text -."
	},
	"NTextStyle(Style)": {
		"prefix": "NTextStyle",
		"body": "NTextStyle(${1:Style})",
		"description": "1=Underline, 2=Bold, 4=Italic -."
	},
	"NDrawingFont(FontID)": {
		"prefix": "NDrawingFont",
		"body": "NDrawingFont(${1:FontID})",
		"description": "Change the current font -."
	},
	"NTextLength(String$)": {
		"prefix": "NTextLength",
		"body": "NTextLength(${1:String$})",
		"description": "Return the length in pixel of the string -."
	},
	"NPoint(x, y)": {
		"prefix": "NPoint",
		"body": "NPoint(${1:x, y})",
		"description": "Return the pixel colour at position (x,y) -."
	},
	"NDrawingRastPort": {
		"prefix": "NDrawingRastPort",
		"body": "NDrawingRastPort",
		"description": "Return the current Drawing RastPort -."
	},
	"NCursX": {
		"prefix": "NCursX",
		"body": "NCursX",
		"description": "Return the current cursor X position -."
	},
	"NCursY": {
		"prefix": "NCursY",
		"body": "NCursY",
		"description": "Return the current cursor Y position -."
	},
	"NLoadFont(#Font, FontName$, YSize)": {
		"prefix": "NLoadFont",
		"body": "NLoadFont(${1:#Font, FontName$, YSize})",
		"description": "Return a FontID."
	},
	"NUseFont(#Font)": {
		"prefix": "NUseFont",
		"body": "NUseFont(${1:#Font})",
		"description": "Change the used font."
	},
	"NCloseFont(#Font)": {
		"prefix": "NCloseFont",
		"body": "NCloseFont(${1:#Font})",
		"description": "Close the specified font."
	},
	"NInitFont(#NumFontMax)": {
		"prefix": "NInitFont",
		"body": "NInitFont(${1:#NumFontMax})",
		"description": "Initialize Font for use."
	},
	"NFontID": {
		"prefix": "NFontID",
		"body": "NFontID",
		"description": "Return the used intuifont pointer -."
	},
	"NButtonGadget(#Gadget, x, y, Width, Height, Text$, TagList)": {
		"prefix": "NButtonGadget",
		"body": "NButtonGadget(${1:#Gadget, x, y, Width, Height, Text$, TagList})",
		"description": ""
	},
	"NCheckBoxGadget(#Gadget, x, y, Width, Height, Text$, TagList)": {
		"prefix": "NCheckBoxGadget",
		"body": "NCheckBoxGadget(${1:#Gadget, x, y, Width, Height, Text$, TagList})",
		"description": ""
	},
	"NIntegerGadget(#Gadget, x, y, Width, Height, Text$, TagList)": {
		"prefix": "NIntegerGadget",
		"body": "NIntegerGadget(${1:#Gadget, x, y, Width, Height, Text$, TagList})",
		"description": ""
	},
	"NListViewGadget(#Gadget, x, y, Width, Height, Text$, TagList)": {
		"prefix": "NListViewGadget",
		"body": "NListViewGadget(${1:#Gadget, x, y, Width, Height, Text$, TagList})",
		"description": ""
	},
	"NNumberGadget(#Gadget, x, y, Width, Height, Text$, TagList)": {
		"prefix": "NNumberGadget",
		"body": "NNumberGadget(${1:#Gadget, x, y, Width, Height, Text$, TagList})",
		"description": ""
	},
	"NCycleGadget(#Gadget, x, y, Width, Height, Text$, TagList)": {
		"prefix": "NCycleGadget",
		"body": "NCycleGadget(${1:#Gadget, x, y, Width, Height, Text$, TagList})",
		"description": ""
	},
	"NPaletteGadget(#Gadget, x, y, Width, Height, Text$, TagList)": {
		"prefix": "NPaletteGadget",
		"body": "NPaletteGadget(${1:#Gadget, x, y, Width, Height, Text$, TagList})",
		"description": ""
	},
	"NScrollerGadget(#Gadget, x, y, Width, Height, Text$, TagList)": {
		"prefix": "NScrollerGadget",
		"body": "NScrollerGadget(${1:#Gadget, x, y, Width, Height, Text$, TagList})",
		"description": ""
	},
	"NSliderGadget(#Gadget, x, y, Width, Height, Text$, TagList)": {
		"prefix": "NSliderGadget",
		"body": "NSliderGadget(${1:#Gadget, x, y, Width, Height, Text$, TagList})",
		"description": ""
	},
	"NStringGadget(#Gadget, x, y, Width, Height, Text$, TagList)": {
		"prefix": "NStringGadget",
		"body": "NStringGadget(${1:#Gadget, x, y, Width, Height, Text$, TagList})",
		"description": ""
	},
	"NTextGadget(#Gadget, x, y, Width, Height, Text$, TagList)": {
		"prefix": "NTextGadget",
		"body": "NTextGadget(${1:#Gadget, x, y, Width, Height, Text$, TagList})",
		"description": ""
	},
	"NSetGadgetFont &FontAttr structure !": {
		"prefix": "NSetGadgetFont",
		"body": "NSetGadgetFont ${1:&FontAttr structure !}",
		"description": ""
	},
	"NSetGadgetFlags Flags": {
		"prefix": "NSetGadgetFlags",
		"body": "NSetGadgetFlags ${1:Flags}",
		"description": ""
	},
	"NGadgetAttrs #Gadget, #TAG_ITEM, #TAG_DATA": {
		"prefix": "NGadgetAttrs",
		"body": "NGadgetAttrs ${1:#Gadget, #TAG_ITEM, #TAG_DATA}",
		"description": ""
	},
	"NGetStringText(#Gadget)": {
		"prefix": "NGetStringText",
		"body": "NGetStringText(${1:#Gadget})",
		"description": ""
	},
	"NUnused1": {
		"prefix": "NUnused1",
		"body": "NUnused1",
		"description": ""
	},
	"NUseGadgetList #GadgetList": {
		"prefix": "NUseGadgetList",
		"body": "NUseGadgetList ${1:#GadgetList}",
		"description": ""
	},
	"NCreateGadgetList(#GadgetList, ScreenID)": {
		"prefix": "NCreateGadgetList",
		"body": "NCreateGadgetList(${1:#GadgetList, ScreenID})",
		"description": ""
	},
	"NAttachGadgetList #GadgetList, WindowID": {
		"prefix": "NAttachGadgetList",
		"body": "NAttachGadgetList ${1:#GadgetList, WindowID}",
		"description": ""
	},
	"NUnused6": {
		"prefix": "NUnused6",
		"body": "NUnused6",
		"description": ""
	},
	"NUnused7": {
		"prefix": "NUnused7",
		"body": "NUnused7",
		"description": ""
	},
	"NUnused8": {
		"prefix": "NUnused8",
		"body": "NUnused8",
		"description": ""
	},
	"NUnused9": {
		"prefix": "NUnused9",
		"body": "NUnused9",
		"description": ""
	},
	"NUnused10": {
		"prefix": "NUnused10",
		"body": "NUnused10",
		"description": ""
	},
	"NUnused11": {
		"prefix": "NUnused11",
		"body": "NUnused11",
		"description": ""
	},
	"NUnused12": {
		"prefix": "NUnused12",
		"body": "NUnused12",
		"description": ""
	},
	"NUnused13": {
		"prefix": "NUnused13",
		"body": "NUnused13",
		"description": ""
	},
	"NUnused4": {
		"prefix": "NUnused4",
		"body": "NUnused4",
		"description": ""
	},
	"NUnused3": {
		"prefix": "NUnused3",
		"body": "NUnused3",
		"description": ""
	},
	"NInitGadget(NumMaxGadgetLists)": {
		"prefix": "NInitGadget",
		"body": "NInitGadget(${1:NumMaxGadgetLists})",
		"description": ""
	},
	"NOptionGadget(#Gadget, x, y, Width, Height, Text$, TagList)": {
		"prefix": "NOptionGadget",
		"body": "NOptionGadget(${1:#Gadget, x, y, Width, Height, Text$, TagList})",
		"description": ""
	},
	"NUnused2": {
		"prefix": "NUnused2",
		"body": "NUnused2",
		"description": ""
	},
	"NDisableGadget #Gadget, State": {
		"prefix": "NDisableGadget",
		"body": "NDisableGadget ${1:#Gadget, State}",
		"description": ""
	},
	"NActivateGadget #Gadget": {
		"prefix": "NActivateGadget",
		"body": "NActivateGadget ${1:#Gadget}",
		"description": ""
	},
	"NRefreshGadget #Gadget": {
		"prefix": "NRefreshGadget",
		"body": "NRefreshGadget ${1:#Gadget}",
		"description": ""
	},
	"NNoGadgetBorder #Gadget": {
		"prefix": "NNoGadgetBorder",
		"body": "NNoGadgetBorder ${1:#Gadget}",
		"description": ""
	},
	"NFreeGadgetList #GadgetList": {
		"prefix": "NFreeGadgetList",
		"body": "NFreeGadgetList ${1:#GadgetList}",
		"description": ""
	},
	"NSetStringText #Gadget, Text$": {
		"prefix": "NSetStringText",
		"body": "NSetStringText ${1:#Gadget, Text$}",
		"description": ""
	},
	"NRefreshGadgetList": {
		"prefix": "NRefreshGadgetList",
		"body": "NRefreshGadgetList",
		"description": "Refresh the current gadget list."
	},
	"NUnused14": {
		"prefix": "NUnused14",
		"body": "NUnused14",
		"description": ""
	},
	"NInitLocale": {
		"prefix": "NInitLocale",
		"body": "NInitLocale",
		"description": "Initialize locale for use."
	},
	"NOpenCatalog(CatalogName$, TagList)": {
		"prefix": "NOpenCatalog",
		"body": "NOpenCatalog(${1:CatalogName$, TagList})",
		"description": "Open a specified catalog file."
	},
	"NCloseCatalog": {
		"prefix": "NCloseCatalog",
		"body": "NCloseCatalog",
		"description": "Close the opened catalog."
	},
	"NGetCatalogString(String number)": {
		"prefix": "NGetCatalogString",
		"body": "NGetCatalogString(${1:String number})",
		"description": "Get a text from an opened catalog."
	},
	"NPokeB Adress, Byte": {
		"prefix": "NPokeB",
		"body": "NPokeB ${1:Adress, Byte}",
		"description": "Adress, Byte."
	},
	"NPokeW Adress, Word": {
		"prefix": "NPokeW",
		"body": "NPokeW ${1:Adress, Word}",
		"description": "Adress, Word."
	},
	"NPokeL Adress, Long": {
		"prefix": "NPokeL",
		"body": "NPokeL ${1:Adress, Long}",
		"description": "Adress, Long."
	},
	"NPeekB(Address)": {
		"prefix": "NPeekB",
		"body": "NPeekB(${1:Address})",
		"description": ""
	},
	"NPeekW(Address)": {
		"prefix": "NPeekW",
		"body": "NPeekW(${1:Address})",
		"description": ""
	},
	"NPeekL(Address)": {
		"prefix": "NPeekL",
		"body": "NPeekL(${1:Address})",
		"description": ""
	},
	"NPeek$(Address)": {
		"prefix": "NPeek$",
		"body": "NPeek$(${1:Address})",
		"description": ""
	},
	"NMenuTitle(&Title$)": {
		"prefix": "NMenuTitle",
		"body": "NMenuTitle(${1:&Title$})",
		"description": ""
	},
	"NMenuItem(#Item, &Title$, &CommandKey$)": {
		"prefix": "NMenuItem",
		"body": "NMenuItem(${1:#Item, &Title$, &CommandKey$})",
		"description": ""
	},
	"NMenuSubItem(#Item, &Title$, &CommandKey$)": {
		"prefix": "NMenuSubItem",
		"body": "NMenuSubItem(${1:#Item, &Title$, &CommandKey$})",
		"description": ""
	},
	"NMenuBar": {
		"prefix": "NMenuBar",
		"body": "NMenuBar",
		"description": "Create a menu separator bar."
	},
	"NMenuSubBar": {
		"prefix": "NMenuSubBar",
		"body": "NMenuSubBar",
		"description": "Create a submenu separator bar."
	},
	"NCreateMenu(#Menu, ScreenID)": {
		"prefix": "NCreateMenu",
		"body": "NCreateMenu(${1:#Menu, ScreenID})",
		"description": ""
	},
	"NAttachMenu(#Menu, WindowID)": {
		"prefix": "NAttachMenu",
		"body": "NAttachMenu(${1:#Menu, WindowID})",
		"description": ""
	},
	"NSetMenuColour(Colour)": {
		"prefix": "NSetMenuColour",
		"body": "NSetMenuColour(${1:Colour})",
		"description": ""
	},
	"NInitMenu(NumMaxMenus, MaximumMenuItems)": {
		"prefix": "NInitMenu",
		"body": "NInitMenu(${1:NumMaxMenus, MaximumMenuItems})",
		"description": ""
	},
	"NFreeMenu(#Menu)": {
		"prefix": "NFreeMenu",
		"body": "NFreeMenu(${1:#Menu})",
		"description": "Free the specified menu -."
	},
	"NMenuCheckItem(#Item, &Title$, &CommandKey$, State)": {
		"prefix": "NMenuCheckItem",
		"body": "NMenuCheckItem(${1:#Item, &Title$, &CommandKey$, State})",
		"description": ""
	},
	"NMenuCheckSubItem(#Item, &Title$, &CommandKey$, State)": {
		"prefix": "NMenuCheckSubItem",
		"body": "NMenuCheckSubItem(${1:#Item, &Title$, &CommandKey$, State})",
		"description": ""
	},
	"NMenuToggleItem(#Item, &Title$, &CommandKey$, State)": {
		"prefix": "NMenuToggleItem",
		"body": "NMenuToggleItem(${1:#Item, &Title$, &CommandKey$, State})",
		"description": ""
	},
	"NMenuToggleSubItem(#Item, &Title$, &CommandKey$, State)": {
		"prefix": "NMenuToggleSubItem",
		"body": "NMenuToggleSubItem(${1:#Item, &Title$, &CommandKey$, State})",
		"description": ""
	},
	"NVWait": {
		"prefix": "NVWait",
		"body": "NVWait",
		"description": "Wait until next Vertical Blank."
	},
	"NMouseWait": {
		"prefix": "NMouseWait",
		"body": "NMouseWait",
		"description": "Wait until a mouse press."
	},
	"NFalse": {
		"prefix": "NFalse",
		"body": "NFalse",
		"description": "Set variable type to False -."
	},
	"NTrue": {
		"prefix": "NTrue",
		"body": "NTrue",
		"description": "Set variable type to True -."
	},
	"NOff": {
		"prefix": "NOff",
		"body": "NOff",
		"description": "Set variable type to Off -."
	},
	"NOn": {
		"prefix": "NOn",
		"body": "NOn",
		"description": "Set variable type to On -."
	},
	"NProgramPriority(New Priority)": {
		"prefix": "NProgramPriority",
		"body": "NProgramPriority(${1:New Priority})",
		"description": "Set the program priority -."
	},
	"NExecBase": {
		"prefix": "NExecBase",
		"body": "NExecBase",
		"description": "Return the exec.library base pointer -."
	},
	"NDosBase": {
		"prefix": "NDosBase",
		"body": "NDosBase",
		"description": "Return the dos.library base pointer -."
	},
	"NIntuitionBase": {
		"prefix": "NIntuitionBase",
		"body": "NIntuitionBase",
		"description": "Return the intuition.library base pointer -."
	},
	"NGraphicsBase": {
		"prefix": "NGraphicsBase",
		"body": "NGraphicsBase",
		"description": "Return the graphics.library base pointer -."
	},
	"NUsePalette(#Palette)": {
		"prefix": "NUsePalette",
		"body": "NUsePalette(${1:#Palette})",
		"description": ""
	},
	"NPalRgb(ColorIndex, R, G, B)": {
		"prefix": "NPalRgb",
		"body": "NPalRgb(${1:ColorIndex, R, G, B})",
		"description": ""
	},
	"NDisplayPalette(#Palette, ScreenID)": {
		"prefix": "NDisplayPalette",
		"body": "NDisplayPalette(${1:#Palette, ScreenID})",
		"description": ""
	},
	"NRed(ColorIndex)": {
		"prefix": "NRed",
		"body": "NRed(${1:ColorIndex})",
		"description": "Get the Red value -."
	},
	"NGreen(ColorIndex)": {
		"prefix": "NGreen",
		"body": "NGreen(${1:ColorIndex})",
		"description": "Get the Green value -."
	},
	"NBlue(ColorIndex)": {
		"prefix": "NBlue",
		"body": "NBlue(${1:ColorIndex})",
		"description": "Get the Blue value -."
	},
	"NGetScreenPalette(#Palette, ScreenID)": {
		"prefix": "NGetScreenPalette",
		"body": "NGetScreenPalette(${1:#Palette, ScreenID})",
		"description": "Get the palette from screen -."
	},
	"NCreatePalette(#Palette, NbColors)": {
		"prefix": "NCreatePalette",
		"body": "NCreatePalette(${1:#Palette, NbColors})",
		"description": "Create an empty palette -."
	},
	"NRgb(ScreenID, ColourIndex, R, G, B)": {
		"prefix": "NRgb",
		"body": "NRgb(${1:ScreenID, ColourIndex, R, G, B})",
		"description": ""
	},
	"NFadeOut(#Palette, Step, NbLoop, ScreenID)": {
		"prefix": "NFadeOut",
		"body": "NFadeOut(${1:#Palette, Step, NbLoop, ScreenID})",
		"description": "FadeOut the screen."
	},
	"NFreePalette(#Palette)": {
		"prefix": "NFreePalette",
		"body": "NFreePalette(${1:#Palette})",
		"description": "Free the specified palette -."
	},
	"NInitPalette(#MaxNumPalette)": {
		"prefix": "NInitPalette",
		"body": "NInitPalette(${1:#MaxNumPalette})",
		"description": "Init Palette environnement -."
	},
	"NGetPicturePalette(#Palette, PictureID)": {
		"prefix": "NGetPicturePalette",
		"body": "NGetPicturePalette(${1:#Palette, PictureID})",
		"description": "Create a new palette take from picture -."
	},
	"NFade(#Palette1, #Palette2, Step, NbLoop, ScreenID)": {
		"prefix": "NFade",
		"body": "NFade(${1:#Palette1, #Palette2, Step, NbLoop, ScreenID})",
		"description": ""
	},
	"NNbColour": {
		"prefix": "NNbColour",
		"body": "NNbColour",
		"description": "Return the number of colour of the current palette -."
	},
	"NASyncFade(#Palette1, #Palette2, Step, NbLoop, ScreenID)": {
		"prefix": "NASyncFade",
		"body": "NASyncFade(${1:#Palette1, #Palette2, Step, NbLoop, ScreenID})",
		"description": ""
	},
	"NASyncFadeStatus": {
		"prefix": "NASyncFadeStatus",
		"body": "NASyncFadeStatus",
		"description": "Return -1 if the fade is running, 0 else -."
	},
	"NInitPicture(#MaxPicture)": {
		"prefix": "NInitPicture",
		"body": "NInitPicture(${1:#MaxPicture})",
		"description": ""
	},
	"NFreePicture(#Picture)": {
		"prefix": "NFreePicture",
		"body": "NFreePicture(${1:#Picture})",
		"description": "Remove the specified picture from memory."
	},
	"NUsePicture(#Picture)": {
		"prefix": "NUsePicture",
		"body": "NUsePicture(${1:#Picture})",
		"description": "Change the used picture."
	},
	"NLoadPicture(#Picture, Filename$)": {
		"prefix": "NLoadPicture",
		"body": "NLoadPicture(${1:#Picture, Filename$})",
		"description": ""
	},
	"NPictureWidth": {
		"prefix": "NPictureWidth",
		"body": "NPictureWidth",
		"description": "Return the used picture width."
	},
	"NPictureHeight": {
		"prefix": "NPictureHeight",
		"body": "NPictureHeight",
		"description": "Return the used picture height."
	},
	"NPictureDepth": {
		"prefix": "NPictureDepth",
		"body": "NPictureDepth",
		"description": "Return the used picture depth."
	},
	"NPictureToBitmap(#Picture, BitmapID)": {
		"prefix": "NPictureToBitmap",
		"body": "NPictureToBitmap(${1:#Picture, BitmapID})",
		"description": ""
	},
	"NPictureID": {
		"prefix": "NPictureID",
		"body": "NPictureID",
		"description": "Return the used picture pointer -."
	},
	"NWbToScreen(#Screen)": {
		"prefix": "NWbToScreen",
		"body": "NWbToScreen(${1:#Screen})",
		"description": "Try to find the Workbench Screen -."
	},
	"NFindScreen(#Screen, Name$)": {
		"prefix": "NFindScreen",
		"body": "NFindScreen(${1:#Screen, Name$})",
		"description": "Seek the screen name or take the default public screen -."
	},
	"NScreen(#Screen, Width, Height, Depth, TagList)": {
		"prefix": "NScreen",
		"body": "NScreen(${1:#Screen, Width, Height, Depth, TagList})",
		"description": "Open a new screen -."
	},
	"NSMouseY": {
		"prefix": "NSMouseY",
		"body": "NSMouseY",
		"description": "Return the MouseY Position on the screen."
	},
	"NSMouseX": {
		"prefix": "NSMouseX",
		"body": "NSMouseX",
		"description": "Return the Mouse X Position on the screen."
	},
	"NScreenWidth": {
		"prefix": "NScreenWidth",
		"body": "NScreenWidth",
		"description": "Return the Width of the screen."
	},
	"NScreenHeight": {
		"prefix": "NScreenHeight",
		"body": "NScreenHeight",
		"description": "Return the Height of the screen."
	},
	"NShowScreen": {
		"prefix": "NShowScreen",
		"body": "NShowScreen",
		"description": "Show the screen."
	},
	"NHideScreen": {
		"prefix": "NHideScreen",
		"body": "NHideScreen",
		"description": "Hide the screen -."
	},
	"NUseScreen(#Screen)": {
		"prefix": "NUseScreen",
		"body": "NUseScreen(${1:#Screen})",
		"description": "Set the specified screen as used -."
	},
	"NCloseScreen(#Screen)": {
		"prefix": "NCloseScreen",
		"body": "NCloseScreen(${1:#Screen})",
		"description": "Close the specified screen -."
	},
	"NInitScreen(#NumScreenMax)": {
		"prefix": "NInitScreen",
		"body": "NInitScreen(${1:#NumScreenMax})",
		"description": "Init Screen Environenement -."
	},
	"NScreenID": {
		"prefix": "NScreenID",
		"body": "NScreenID",
		"description": "Return the intuition screen pointer -."
	},
	"NScreenRastPort": {
		"prefix": "NScreenRastPort",
		"body": "NScreenRastPort",
		"description": "Return the used screen rastport pointer -."
	},
	"NViewPort": {
		"prefix": "NViewPort",
		"body": "NViewPort",
		"description": "Return the used screen viewport address -."
	},
	"NObtainBestPen(r, g, b, precision)": {
		"prefix": "NObtainBestPen",
		"body": "NObtainBestPen(${1:r, g, b, precision})",
		"description": "Return the most near colour of the screen -."
	},
	"NReleasePen(Colour Index)": {
		"prefix": "NReleasePen",
		"body": "NReleasePen(${1:Colour Index})",
		"description": "release the pen -."
	},
	"NWBorderTop": {
		"prefix": "NWBorderTop",
		"body": "NWBorderTop",
		"description": "Return the window bar height (with title) -."
	},
	"NWBorderLeft": {
		"prefix": "NWBorderLeft",
		"body": "NWBorderLeft",
		"description": "Return the window border left length -."
	},
	"NWBorderRight": {
		"prefix": "NWBorderRight",
		"body": "NWBorderRight",
		"description": "Return the window border right length -."
	},
	"NWBorderBottom": {
		"prefix": "NWBorderBottom",
		"body": "NWBorderBottom",
		"description": "Return the window border bottom length -."
	},
	"NSBarHeight": {
		"prefix": "NSBarHeight",
		"body": "NSBarHeight",
		"description": "Return the screen bar height -."
	},
	"NSFontHeight": {
		"prefix": "NSFontHeight",
		"body": "NSFontHeight",
		"description": "Return the actual screen font height -."
	},
	"NFindFrontScreen(#Screen)": {
		"prefix": "NFindFrontScreen",
		"body": "NFindFrontScreen(${1:#Screen})",
		"description": "Take the front most screen -."
	},
	"NScreenDepth": {
		"prefix": "NScreenDepth",
		"body": "NScreenDepth",
		"description": "Return the depth of the current screen -."
	},
	"NSortUp(Array(), Start, End)": {
		"prefix": "NSortUp",
		"body": "NSortUp(${1:Array(), Start, End})",
		"description": "Sort the portion of the array."
	},
	"NSortDown(Array(), Start, End)": {
		"prefix": "NSortDown",
		"body": "NSortDown(${1:Array(), Start, End})",
		"description": "Sort the portion of the array."
	},
	"NAsc(String$)": {
		"prefix": "NAsc",
		"body": "NAsc(${1:String$})",
		"description": "Return the first ASCII value of the string$."
	},
	"NLen(String$)": {
		"prefix": "NLen",
		"body": "NLen(${1:String$})",
		"description": "Return the length of the string$."
	},
	"NChr$(Ascii)": {
		"prefix": "NChr$",
		"body": "NChr$(${1:Ascii})",
		"description": ""
	},
	"NTrim$(String$, Value)": {
		"prefix": "NTrim$",
		"body": "NTrim$(${1:String$, Value})",
		"description": ""
	},
	"NRight$(String$, Length)": {
		"prefix": "NRight$",
		"body": "NRight$(${1:String$, Length})",
		"description": ""
	},
	"NLeft$(String$, Length)": {
		"prefix": "NLeft$",
		"body": "NLeft$(${1:String$, Length})",
		"description": ""
	},
	"NUCase$(String$)": {
		"prefix": "NUCase$",
		"body": "NUCase$(${1:String$})",
		"description": ""
	},
	"NLCase$(String$)": {
		"prefix": "NLCase$",
		"body": "NLCase$(${1:String$})",
		"description": ""
	},
	"NMki$(Word)": {
		"prefix": "NMki$",
		"body": "NMki$(${1:Word})",
		"description": ""
	},
	"NMkl$(Long)": {
		"prefix": "NMkl$",
		"body": "NMkl$(${1:Long})",
		"description": ""
	},
	"NCvi(String$)": {
		"prefix": "NCvi",
		"body": "NCvi(${1:String$})",
		"description": ""
	},
	"NCvl(String$)": {
		"prefix": "NCvl",
		"body": "NCvl(${1:String$})",
		"description": ""
	},
	"NInitTagList(#NumMaxTags)": {
		"prefix": "NInitTagList",
		"body": "NInitTagList(${1:#NumMaxTags})",
		"description": "Initialize the Tag lib for use -."
	},
	"NFreeTagList": {
		"prefix": "NFreeTagList",
		"body": "NFreeTagList",
		"description": "Free the memory took by the taglist -."
	},
	"NAddTag(#TAG_ITEM, #TAG_DATA)": {
		"prefix": "NAddTag",
		"body": "NAddTag(${1:#TAG_ITEM, #TAG_DATA})",
		"description": "Add the tag to the current taglist -."
	},
	"NResetTagList #TAG_ITEM, #TAG_DATA)": {
		"prefix": "NResetTagList",
		"body": "NResetTagList ${1:#TAG_ITEM, #TAG_DATA)}",
		"description": "Clear the taglist and add the value -."
	},
	"NTagListID": {
		"prefix": "NTagListID",
		"body": "NTagListID",
		"description": "Return the taglist location -."
	},
	"NChangeTag Position, #TAG_ITEM, #TAG_DATA)": {
		"prefix": "NChangeTag",
		"body": "NChangeTag ${1:Position, #TAG_ITEM, #TAG_DATA)}",
		"description": "change the given the tag value -."
	},
	"NInitToolType(Objects.l, *WBStartup)": {
		"prefix": "NInitToolType",
		"body": "NInitToolType(${1:Objects.l, *WBStartup})",
		"description": ""
	},
	"NReadToolType(#Object.w, IconName$)": {
		"prefix": "NReadToolType",
		"body": "NReadToolType(${1:#Object.w, IconName$})",
		"description": ""
	},
	"NWriteToolType(#Object.w, Array(), IconName$)": {
		"prefix": "NWriteToolType",
		"body": "NWriteToolType(${1:#Object.w, Array(), IconName$})",
		"description": ""
	},
	"NFreeToolType #Object.w": {
		"prefix": "NFreeToolType",
		"body": "NFreeToolType ${1:#Object.w}",
		"description": ""
	},
	"NGetNumberOfToolType(#Object.w)": {
		"prefix": "NGetNumberOfToolType",
		"body": "NGetNumberOfToolType(${1:#Object.w})",
		"description": ""
	},
	"NGetNextToolTypeString(#Object.w)": {
		"prefix": "NGetNextToolTypeString",
		"body": "NGetNextToolTypeString(${1:#Object.w})",
		"description": ""
	},
	"NFindToolType(#Object.w, ToolName$)": {
		"prefix": "NFindToolType",
		"body": "NFindToolType(${1:#Object.w, ToolName$})",
		"description": ""
	},
	"NMatchToolTypeValue(ToolType.l, Value$)": {
		"prefix": "NMatchToolTypeValue",
		"body": "NMatchToolTypeValue(${1:ToolType.l, Value$})",
		"description": ""
	},
	"NCheckToolTypeString(ToolType$, ToolTypeString$)": {
		"prefix": "NCheckToolTypeString",
		"body": "NCheckToolTypeString(${1:ToolType$, ToolTypeString$})",
		"description": ""
	},
	"NWbStartup": {
		"prefix": "NWbStartup",
		"body": "NWbStartup",
		"description": "Allow the program to be start from WB."
	},
	"NWindow(#Window, x, y, Width, Height, TagList)": {
		"prefix": "NWindow",
		"body": "NWindow(${1:#Window, x, y, Width, Height, TagList})",
		"description": "Open a new window -."
	},
	"NWindowEvent": {
		"prefix": "NWindowEvent",
		"body": "NWindowEvent",
		"description": "Return the window events."
	},
	"NBusyPointer( On/Off )": {
		"prefix": "NBusyPointer",
		"body": "NBusyPointer(${1: On/Off })",
		"description": "Change the mouse pointer to busy -."
	},
	"NWaitWindowEvent": {
		"prefix": "NWaitWindowEvent",
		"body": "NWaitWindowEvent",
		"description": "Wait for a window event."
	},
	"NWindowWidth": {
		"prefix": "NWindowWidth",
		"body": "NWindowWidth",
		"description": "Return the window width -."
	},
	"NWindowHeight": {
		"prefix": "NWindowHeight",
		"body": "NWindowHeight",
		"description": "Return the window height -."
	},
	"NWindowX": {
		"prefix": "NWindowX",
		"body": "NWindowX",
		"description": "Return the X window position -."
	},
	"NWindowY": {
		"prefix": "NWindowY",
		"body": "NWindowY",
		"description": "Return the Y window position -."
	},
	"NWMouseX": {
		"prefix": "NWMouseX",
		"body": "NWMouseX",
		"description": "Return the Mouse X position -."
	},
	"NWMouseY": {
		"prefix": "NWMouseY",
		"body": "NWMouseY",
		"description": "Return the Mouse Y position -."
	},
	"NWindowRastPort": {
		"prefix": "NWindowRastPort",
		"body": "NWindowRastPort",
		"description": "Return the window rastport -."
	},
	"NWInnerHeight": {
		"prefix": "NWInnerHeight",
		"body": "NWInnerHeight",
		"description": "Return the window inner height -."
	},
	"NWInnerWidth": {
		"prefix": "NWInnerWidth",
		"body": "NWInnerWidth",
		"description": "Return the window inner width -."
	},
	"NDetachGadgetList": {
		"prefix": "NDetachGadgetList",
		"body": "NDetachGadgetList",
		"description": "Detach the current window's agdgetlist -."
	},
	"NWindowEventID": {
		"prefix": "NWindowEventID",
		"body": "NWindowEventID",
		"description": "Return the window number which has got the last event."
	},
	"NWMove(X,Y)": {
		"prefix": "NWMove",
		"body": "NWMove(${1:X,Y})",
		"description": "Move the window to X-Y -."
	},
	"NWSize(Width,Heigth)": {
		"prefix": "NWSize",
		"body": "NWSize(${1:Width,Heigth})",
		"description": "Size the window to new dimentions -."
	},
	"NUseWindow(#Window)": {
		"prefix": "NUseWindow",
		"body": "NUseWindow(${1:#Window})",
		"description": "Set the specified window as default window -."
	},
	"NActivate": {
		"prefix": "NActivate",
		"body": "NActivate",
		"description": "Activate the used window -."
	},
	"NCloseWindow(#Window)": {
		"prefix": "NCloseWindow",
		"body": "NCloseWindow(${1:#Window})",
		"description": "Close the specified window -."
	},
	"NInitWindow(#MaxNumWindow)": {
		"prefix": "NInitWindow",
		"body": "NInitWindow(${1:#MaxNumWindow})",
		"description": "Init Window environnement -."
	},
	"NWindowID": {
		"prefix": "NWindowID",
		"body": "NWindowID",
		"description": "Return the used window pointer -."
	},
	"NDetachMenu": {
		"prefix": "NDetachMenu",
		"body": "NDetachMenu",
		"description": "Detach the current window menu -."
	},
	"NGadgetCode": {
		"prefix": "NGadgetCode",
		"body": "NGadgetCode",
		"description": "Return the last GadgetCode event..."
	},
	"NEventID": {
		"prefix": "NEventID",
		"body": "NEventID",
		"description": "Return the last EventID value..."
	},
	"NQualifier": {
		"prefix": "NQualifier",
		"body": "NQualifier",
		"description": "Return the last Qualifier event..."
	},
	"NUnPackFile(&SourceFile$, &DestFile$, &Password$)": {
		"prefix": "NUnPackFile",
		"body": "NUnPackFile(${1:&SourceFile$, &DestFile$, &Password$})",
		"description": ""
	},
	"NPackFile(&SourceFile$, &DestFile$, &PackerName$, &Password$)": {
		"prefix": "NPackFile",
		"body": "NPackFile(${1:&SourceFile$, &DestFile$, &PackerName$, &Password$})",
		"description": ""
	},
	"NPackMemToFile(*MemAddr, MemLen, &DestFilename$, &Packer$, &Pass$)": {
		"prefix": "NPackMemToFile",
		"body": "NPackMemToFile(${1:*MemAddr, MemLen, &DestFilename$, &Packer$, &Pass$})",
		"description": ""
	},
	"NUnPackFileToMem(&SourceName, MemType, &Pass$)": {
		"prefix": "NUnPackFileToMem",
		"body": "NUnPackFileToMem(${1:&SourceName, MemType, &Pass$})",
		"description": ""
	},
	"NXpkFileLength": {
		"prefix": "NXpkFileLength",
		"body": "NXpkFileLength",
		"description": "Return the decompressed File Length."
	},
	"NXpkBufferLength": {
		"prefix": "NXpkBufferLength",
		"body": "NXpkBufferLength",
		"description": "Return the allocated buffer length."
	},
	"NPackerInfo(&PackerName$, Efficiency)": {
		"prefix": "NPackerInfo",
		"body": "NPackerInfo(${1:&PackerName$, Efficiency})",
		"description": ""
	},
	"NPackerName": {
		"prefix": "NPackerName",
		"body": "NPackerName",
		"description": "Return the info packer name."
	},
	"NPackerLongName": {
		"prefix": "NPackerLongName",
		"body": "NPackerLongName",
		"description": "Return the info packer long name."
	},
	"NPackerDescription": {
		"prefix": "NPackerDescription",
		"body": "NPackerDescription",
		"description": "Return the info packer description."
	},
	"NScanPackersList": {
		"prefix": "NScanPackersList",
		"body": "NScanPackersList",
		"description": "Scan the packers list..."
	},
	"NGetPackerNumber": {
		"prefix": "NGetPackerNumber",
		"body": "NGetPackerNumber",
		"description": "Return the number of Xpk packers."
	},
	"NGetNextPacker": {
		"prefix": "NGetNextPacker",
		"body": "NGetNextPacker",
		"description": "Return the next packer name."
	},
	"NInitXpk": {
		"prefix": "NInitXpk",
		"body": "NInitXpk",
		"description": "Initialize Xpk Environnement."
	},
	"NUnPackTagList(TagList)": {
		"prefix": "NUnPackTagList",
		"body": "NUnPackTagList(${1:TagList})",
		"description": ""
	},
	"XProtocolHostMon_(io,serbuff,actual,maxsize)": {
		"prefix": "XProtocolHostMon_",
		"body": "XProtocolHostMon_(${1:io,serbuff,actual,maxsize})",
		"description": ""
	},
	"XProtocolUserMon_(io,serbuff,actual,maxsize)": {
		"prefix": "XProtocolUserMon_",
		"body": "XProtocolUserMon_(${1:io,serbuff,actual,maxsize})",
		"description": ""
	},
	"FindTagItem_(tagVal,tagList)": {
		"prefix": "FindTagItem_",
		"body": "FindTagItem_(${1:tagVal,tagList})",
		"description": ""
	},
	"RefreshTagItemClones_(clone,original)": {
		"prefix": "RefreshTagItemClones_",
		"body": "RefreshTagItemClones_(${1:clone,original})",
		"description": ""
	},
	"TagInArray_(tagValue,tagArray)": {
		"prefix": "TagInArray_",
		"body": "TagInArray_(${1:tagValue,tagArray})",
		"description": ""
	},
	"Amiga2Date_(seconds,result)": {
		"prefix": "Amiga2Date_",
		"body": "Amiga2Date_(${1:seconds,result})",
		"description": ""
	},
	"SMult32_(arg1,arg2)": {
		"prefix": "SMult32_",
		"body": "SMult32_(${1:arg1,arg2})",
		"description": ""
	},
	"UMult32_(arg1,arg2)": {
		"prefix": "UMult32_",
		"body": "UMult32_(${1:arg1,arg2})",
		"description": ""
	},
	"SDivMod32_(dividend,divisor)": {
		"prefix": "SDivMod32_",
		"body": "SDivMod32_(${1:dividend,divisor})",
		"description": ""
	},
	"UDivMod32_(dividend,divisor)": {
		"prefix": "UDivMod32_",
		"body": "UDivMod32_(${1:dividend,divisor})",
		"description": ""
	},
	"Stricmp_(string1,string2)": {
		"prefix": "Stricmp_",
		"body": "Stricmp_(${1:string1,string2})",
		"description": ""
	},
	"ApplyTagChanges_(list,changeList)": {
		"prefix": "ApplyTagChanges_",
		"body": "ApplyTagChanges_(${1:list,changeList})",
		"description": ""
	},
	"SMult64_(arg1,arg2)": {
		"prefix": "SMult64_",
		"body": "SMult64_(${1:arg1,arg2})",
		"description": ""
	},
	"UMult64_(arg1,arg2)": {
		"prefix": "UMult64_",
		"body": "UMult64_(${1:arg1,arg2})",
		"description": ""
	},
	"AddNamedObject_(namespace,object)": {
		"prefix": "AddNamedObject_",
		"body": "AddNamedObject_(${1:namespace,object})",
		"description": ""
	},
	"AllocNamedObjectA_(name,tags)": {
		"prefix": "AllocNamedObjectA_",
		"body": "AllocNamedObjectA_(${1:name,tags})",
		"description": ""
	},
	"RemNamedObject_(object,message)": {
		"prefix": "RemNamedObject_",
		"body": "RemNamedObject_(${1:object,message})",
		"description": ""
	},
	"GetUniqueID_": {
		"prefix": "GetUniqueID_",
		"body": "GetUniqueID_",
		"description": ""
	},
	"CreateArgstring_(string,length)": {
		"prefix": "CreateArgstring_",
		"body": "CreateArgstring_(${1:string,length})",
		"description": ""
	},
	"ClearRexxMsg_(msgptr,count)": {
		"prefix": "ClearRexxMsg_",
		"body": "ClearRexxMsg_(${1:msgptr,count})",
		"description": ""
	},
	"WritePotgo_(word,mask)": {
		"prefix": "WritePotgo_",
		"body": "WritePotgo_(${1:word,mask})",
		"description": ""
	},
	"AllocMiscResource_(unitNum,name)": {
		"prefix": "AllocMiscResource_",
		"body": "AllocMiscResource_(${1:unitNum,name})",
		"description": ""
	},
	"SPSincos_(cosResult,parm)": {
		"prefix": "SPSincos_",
		"body": "SPSincos_(${1:cosResult,parm})",
		"description": ""
	},
	"SPPow_(power,arg)": {
		"prefix": "SPPow_",
		"body": "SPPow_(${1:power,arg})",
		"description": ""
	},
	"IEEESPSincos_(cosptr,parm)": {
		"prefix": "IEEESPSincos_",
		"body": "IEEESPSincos_(${1:cosptr,parm})",
		"description": ""
	},
	"IEEESPPow_(exp,arg)": {
		"prefix": "IEEESPPow_",
		"body": "IEEESPPow_(${1:exp,arg})",
		"description": ""
	},
	"IEEESPCmp_(leftParm,rightParm)": {
		"prefix": "IEEESPCmp_",
		"body": "IEEESPCmp_(${1:leftParm,rightParm})",
		"description": ""
	},
	"IEEESPAdd_(leftParm,rightParm)": {
		"prefix": "IEEESPAdd_",
		"body": "IEEESPAdd_(${1:leftParm,rightParm})",
		"description": ""
	},
	"IEEESPSub_(leftParm,rightParm)": {
		"prefix": "IEEESPSub_",
		"body": "IEEESPSub_(${1:leftParm,rightParm})",
		"description": ""
	},
	"IEEESPMul_(leftParm,rightParm)": {
		"prefix": "IEEESPMul_",
		"body": "IEEESPMul_(${1:leftParm,rightParm})",
		"description": ""
	},
	"IEEESPDiv_(dividend,divisor)": {
		"prefix": "IEEESPDiv_",
		"body": "IEEESPDiv_(${1:dividend,divisor})",
		"description": ""
	},
	"IEEEDPAtan_(parm)": {
		"prefix": "IEEEDPAtan_",
		"body": "IEEEDPAtan_(${1:parm})",
		"description": ""
	},
	"IEEEDPSin_(parm)": {
		"prefix": "IEEEDPSin_",
		"body": "IEEEDPSin_(${1:parm})",
		"description": ""
	},
	"IEEEDPCos_(parm)": {
		"prefix": "IEEEDPCos_",
		"body": "IEEEDPCos_(${1:parm})",
		"description": ""
	},
	"IEEEDPTan_(parm)": {
		"prefix": "IEEEDPTan_",
		"body": "IEEEDPTan_(${1:parm})",
		"description": ""
	},
	"IEEEDPSinh_(parm)": {
		"prefix": "IEEEDPSinh_",
		"body": "IEEEDPSinh_(${1:parm})",
		"description": ""
	},
	"IEEEDPCosh_(parm)": {
		"prefix": "IEEEDPCosh_",
		"body": "IEEEDPCosh_(${1:parm})",
		"description": ""
	},
	"IEEEDPTanh_(parm)": {
		"prefix": "IEEEDPTanh_",
		"body": "IEEEDPTanh_(${1:parm})",
		"description": ""
	},
	"IEEEDPExp_(parm)": {
		"prefix": "IEEEDPExp_",
		"body": "IEEEDPExp_(${1:parm})",
		"description": ""
	},
	"IEEEDPLog_(parm)": {
		"prefix": "IEEEDPLog_",
		"body": "IEEEDPLog_(${1:parm})",
		"description": ""
	},
	"IEEEDPPow_(exp,arg)": {
		"prefix": "IEEEDPPow_",
		"body": "IEEEDPPow_(${1:exp,arg})",
		"description": ""
	},
	"IEEEDPSqrt_(parm)": {
		"prefix": "IEEEDPSqrt_",
		"body": "IEEEDPSqrt_(${1:parm})",
		"description": ""
	},
	"IEEEDPTieee_(parm)": {
		"prefix": "IEEEDPTieee_",
		"body": "IEEEDPTieee_(${1:parm})",
		"description": ""
	},
	"IEEEDPAsin_(parm)": {
		"prefix": "IEEEDPAsin_",
		"body": "IEEEDPAsin_(${1:parm})",
		"description": ""
	},
	"IEEEDPAcos_(parm)": {
		"prefix": "IEEEDPAcos_",
		"body": "IEEEDPAcos_(${1:parm})",
		"description": ""
	},
	"IEEEDPLog10_(parm)": {
		"prefix": "IEEEDPLog10_",
		"body": "IEEEDPLog10_(${1:parm})",
		"description": ""
	},
	"IEEEDPFix_(parm)": {
		"prefix": "IEEEDPFix_",
		"body": "IEEEDPFix_(${1:parm})",
		"description": ""
	},
	"IEEEDPCmp_(leftParm,rightParm)": {
		"prefix": "IEEEDPCmp_",
		"body": "IEEEDPCmp_(${1:leftParm,rightParm})",
		"description": ""
	},
	"IEEEDPTst_(parm)": {
		"prefix": "IEEEDPTst_",
		"body": "IEEEDPTst_(${1:parm})",
		"description": ""
	},
	"IEEEDPAbs_(parm)": {
		"prefix": "IEEEDPAbs_",
		"body": "IEEEDPAbs_(${1:parm})",
		"description": ""
	},
	"IEEEDPNeg_(parm)": {
		"prefix": "IEEEDPNeg_",
		"body": "IEEEDPNeg_(${1:parm})",
		"description": ""
	},
	"IEEEDPAdd_(leftParm,rightParm)": {
		"prefix": "IEEEDPAdd_",
		"body": "IEEEDPAdd_(${1:leftParm,rightParm})",
		"description": ""
	},
	"IEEEDPSub_(leftParm,rightParm)": {
		"prefix": "IEEEDPSub_",
		"body": "IEEEDPSub_(${1:leftParm,rightParm})",
		"description": ""
	},
	"IEEEDPMul_(factor1,factor2)": {
		"prefix": "IEEEDPMul_",
		"body": "IEEEDPMul_(${1:factor1,factor2})",
		"description": ""
	},
	"IEEEDPDiv_(dividend,divisor)": {
		"prefix": "IEEEDPDiv_",
		"body": "IEEEDPDiv_(${1:dividend,divisor})",
		"description": ""
	},
	"IEEEDPFloor_(parm)": {
		"prefix": "IEEEDPFloor_",
		"body": "IEEEDPFloor_(${1:parm})",
		"description": ""
	},
	"IEEEDPCeil_(parm)": {
		"prefix": "IEEEDPCeil_",
		"body": "IEEEDPCeil_(${1:parm})",
		"description": ""
	},
	"SPCmp_(leftParm,rightParm)": {
		"prefix": "SPCmp_",
		"body": "SPCmp_(${1:leftParm,rightParm})",
		"description": ""
	},
	"SPAdd_(leftParm,rightParm)": {
		"prefix": "SPAdd_",
		"body": "SPAdd_(${1:leftParm,rightParm})",
		"description": ""
	},
	"SPSub_(leftParm,rightParm)": {
		"prefix": "SPSub_",
		"body": "SPSub_(${1:leftParm,rightParm})",
		"description": ""
	},
	"SPMul_(leftParm,rightParm)": {
		"prefix": "SPMul_",
		"body": "SPMul_(${1:leftParm,rightParm})",
		"description": ""
	},
	"SPDiv_(leftParm,rightParm)": {
		"prefix": "SPDiv_",
		"body": "SPDiv_(${1:leftParm,rightParm})",
		"description": ""
	},
	"ConvToLower_(locale,character)": {
		"prefix": "ConvToLower_",
		"body": "ConvToLower_(${1:locale,character})",
		"description": ""
	},
	"ConvToUpper_(locale,character)": {
		"prefix": "ConvToUpper_",
		"body": "ConvToUpper_(${1:locale,character})",
		"description": ""
	},
	"FormatDate_(locale,template,date,putCharFunc)": {
		"prefix": "FormatDate_",
		"body": "FormatDate_(${1:locale,template,date,putCharFunc})",
		"description": ""
	},
	"FormatString_(locale,string,dataStream,putCharFunc)": {
		"prefix": "FormatString_",
		"body": "FormatString_(${1:locale,string,dataStream,putCharFunc})",
		"description": ""
	},
	"GetLocaleStr_(locale,stringNum)": {
		"prefix": "GetLocaleStr_",
		"body": "GetLocaleStr_(${1:locale,stringNum})",
		"description": ""
	},
	"IsAlNum_(locale,character)": {
		"prefix": "IsAlNum_",
		"body": "IsAlNum_(${1:locale,character})",
		"description": ""
	},
	"IsAlpha_(locale,character)": {
		"prefix": "IsAlpha_",
		"body": "IsAlpha_(${1:locale,character})",
		"description": ""
	},
	"IsCntrl_(locale,character)": {
		"prefix": "IsCntrl_",
		"body": "IsCntrl_(${1:locale,character})",
		"description": ""
	},
	"IsDigit_(locale,character)": {
		"prefix": "IsDigit_",
		"body": "IsDigit_(${1:locale,character})",
		"description": ""
	},
	"IsGraph_(locale,character)": {
		"prefix": "IsGraph_",
		"body": "IsGraph_(${1:locale,character})",
		"description": ""
	},
	"IsLower_(locale,character)": {
		"prefix": "IsLower_",
		"body": "IsLower_(${1:locale,character})",
		"description": ""
	},
	"IsPrint_(locale,character)": {
		"prefix": "IsPrint_",
		"body": "IsPrint_(${1:locale,character})",
		"description": ""
	},
	"IsPunct_(locale,character)": {
		"prefix": "IsPunct_",
		"body": "IsPunct_(${1:locale,character})",
		"description": ""
	},
	"IsSpace_(locale,character)": {
		"prefix": "IsSpace_",
		"body": "IsSpace_(${1:locale,character})",
		"description": ""
	},
	"IsUpper_(locale,character)": {
		"prefix": "IsUpper_",
		"body": "IsUpper_(${1:locale,character})",
		"description": ""
	},
	"IsXDigit_(locale,character)": {
		"prefix": "IsXDigit_",
		"body": "IsXDigit_(${1:locale,character})",
		"description": ""
	},
	"ParseDate_(locale,date,template,getCharFunc)": {
		"prefix": "ParseDate_",
		"body": "ParseDate_(${1:locale,date,template,getCharFunc})",
		"description": ""
	},
	"CreateUpfrontLayer_(li,bm,x0,y0,x1,y1,flags,bm2)": {
		"prefix": "CreateUpfrontLayer_",
		"body": "CreateUpfrontLayer_(${1:li,bm,x0,y0,x1,y1,flags,bm2})",
		"description": ""
	},
	"CreateBehindLayer_(li,bm,x0,y0,x1,y1,flags,bm2)": {
		"prefix": "CreateBehindLayer_",
		"body": "CreateBehindLayer_(${1:li,bm,x0,y0,x1,y1,flags,bm2})",
		"description": ""
	},
	"UpfrontLayer_(dummy,layer)": {
		"prefix": "UpfrontLayer_",
		"body": "UpfrontLayer_(${1:dummy,layer})",
		"description": ""
	},
	"BehindLayer_(dummy,layer)": {
		"prefix": "BehindLayer_",
		"body": "BehindLayer_(${1:dummy,layer})",
		"description": ""
	},
	"MoveLayer_(dummy,layer,dx,dy)": {
		"prefix": "MoveLayer_",
		"body": "MoveLayer_(${1:dummy,layer,dx,dy})",
		"description": ""
	},
	"SizeLayer_(dummy,layer,dx,dy)": {
		"prefix": "SizeLayer_",
		"body": "SizeLayer_(${1:dummy,layer,dx,dy})",
		"description": ""
	},
	"ScrollLayer_(dummy,layer,dx,dy)": {
		"prefix": "ScrollLayer_",
		"body": "ScrollLayer_(${1:dummy,layer,dx,dy})",
		"description": ""
	},
	"EndUpdate_(layer,flag)": {
		"prefix": "EndUpdate_",
		"body": "EndUpdate_(${1:layer,flag})",
		"description": ""
	},
	"DeleteLayer_(dummy,layer)": {
		"prefix": "DeleteLayer_",
		"body": "DeleteLayer_(${1:dummy,layer})",
		"description": ""
	},
	"LockLayer_(dummy,layer)": {
		"prefix": "LockLayer_",
		"body": "LockLayer_(${1:dummy,layer})",
		"description": ""
	},
	"SwapBitsRastPortClipRect_(rp,cr)": {
		"prefix": "SwapBitsRastPortClipRect_",
		"body": "SwapBitsRastPortClipRect_(${1:rp,cr})",
		"description": ""
	},
	"NewLayerInfo_": {
		"prefix": "NewLayerInfo_",
		"body": "NewLayerInfo_",
		"description": ""
	},
	"MoveLayerInFrontOf_(layer_to_move,other_layer)": {
		"prefix": "MoveLayerInFrontOf_",
		"body": "MoveLayerInFrontOf_(${1:layer_to_move,other_layer})",
		"description": ""
	},
	"InstallClipRegion_(layer,region)": {
		"prefix": "InstallClipRegion_",
		"body": "InstallClipRegion_(${1:layer,region})",
		"description": ""
	},
	"InstallLayerHook_(layer,hook)": {
		"prefix": "InstallLayerHook_",
		"body": "InstallLayerHook_(${1:layer,hook})",
		"description": ""
	},
	"InstallLayerInfoHook_(li,hook)": {
		"prefix": "InstallLayerInfoHook_",
		"body": "InstallLayerInfoHook_(${1:li,hook})",
		"description": ""
	},
	"AskKeyMapDefault_": {
		"prefix": "AskKeyMapDefault_",
		"body": "AskKeyMapDefault_",
		"description": ""
	},
	"MapRawKey_(event,buffer,length,keyMap)": {
		"prefix": "MapRawKey_",
		"body": "MapRawKey_(${1:event,buffer,length,keyMap})",
		"description": ""
	},
	"OpenIntuition_": {
		"prefix": "OpenIntuition_",
		"body": "OpenIntuition_",
		"description": ""
	},
	"CloseWorkBench_": {
		"prefix": "CloseWorkBench_",
		"body": "CloseWorkBench_",
		"description": ""
	},
	"CurrentTime_(seconds,micros)": {
		"prefix": "CurrentTime_",
		"body": "CurrentTime_(${1:seconds,micros})",
		"description": ""
	},
	"DoubleClick_(sSeconds,sMicros,cSeconds,cMicros)": {
		"prefix": "DoubleClick_",
		"body": "DoubleClick_(${1:sSeconds,sMicros,cSeconds,cMicros})",
		"description": ""
	},
	"DrawBorder_(rp,border,leftOffset,topOffset)": {
		"prefix": "DrawBorder_",
		"body": "DrawBorder_(${1:rp,border,leftOffset,topOffset})",
		"description": ""
	},
	"DrawImage_(rp,image,leftOffset,topOffset)": {
		"prefix": "DrawImage_",
		"body": "DrawImage_(${1:rp,image,leftOffset,topOffset})",
		"description": ""
	},
	"EndRequest_(requester,window)": {
		"prefix": "EndRequest_",
		"body": "EndRequest_(${1:requester,window})",
		"description": ""
	},
	"GetDefPrefs_(preferences,size)": {
		"prefix": "GetDefPrefs_",
		"body": "GetDefPrefs_(${1:preferences,size})",
		"description": ""
	},
	"GetPrefs_(preferences,size)": {
		"prefix": "GetPrefs_",
		"body": "GetPrefs_(${1:preferences,size})",
		"description": ""
	},
	"ItemAddress_(menuStrip,menuNumber)": {
		"prefix": "ItemAddress_",
		"body": "ItemAddress_(${1:menuStrip,menuNumber})",
		"description": ""
	},
	"ModifyIDCMP_(window,flags)": {
		"prefix": "ModifyIDCMP_",
		"body": "ModifyIDCMP_(${1:window,flags})",
		"description": ""
	},
	"ModifyProp_(gadget,window,requester,flags,horizPot,vertPot,horizBody,vertBody)": {
		"prefix": "ModifyProp_",
		"body": "ModifyProp_(${1:gadget,window,requester,flags,horizPot,vertPot,horizBody,vertBody})",
		"description": ""
	},
	"OffMenu_(window,menuNumber)": {
		"prefix": "OffMenu_",
		"body": "OffMenu_(${1:window,menuNumber})",
		"description": ""
	},
	"OnMenu_(window,menuNumber)": {
		"prefix": "OnMenu_",
		"body": "OnMenu_(${1:window,menuNumber})",
		"description": ""
	},
	"OpenWorkBench_": {
		"prefix": "OpenWorkBench_",
		"body": "OpenWorkBench_",
		"description": ""
	},
	"PrintIText_(rp,iText,left,top)": {
		"prefix": "PrintIText_",
		"body": "PrintIText_(${1:rp,iText,left,top})",
		"description": ""
	},
	"RemoveGadget_(window,gadget)": {
		"prefix": "RemoveGadget_",
		"body": "RemoveGadget_(${1:window,gadget})",
		"description": ""
	},
	"ReportMouse_(flag,window)": {
		"prefix": "ReportMouse_",
		"body": "ReportMouse_(${1:flag,window})",
		"description": ""
	},
	"Request_(requester,window)": {
		"prefix": "Request_",
		"body": "Request_(${1:requester,window})",
		"description": ""
	},
	"SetDMRequest_(window,requester)": {
		"prefix": "SetDMRequest_",
		"body": "SetDMRequest_(${1:window,requester})",
		"description": ""
	},
	"SetMenuStrip_(window,menu)": {
		"prefix": "SetMenuStrip_",
		"body": "SetMenuStrip_(${1:window,menu})",
		"description": ""
	},
	"SetPointer_(window,pointer,height,width,xOffset,yOffset)": {
		"prefix": "SetPointer_",
		"body": "SetPointer_(${1:window,pointer,height,width,xOffset,yOffset})",
		"description": ""
	},
	"ShowTitle_(screen,showIt)": {
		"prefix": "ShowTitle_",
		"body": "ShowTitle_(${1:screen,showIt})",
		"description": ""
	},
	"ViewAddress_": {
		"prefix": "ViewAddress_",
		"body": "ViewAddress_",
		"description": ""
	},
	"WBenchToBack_": {
		"prefix": "WBenchToBack_",
		"body": "WBenchToBack_",
		"description": ""
	},
	"WBenchToFront_": {
		"prefix": "WBenchToFront_",
		"body": "WBenchToFront_",
		"description": ""
	},
	"AutoRequest_(window,body,posText,negText,pFlag,nFlag,width,height)": {
		"prefix": "AutoRequest_",
		"body": "AutoRequest_(${1:window,body,posText,negText,pFlag,nFlag,width,height})",
		"description": ""
	},
	"EndRefresh_(window,complete)": {
		"prefix": "EndRefresh_",
		"body": "EndRefresh_(${1:window,complete})",
		"description": ""
	},
	"RemakeDisplay_": {
		"prefix": "RemakeDisplay_",
		"body": "RemakeDisplay_",
		"description": ""
	},
	"RethinkDisplay_": {
		"prefix": "RethinkDisplay_",
		"body": "RethinkDisplay_",
		"description": ""
	},
	"FreeRemember_(rememberKey,reallyForget)": {
		"prefix": "FreeRemember_",
		"body": "FreeRemember_(${1:rememberKey,reallyForget})",
		"description": ""
	},
	"GetScreenData_(buffer,size,type,screen)": {
		"prefix": "GetScreenData_",
		"body": "GetScreenData_(${1:buffer,size,type,screen})",
		"description": ""
	},
	"RefreshGList_(gadgets,window,requester,numGad)": {
		"prefix": "RefreshGList_",
		"body": "RefreshGList_(${1:gadgets,window,requester,numGad})",
		"description": ""
	},
	"MoveWindowInFrontOf_(window,behindWindow)": {
		"prefix": "MoveWindowInFrontOf_",
		"body": "MoveWindowInFrontOf_(${1:window,behindWindow})",
		"description": ""
	},
	"SetMouseQueue_(window,queueLength)": {
		"prefix": "SetMouseQueue_",
		"body": "SetMouseQueue_(${1:window,queueLength})",
		"description": ""
	},
	"UnlockPubScreen_(name,screen)": {
		"prefix": "UnlockPubScreen_",
		"body": "UnlockPubScreen_(${1:name,screen})",
		"description": ""
	},
	"LockPubScreenList_": {
		"prefix": "LockPubScreenList_",
		"body": "LockPubScreenList_",
		"description": ""
	},
	"UnlockPubScreenList_": {
		"prefix": "UnlockPubScreenList_",
		"body": "UnlockPubScreenList_",
		"description": ""
	},
	"NextPubScreen_(screen,namebuf)": {
		"prefix": "NextPubScreen_",
		"body": "NextPubScreen_(${1:screen,namebuf})",
		"description": ""
	},
	"PubScreenStatus_(screen,statusFlags)": {
		"prefix": "PubScreenStatus_",
		"body": "PubScreenStatus_(${1:screen,statusFlags})",
		"description": ""
	},
	"EasyRequestArgs_(window,easyStruct,idcmpPtr,args)": {
		"prefix": "EasyRequestArgs_",
		"body": "EasyRequestArgs_(${1:window,easyStruct,idcmpPtr,args})",
		"description": ""
	},
	"BuildEasyRequestArgs_(window,easyStruct,idcmp,args)": {
		"prefix": "BuildEasyRequestArgs_",
		"body": "BuildEasyRequestArgs_(${1:window,easyStruct,idcmp,args})",
		"description": ""
	},
	"OpenWindowTagList_(newWindow,tagList)": {
		"prefix": "OpenWindowTagList_",
		"body": "OpenWindowTagList_(${1:newWindow,tagList})",
		"description": ""
	},
	"OpenScreenTagList_(newScreen,tagList)": {
		"prefix": "OpenScreenTagList_",
		"body": "OpenScreenTagList_(${1:newScreen,tagList})",
		"description": ""
	},
	"DrawImageState_(rp,image,leftOffset,topOffset,state,drawInfo)": {
		"prefix": "DrawImageState_",
		"body": "DrawImageState_(${1:rp,image,leftOffset,topOffset,state,drawInfo})",
		"description": ""
	},
	"PointInImage_(point,image)": {
		"prefix": "PointInImage_",
		"body": "PointInImage_(${1:point,image})",
		"description": ""
	},
	"EraseImage_(rp,image,leftOffset,topOffset)": {
		"prefix": "EraseImage_",
		"body": "EraseImage_(${1:rp,image,leftOffset,topOffset})",
		"description": ""
	},
	"SetAttrsA_(object,tagList)": {
		"prefix": "SetAttrsA_",
		"body": "SetAttrsA_(${1:object,tagList})",
		"description": ""
	},
	"SetGadgetAttrsA_(gadget,window,requester,tagList)": {
		"prefix": "SetGadgetAttrsA_",
		"body": "SetGadgetAttrsA_(${1:gadget,window,requester,tagList})",
		"description": ""
	},
	"FreeScreenDrawInfo_(screen,drawInfo)": {
		"prefix": "FreeScreenDrawInfo_",
		"body": "FreeScreenDrawInfo_(${1:screen,drawInfo})",
		"description": ""
	},
	"ResetMenuStrip_(window,menu)": {
		"prefix": "ResetMenuStrip_",
		"body": "ResetMenuStrip_(${1:window,menu})",
		"description": ""
	},
	"FreeScreenBuffer_(sc,sb)": {
		"prefix": "FreeScreenBuffer_",
		"body": "FreeScreenBuffer_(${1:sc,sb})",
		"description": ""
	},
	"ChangeScreenBuffer_(sc,sb)": {
		"prefix": "ChangeScreenBuffer_",
		"body": "ChangeScreenBuffer_(${1:sc,sb})",
		"description": ""
	},
	"ScreenPosition_(screen,flags,x1,y1,x2,y2)": {
		"prefix": "ScreenPosition_",
		"body": "ScreenPosition_(${1:screen,flags,x1,y1,x2,y2})",
		"description": ""
	},
	"LendMenus_(fromwindow,towindow)": {
		"prefix": "LendMenus_",
		"body": "LendMenus_(${1:fromwindow,towindow})",
		"description": ""
	},
	"DoGadgetMethodA_(gad,win,req,message)": {
		"prefix": "DoGadgetMethodA_",
		"body": "DoGadgetMethodA_(${1:gad,win,req,message})",
		"description": ""
	},
	"SetWindowPointerA_(win,taglist)": {
		"prefix": "SetWindowPointerA_",
		"body": "SetWindowPointerA_(${1:win,taglist})",
		"description": ""
	},
	"TimedDisplayAlert_(alertNumber,string,height,time)": {
		"prefix": "TimedDisplayAlert_",
		"body": "TimedDisplayAlert_(${1:alertNumber,string,height,time})",
		"description": ""
	},
	"HelpControl_(win,flags)": {
		"prefix": "HelpControl_",
		"body": "HelpControl_(${1:win,flags})",
		"description": ""
	},
	"AllocIFF_": {
		"prefix": "AllocIFF_",
		"body": "AllocIFF_",
		"description": ""
	},
	"OpenIFF_(iff,rwMode)": {
		"prefix": "OpenIFF_",
		"body": "OpenIFF_(${1:iff,rwMode})",
		"description": ""
	},
	"ParseIFF_(iff,control)": {
		"prefix": "ParseIFF_",
		"body": "ParseIFF_(${1:iff,control})",
		"description": ""
	},
	"ReadChunkRecords_(iff,buf,bytesPerRecord,numRecords)": {
		"prefix": "ReadChunkRecords_",
		"body": "ReadChunkRecords_(${1:iff,buf,bytesPerRecord,numRecords})",
		"description": ""
	},
	"WriteChunkRecords_(iff,buf,bytesPerRecord,numRecords)": {
		"prefix": "WriteChunkRecords_",
		"body": "WriteChunkRecords_(${1:iff,buf,bytesPerRecord,numRecords})",
		"description": ""
	},
	"PushChunk_(iff,type,id,size)": {
		"prefix": "PushChunk_",
		"body": "PushChunk_(${1:iff,type,id,size})",
		"description": ""
	},
	"EntryHandler_(iff,type,id,position,handler,object)": {
		"prefix": "EntryHandler_",
		"body": "EntryHandler_(${1:iff,type,id,position,handler,object})",
		"description": ""
	},
	"ExitHandler_(iff,type,id,position,handler,object)": {
		"prefix": "ExitHandler_",
		"body": "ExitHandler_(${1:iff,type,id,position,handler,object})",
		"description": ""
	},
	"AllocLocalItem_(type,id,ident,dataSize)": {
		"prefix": "AllocLocalItem_",
		"body": "AllocLocalItem_(${1:type,id,ident,dataSize})",
		"description": ""
	},
	"SetLocalItemPurge_(localItem,purgeHook)": {
		"prefix": "SetLocalItemPurge_",
		"body": "SetLocalItemPurge_(${1:localItem,purgeHook})",
		"description": ""
	},
	"FindLocalItem_(iff,type,id,ident)": {
		"prefix": "FindLocalItem_",
		"body": "FindLocalItem_(${1:iff,type,id,ident})",
		"description": ""
	},
	"IDtoStr_(id,buf)": {
		"prefix": "IDtoStr_",
		"body": "IDtoStr_(${1:id,buf})",
		"description": ""
	},
	"PutIcon_(name,icon)": {
		"prefix": "PutIcon_",
		"body": "PutIcon_(${1:name,icon})",
		"description": ""
	},
	"PutDiskObject_(name,diskobj)": {
		"prefix": "PutDiskObject_",
		"body": "PutDiskObject_(${1:name,diskobj})",
		"description": ""
	},
	"FindToolType_(toolTypeArray,typeName)": {
		"prefix": "FindToolType_",
		"body": "FindToolType_(${1:toolTypeArray,typeName})",
		"description": ""
	},
	"MatchToolValue_(typeString,value)": {
		"prefix": "MatchToolValue_",
		"body": "MatchToolValue_(${1:typeString,value})",
		"description": ""
	},
	"BumpRevision_(newname,oldname)": {
		"prefix": "BumpRevision_",
		"body": "BumpRevision_(${1:newname,oldname})",
		"description": ""
	},
	"ExtendFont_(font,fontTags)": {
		"prefix": "ExtendFont_",
		"body": "ExtendFont_(${1:font,fontTags})",
		"description": ""
	},
	"CalcIVG_(v,vp)": {
		"prefix": "CalcIVG_",
		"body": "CalcIVG_(${1:v,vp})",
		"description": ""
	},
	"AttachPalExtra_(cm,vp)": {
		"prefix": "AttachPalExtra_",
		"body": "AttachPalExtra_(${1:cm,vp})",
		"description": ""
	},
	"GfxInternal3_": {
		"prefix": "GfxInternal3_",
		"body": "GfxInternal3_",
		"description": ""
	},
	"LoadRGB32_(vp,table)": {
		"prefix": "LoadRGB32_",
		"body": "LoadRGB32_(${1:vp,table})",
		"description": ""
	},
	"SetABPenDrMd_(rp,apen,bpen,drawmode)": {
		"prefix": "SetABPenDrMd_",
		"body": "SetABPenDrMd_(${1:rp,apen,bpen,drawmode})",
		"description": ""
	},
	"GetRGB32_(cm,firstcolor,ncolors,table)": {
		"prefix": "GetRGB32_",
		"body": "GetRGB32_(${1:cm,firstcolor,ncolors,table})",
		"description": ""
	},
	"GfxSpare1_": {
		"prefix": "GfxSpare1_",
		"body": "GfxSpare1_",
		"description": ""
	},
	"GetExtSpriteA_(ss,tags)": {
		"prefix": "GetExtSpriteA_",
		"body": "GetExtSpriteA_(${1:ss,tags})",
		"description": ""
	},
	"ReleasePen_(cm,n)": {
		"prefix": "ReleasePen_",
		"body": "ReleasePen_(${1:cm,n})",
		"description": ""
	},
	"ObtainPen_(cm,n,r,g,b,f)": {
		"prefix": "ObtainPen_",
		"body": "ObtainPen_(${1:cm,n,r,g,b,f})",
		"description": ""
	},
	"GetBitMapAttr_(bm,attrnum)": {
		"prefix": "GetBitMapAttr_",
		"body": "GetBitMapAttr_(${1:bm,attrnum})",
		"description": ""
	},
	"SetOutlinePen_(rp,pen)": {
		"prefix": "SetOutlinePen_",
		"body": "SetOutlinePen_(${1:rp,pen})",
		"description": ""
	},
	"SetWriteMask_(rp,msk)": {
		"prefix": "SetWriteMask_",
		"body": "SetWriteMask_(${1:rp,msk})",
		"description": ""
	},
	"SetMaxPen_(rp,maxpen)": {
		"prefix": "SetMaxPen_",
		"body": "SetMaxPen_(${1:rp,maxpen})",
		"description": ""
	},
	"GfxSpare2_": {
		"prefix": "GfxSpare2_",
		"body": "GfxSpare2_",
		"description": ""
	},
	"AllocSpriteDataA_(bm,tags)": {
		"prefix": "AllocSpriteDataA_",
		"body": "AllocSpriteDataA_(${1:bm,tags})",
		"description": ""
	},
	"ChangeExtSpriteA_(vp,oldsprite,newsprite,tags)": {
		"prefix": "ChangeExtSpriteA_",
		"body": "ChangeExtSpriteA_(${1:vp,oldsprite,newsprite,tags})",
		"description": ""
	},
	"SetRPAttrsA_(rp,tags)": {
		"prefix": "SetRPAttrsA_",
		"body": "SetRPAttrsA_(${1:rp,tags})",
		"description": ""
	},
	"GetRPAttrsA_(rp,tags)": {
		"prefix": "GetRPAttrsA_",
		"body": "GetRPAttrsA_(${1:rp,tags})",
		"description": ""
	},
	"BltTemplate_(source,xSrc,srcMod,destRP,xDest,yDest,xSize,ySize)": {
		"prefix": "BltTemplate_",
		"body": "BltTemplate_(${1:source,xSrc,srcMod,destRP,xDest,yDest,xSize,ySize})",
		"description": ""
	},
	"SetFont_(rp,textFont)": {
		"prefix": "SetFont_",
		"body": "SetFont_(${1:rp,textFont})",
		"description": ""
	},
	"AddBob_(bob,rp)": {
		"prefix": "AddBob_",
		"body": "AddBob_(${1:bob,rp})",
		"description": ""
	},
	"AddVSprite_(vSprite,rp)": {
		"prefix": "AddVSprite_",
		"body": "AddVSprite_(${1:vSprite,rp})",
		"description": ""
	},
	"DrawGList_(rp,vp)": {
		"prefix": "DrawGList_",
		"body": "DrawGList_(${1:rp,vp})",
		"description": ""
	},
	"Animate_(anKey,rp)": {
		"prefix": "Animate_",
		"body": "Animate_(${1:anKey,rp})",
		"description": ""
	},
	"MakeVPort_(view,vp)": {
		"prefix": "MakeVPort_",
		"body": "MakeVPort_(${1:view,vp})",
		"description": ""
	},
	"WaitBlit_": {
		"prefix": "WaitBlit_",
		"body": "WaitBlit_",
		"description": ""
	},
	"SetRast_(rp,pen)": {
		"prefix": "SetRast_",
		"body": "SetRast_(${1:rp,pen})",
		"description": ""
	},
	"WaitTOF_": {
		"prefix": "WaitTOF_",
		"body": "WaitTOF_",
		"description": ""
	},
	"Flood_(rp,mode,x,y)": {
		"prefix": "Flood_",
		"body": "Flood_(${1:rp,mode,x,y})",
		"description": ""
	},
	"SetAPen_(rp,pen)": {
		"prefix": "SetAPen_",
		"body": "SetAPen_(${1:rp,pen})",
		"description": ""
	},
	"SetBPen_(rp,pen)": {
		"prefix": "SetBPen_",
		"body": "SetBPen_(${1:rp,pen})",
		"description": ""
	},
	"SetDrMd_(rp,drawMode)": {
		"prefix": "SetDrMd_",
		"body": "SetDrMd_(${1:rp,drawMode})",
		"description": ""
	},
	"VBeamPos_": {
		"prefix": "VBeamPos_",
		"body": "VBeamPos_",
		"description": ""
	},
	"InitBitMap_(bitMap,depth,width,height)": {
		"prefix": "InitBitMap_",
		"body": "InitBitMap_(${1:bitMap,depth,width,height})",
		"description": ""
	},
	"GetSprite_(sprite,num)": {
		"prefix": "GetSprite_",
		"body": "GetSprite_(${1:sprite,num})",
		"description": ""
	},
	"MoveSprite_(vp,sprite,x,y)": {
		"prefix": "MoveSprite_",
		"body": "MoveSprite_(${1:vp,sprite,x,y})",
		"description": ""
	},
	"OwnBlitter_": {
		"prefix": "OwnBlitter_",
		"body": "OwnBlitter_",
		"description": ""
	},
	"DisownBlitter_": {
		"prefix": "DisownBlitter_",
		"body": "DisownBlitter_",
		"description": ""
	},
	"AskFont_(rp,textAttr)": {
		"prefix": "AskFont_",
		"body": "AskFont_(${1:rp,textAttr})",
		"description": ""
	},
	"AllocRaster_(width,height)": {
		"prefix": "AllocRaster_",
		"body": "AllocRaster_(${1:width,height})",
		"description": ""
	},
	"AndRectRegion_(region,rectangle)": {
		"prefix": "AndRectRegion_",
		"body": "AndRectRegion_(${1:region,rectangle})",
		"description": ""
	},
	"OrRectRegion_(region,rectangle)": {
		"prefix": "OrRectRegion_",
		"body": "OrRectRegion_(${1:region,rectangle})",
		"description": ""
	},
	"NewRegion_": {
		"prefix": "NewRegion_",
		"body": "NewRegion_",
		"description": ""
	},
	"ClearRectRegion_(region,rectangle)": {
		"prefix": "ClearRectRegion_",
		"body": "ClearRectRegion_(${1:region,rectangle})",
		"description": ""
	},
	"XorRectRegion_(region,rectangle)": {
		"prefix": "XorRectRegion_",
		"body": "XorRectRegion_(${1:region,rectangle})",
		"description": ""
	},
	"GetRGB4_(colorMap,entry)": {
		"prefix": "GetRGB4_",
		"body": "GetRGB4_(${1:colorMap,entry})",
		"description": ""
	},
	"UCopperListInit_(uCopList,n)": {
		"prefix": "UCopperListInit_",
		"body": "UCopperListInit_(${1:uCopList,n})",
		"description": ""
	},
	"OrRegionRegion_(srcRegion,destRegion)": {
		"prefix": "OrRegionRegion_",
		"body": "OrRegionRegion_(${1:srcRegion,destRegion})",
		"description": ""
	},
	"XorRegionRegion_(srcRegion,destRegion)": {
		"prefix": "XorRegionRegion_",
		"body": "XorRegionRegion_(${1:srcRegion,destRegion})",
		"description": ""
	},
	"AndRegionRegion_(srcRegion,destRegion)": {
		"prefix": "AndRegionRegion_",
		"body": "AndRegionRegion_(${1:srcRegion,destRegion})",
		"description": ""
	},
	"BltMaskBitMapRastPort_(srcBitMap,xSrc,ySrc,destRP,xDest,yDest,xSize,ySize,minterm,bltMask)": {
		"prefix": "BltMaskBitMapRastPort_",
		"body": "BltMaskBitMapRastPort_(${1:srcBitMap,xSrc,ySrc,destRP,xDest,yDest,xSize,ySize,minterm,bltMask})",
		"description": ""
	},
	"GfxInternal1_": {
		"prefix": "GfxInternal1_",
		"body": "GfxInternal1_",
		"description": ""
	},
	"GfxInternal2_": {
		"prefix": "GfxInternal2_",
		"body": "GfxInternal2_",
		"description": ""
	},
	"GfxAssociate_(associateNode,gfxNodePtr)": {
		"prefix": "GfxAssociate_",
		"body": "GfxAssociate_(${1:associateNode,gfxNodePtr})",
		"description": ""
	},
	"TextExtent_(rp,string,count,textExtent)": {
		"prefix": "TextExtent_",
		"body": "TextExtent_(${1:rp,string,count,textExtent})",
		"description": ""
	},
	"TextFit_(rp,string,strLen,textExtent,constrainingExtent,strDirection,constrainingBitWidth,constrainingBitHeight)": {
		"prefix": "TextFit_",
		"body": "TextFit_(${1:rp,string,strLen,textExtent,constrainingExtent,strDirection,constrainingBitWidth,constrainingBitHeight})",
		"description": ""
	},
	"VideoControl_(colorMap,tagarray)": {
		"prefix": "VideoControl_",
		"body": "VideoControl_(${1:colorMap,tagarray})",
		"description": ""
	},
	"OpenMonitor_(monitorName,displayID)": {
		"prefix": "OpenMonitor_",
		"body": "OpenMonitor_(${1:monitorName,displayID})",
		"description": ""
	},
	"FontExtent_(font,fontExtent)": {
		"prefix": "FontExtent_",
		"body": "FontExtent_(${1:font,fontExtent})",
		"description": ""
	},
	"ReadPixelLine8_(rp,xstart,ystart,width,array,tempRP)": {
		"prefix": "ReadPixelLine8_",
		"body": "ReadPixelLine8_(${1:rp,xstart,ystart,width,array,tempRP})",
		"description": ""
	},
	"WritePixelLine8_(rp,xstart,ystart,width,array,tempRP)": {
		"prefix": "WritePixelLine8_",
		"body": "WritePixelLine8_(${1:rp,xstart,ystart,width,array,tempRP})",
		"description": ""
	},
	"CreateGadgetA_(kind,gad,ng,taglist)": {
		"prefix": "CreateGadgetA_",
		"body": "CreateGadgetA_(${1:kind,gad,ng,taglist})",
		"description": ""
	},
	"GT_SetGadgetAttrsA_(gad,win,req,taglist)": {
		"prefix": "GT_SetGadgetAttrsA_",
		"body": "GT_SetGadgetAttrsA_(${1:gad,win,req,taglist})",
		"description": ""
	},
	"CreateMenusA_(newmenu,taglist)": {
		"prefix": "CreateMenusA_",
		"body": "CreateMenusA_(${1:newmenu,taglist})",
		"description": ""
	},
	"GT_RefreshWindow_(win,req)": {
		"prefix": "GT_RefreshWindow_",
		"body": "GT_RefreshWindow_(${1:win,req})",
		"description": ""
	},
	"GT_EndRefresh_(win,complete)": {
		"prefix": "GT_EndRefresh_",
		"body": "GT_EndRefresh_(${1:win,complete})",
		"description": ""
	},
	"DrawBevelBoxA_(rport,left,top,width,height,taglist)": {
		"prefix": "DrawBevelBoxA_",
		"body": "DrawBevelBoxA_(${1:rport,left,top,width,height,taglist})",
		"description": ""
	},
	"GetVisualInfoA_(screen,taglist)": {
		"prefix": "GetVisualInfoA_",
		"body": "GetVisualInfoA_(${1:screen,taglist})",
		"description": ""
	},
	"GT_GetGadgetAttrsA_(gad,win,req,taglist)": {
		"prefix": "GT_GetGadgetAttrsA_",
		"body": "GT_GetGadgetAttrsA_(${1:gad,win,req,taglist})",
		"description": ""
	},
	"AddBootNode_(bootPri,flags,deviceNode,configDev)": {
		"prefix": "AddBootNode_",
		"body": "AddBootNode_(${1:bootPri,flags,deviceNode,configDev})",
		"description": ""
	},
	"AllocConfigDev_": {
		"prefix": "AllocConfigDev_",
		"body": "AllocConfigDev_",
		"description": ""
	},
	"AllocExpansionMem_(numSlots,slotAlign)": {
		"prefix": "AllocExpansionMem_",
		"body": "AllocExpansionMem_(${1:numSlots,slotAlign})",
		"description": ""
	},
	"ConfigBoard_(board,configDev)": {
		"prefix": "ConfigBoard_",
		"body": "ConfigBoard_(${1:board,configDev})",
		"description": ""
	},
	"FreeBoardMem_(startSlot,slotSpec)": {
		"prefix": "FreeBoardMem_",
		"body": "FreeBoardMem_(${1:startSlot,slotSpec})",
		"description": ""
	},
	"FreeExpansionMem_(startSlot,numSlots)": {
		"prefix": "FreeExpansionMem_",
		"body": "FreeExpansionMem_(${1:startSlot,numSlots})",
		"description": ""
	},
	"ReadExpansionByte_(board,offset)": {
		"prefix": "ReadExpansionByte_",
		"body": "ReadExpansionByte_(${1:board,offset})",
		"description": ""
	},
	"ReadExpansionRom_(board,configDev)": {
		"prefix": "ReadExpansionRom_",
		"body": "ReadExpansionRom_(${1:board,configDev})",
		"description": ""
	},
	"ObtainConfigBinding_": {
		"prefix": "ObtainConfigBinding_",
		"body": "ObtainConfigBinding_",
		"description": ""
	},
	"ReleaseConfigBinding_": {
		"prefix": "ReleaseConfigBinding_",
		"body": "ReleaseConfigBinding_",
		"description": ""
	},
	"SetCurrentBinding_(currentBinding,bindingSize)": {
		"prefix": "SetCurrentBinding_",
		"body": "SetCurrentBinding_(${1:currentBinding,bindingSize})",
		"description": ""
	},
	"GetCurrentBinding_(currentBinding,bindingSize)": {
		"prefix": "GetCurrentBinding_",
		"body": "GetCurrentBinding_(${1:currentBinding,bindingSize})",
		"description": ""
	},
	"InitCode_(startClass,version)": {
		"prefix": "InitCode_",
		"body": "InitCode_(${1:startClass,version})",
		"description": ""
	},
	"InitResident_(resident,segList)": {
		"prefix": "InitResident_",
		"body": "InitResident_(${1:resident,segList})",
		"description": ""
	},
	"Disable_": {
		"prefix": "Disable_",
		"body": "Disable_",
		"description": ""
	},
	"Enable_": {
		"prefix": "Enable_",
		"body": "Enable_",
		"description": ""
	},
	"Forbid_": {
		"prefix": "Forbid_",
		"body": "Forbid_",
		"description": ""
	},
	"Permit_": {
		"prefix": "Permit_",
		"body": "Permit_",
		"description": ""
	},
	"SetSR_(newSR,mask)": {
		"prefix": "SetSR_",
		"body": "SetSR_(${1:newSR,mask})",
		"description": ""
	},
	"SuperState_": {
		"prefix": "SuperState_",
		"body": "SuperState_",
		"description": ""
	},
	"SetIntVector_(intNumber,interrupt)": {
		"prefix": "SetIntVector_",
		"body": "SetIntVector_(${1:intNumber,interrupt})",
		"description": ""
	},
	"AddIntServer_(intNumber,interrupt)": {
		"prefix": "AddIntServer_",
		"body": "AddIntServer_(${1:intNumber,interrupt})",
		"description": ""
	},
	"RemIntServer_(intNumber,interrupt)": {
		"prefix": "RemIntServer_",
		"body": "RemIntServer_(${1:intNumber,interrupt})",
		"description": ""
	},
	"Allocate_(freeList,byteSize)": {
		"prefix": "Allocate_",
		"body": "Allocate_(${1:freeList,byteSize})",
		"description": ""
	},
	"AllocMem_(byteSize,requirements)": {
		"prefix": "AllocMem_",
		"body": "AllocMem_(${1:byteSize,requirements})",
		"description": ""
	},
	"AllocAbs_(byteSize,location)": {
		"prefix": "AllocAbs_",
		"body": "AllocAbs_(${1:byteSize,location})",
		"description": ""
	},
	"FreeMem_(memoryBlock,byteSize)": {
		"prefix": "FreeMem_",
		"body": "FreeMem_(${1:memoryBlock,byteSize})",
		"description": ""
	},
	"AddHead_(list,node)": {
		"prefix": "AddHead_",
		"body": "AddHead_(${1:list,node})",
		"description": ""
	},
	"AddTail_(list,node)": {
		"prefix": "AddTail_",
		"body": "AddTail_(${1:list,node})",
		"description": ""
	},
	"Enqueue_(list,node)": {
		"prefix": "Enqueue_",
		"body": "Enqueue_(${1:list,node})",
		"description": ""
	},
	"FindName_(list,name)": {
		"prefix": "FindName_",
		"body": "FindName_(${1:list,name})",
		"description": ""
	},
	"SetTaskPri_(task,priority)": {
		"prefix": "SetTaskPri_",
		"body": "SetTaskPri_(${1:task,priority})",
		"description": ""
	},
	"SetSignal_(newSignals,signalSet)": {
		"prefix": "SetSignal_",
		"body": "SetSignal_(${1:newSignals,signalSet})",
		"description": ""
	},
	"SetExcept_(newSignals,signalSet)": {
		"prefix": "SetExcept_",
		"body": "SetExcept_(${1:newSignals,signalSet})",
		"description": ""
	},
	"Signal_(task,signalSet)": {
		"prefix": "Signal_",
		"body": "Signal_(${1:task,signalSet})",
		"description": ""
	},
	"PutMsg_(port,message)": {
		"prefix": "PutMsg_",
		"body": "PutMsg_(${1:port,message})",
		"description": ""
	},
	"OpenDevice_(devName,unit,ioRequest,flags)": {
		"prefix": "OpenDevice_",
		"body": "OpenDevice_(${1:devName,unit,ioRequest,flags})",
		"description": ""
	},
	"RawDoFmt_(formatString,dataStream,putChProc,putChData)": {
		"prefix": "RawDoFmt_",
		"body": "RawDoFmt_(${1:formatString,dataStream,putChProc,putChData})",
		"description": ""
	},
	"GetCC_": {
		"prefix": "GetCC_",
		"body": "GetCC_",
		"description": ""
	},
	"Procure_(sigSem,bidMsg)": {
		"prefix": "Procure_",
		"body": "Procure_(${1:sigSem,bidMsg})",
		"description": ""
	},
	"Vacate_(sigSem,bidMsg)": {
		"prefix": "Vacate_",
		"body": "Vacate_(${1:sigSem,bidMsg})",
		"description": ""
	},
	"OpenLibrary_(libName,version)": {
		"prefix": "OpenLibrary_",
		"body": "OpenLibrary_(${1:libName,version})",
		"description": ""
	},
	"SumKickData_": {
		"prefix": "SumKickData_",
		"body": "SumKickData_",
		"description": ""
	},
	"CacheClearU_": {
		"prefix": "CacheClearU_",
		"body": "CacheClearU_",
		"description": ""
	},
	"CacheControl_(cacheBits,cacheMask)": {
		"prefix": "CacheControl_",
		"body": "CacheControl_(${1:cacheBits,cacheMask})",
		"description": ""
	},
	"CreateIORequest_(port,size)": {
		"prefix": "CreateIORequest_",
		"body": "CreateIORequest_(${1:port,size})",
		"description": ""
	},
	"CreateMsgPort_": {
		"prefix": "CreateMsgPort_",
		"body": "CreateMsgPort_",
		"description": ""
	},
	"AllocVec_(byteSize,requirements)": {
		"prefix": "AllocVec_",
		"body": "AllocVec_(${1:byteSize,requirements})",
		"description": ""
	},
	"AllocPooled_(poolHeader,memSize)": {
		"prefix": "AllocPooled_",
		"body": "AllocPooled_(${1:poolHeader,memSize})",
		"description": ""
	},
	"ColdReboot_": {
		"prefix": "ColdReboot_",
		"body": "ColdReboot_",
		"description": ""
	},
	"StrToLong_(string,value)": {
		"prefix": "StrToLong_",
		"body": "StrToLong_(${1:string,value})",
		"description": ""
	},
	"MatchFirst_(pat,anchor)": {
		"prefix": "MatchFirst_",
		"body": "MatchFirst_(${1:pat,anchor})",
		"description": ""
	},
	"MatchPattern_(pat,str)": {
		"prefix": "MatchPattern_",
		"body": "MatchPattern_(${1:pat,str})",
		"description": ""
	},
	"SetVar_(name,buffer,size,flags)": {
		"prefix": "SetVar_",
		"body": "SetVar_(${1:name,buffer,size,flags})",
		"description": ""
	},
	"GetVar_(name,buffer,size,flags)": {
		"prefix": "GetVar_",
		"body": "GetVar_(${1:name,buffer,size,flags})",
		"description": ""
	},
	"DeleteVar_(name,flags)": {
		"prefix": "DeleteVar_",
		"body": "DeleteVar_(${1:name,flags})",
		"description": ""
	},
	"FindVar_(name,type)": {
		"prefix": "FindVar_",
		"body": "FindVar_(${1:name,type})",
		"description": ""
	},
	"WriteChars_(buf,buflen)": {
		"prefix": "WriteChars_",
		"body": "WriteChars_(${1:buf,buflen})",
		"description": ""
	},
	"VPrintf_(format,argarray)": {
		"prefix": "VPrintf_",
		"body": "VPrintf_(${1:format,argarray})",
		"description": ""
	},
	"MatchPatternNoCase_(pat,str)": {
		"prefix": "MatchPatternNoCase_",
		"body": "MatchPatternNoCase_(${1:pat,str})",
		"description": ""
	},
	"SameDevice_(lock1,lock2)": {
		"prefix": "SameDevice_",
		"body": "SameDevice_(${1:lock1,lock2})",
		"description": ""
	},
	"SetOwner_(name,owner_info)": {
		"prefix": "SetOwner_",
		"body": "SetOwner_(${1:name,owner_info})",
		"description": ""
	},
	"Open_(name,accessMode)": {
		"prefix": "Open_",
		"body": "Open_(${1:name,accessMode})",
		"description": ""
	},
	"Input_": {
		"prefix": "Input_",
		"body": "Input_",
		"description": ""
	},
	"Output_": {
		"prefix": "Output_",
		"body": "Output_",
		"description": ""
	},
	"Rename_(oldName,newName)": {
		"prefix": "Rename_",
		"body": "Rename_(${1:oldName,newName})",
		"description": ""
	},
	"Lock_(name,type)": {
		"prefix": "Lock_",
		"body": "Lock_(${1:name,type})",
		"description": ""
	},
	"Examine_(lock,fileInfoBlock)": {
		"prefix": "Examine_",
		"body": "Examine_(${1:lock,fileInfoBlock})",
		"description": ""
	},
	"ExNext_(lock,fileInfoBlock)": {
		"prefix": "ExNext_",
		"body": "ExNext_(${1:lock,fileInfoBlock})",
		"description": ""
	},
	"Info_(lock,parameterBlock)": {
		"prefix": "Info_",
		"body": "Info_(${1:lock,parameterBlock})",
		"description": ""
	},
	"IoErr_": {
		"prefix": "IoErr_",
		"body": "IoErr_",
		"description": ""
	},
	"CreateProc_(name,pri,segList,stackSize)": {
		"prefix": "CreateProc_",
		"body": "CreateProc_(${1:name,pri,segList,stackSize})",
		"description": ""
	},
	"SetComment_(name,comment)": {
		"prefix": "SetComment_",
		"body": "SetComment_(${1:name,comment})",
		"description": ""
	},
	"SetProtection_(name,protect)": {
		"prefix": "SetProtection_",
		"body": "SetProtection_(${1:name,protect})",
		"description": ""
	},
	"WaitForChar_(file,timeout)": {
		"prefix": "WaitForChar_",
		"body": "WaitForChar_(${1:file,timeout})",
		"description": ""
	},
	"AllocDosObject_(type,tags)": {
		"prefix": "AllocDosObject_",
		"body": "AllocDosObject_(${1:type,tags})",
		"description": ""
	},
	"FreeDosObject_(type,ptr)": {
		"prefix": "FreeDosObject_",
		"body": "FreeDosObject_(${1:type,ptr})",
		"description": ""
	},
	"WaitPkt_": {
		"prefix": "WaitPkt_",
		"body": "WaitPkt_",
		"description": ""
	},
	"AbortPkt_(port,pkt)": {
		"prefix": "AbortPkt_",
		"body": "AbortPkt_(${1:port,pkt})",
		"description": ""
	},
	"LockRecords_(recArray,timeout)": {
		"prefix": "LockRecords_",
		"body": "LockRecords_(${1:recArray,timeout})",
		"description": ""
	},
	"FPutC_(fh,ch)": {
		"prefix": "FPutC_",
		"body": "FPutC_(${1:fh,ch})",
		"description": ""
	},
	"UnGetC_(fh,character)": {
		"prefix": "UnGetC_",
		"body": "UnGetC_(${1:fh,character})",
		"description": ""
	},
	"FRead_(fh,block,blocklen,number)": {
		"prefix": "FRead_",
		"body": "FRead_(${1:fh,block,blocklen,number})",
		"description": ""
	},
	"FWrite_(fh,block,blocklen,number)": {
		"prefix": "FWrite_",
		"body": "FWrite_(${1:fh,block,blocklen,number})",
		"description": ""
	},
	"FPuts_(fh,str)": {
		"prefix": "FPuts_",
		"body": "FPuts_(${1:fh,str})",
		"description": ""
	},
	"SetVBuf_(fh,buff,type,size)": {
		"prefix": "SetVBuf_",
		"body": "SetVBuf_(${1:fh,buff,type,size})",
		"description": ""
	},
	"ExamineFH_(fh,fib)": {
		"prefix": "ExamineFH_",
		"body": "ExamineFH_(${1:fh,fib})",
		"description": ""
	},
	"SetFileDate_(name,date)": {
		"prefix": "SetFileDate_",
		"body": "SetFileDate_(${1:name,date})",
		"description": ""
	},
	"SameLock_(lock1,lock2)": {
		"prefix": "SameLock_",
		"body": "SameLock_(${1:lock1,lock2})",
		"description": ""
	},
	"SetMode_(fh,mode)": {
		"prefix": "SetMode_",
		"body": "SetMode_(${1:fh,mode})",
		"description": ""
	},
	"Fault_(code,header,buffer,len)": {
		"prefix": "Fault_",
		"body": "Fault_(${1:code,header,buffer,len})",
		"description": ""
	},
	"PrintFault_(code,header)": {
		"prefix": "PrintFault_",
		"body": "PrintFault_(${1:code,header})",
		"description": ""
	},
	"ErrorReport_(code,type,arg1,device)": {
		"prefix": "ErrorReport_",
		"body": "ErrorReport_(${1:code,type,arg1,device})",
		"description": ""
	},
	"Cli_": {
		"prefix": "Cli_",
		"body": "Cli_",
		"description": ""
	},
	"RunCommand_(seg,stack,paramptr,paramlen)": {
		"prefix": "RunCommand_",
		"body": "RunCommand_(${1:seg,stack,paramptr,paramlen})",
		"description": ""
	},
	"GetConsoleTask_": {
		"prefix": "GetConsoleTask_",
		"body": "GetConsoleTask_",
		"description": ""
	},
	"GetFileSysTask_": {
		"prefix": "GetFileSysTask_",
		"body": "GetFileSysTask_",
		"description": ""
	},
	"GetArgStr_": {
		"prefix": "GetArgStr_",
		"body": "GetArgStr_",
		"description": ""
	},
	"MaxCli_": {
		"prefix": "MaxCli_",
		"body": "MaxCli_",
		"description": ""
	},
	"GetCurrentDirName_(buf,len)": {
		"prefix": "GetCurrentDirName_",
		"body": "GetCurrentDirName_(${1:buf,len})",
		"description": ""
	},
	"GetProgramName_(buf,len)": {
		"prefix": "GetProgramName_",
		"body": "GetProgramName_(${1:buf,len})",
		"description": ""
	},
	"GetPrompt_(buf,len)": {
		"prefix": "GetPrompt_",
		"body": "GetPrompt_(${1:buf,len})",
		"description": ""
	},
	"GetProgramDir_": {
		"prefix": "GetProgramDir_",
		"body": "GetProgramDir_",
		"description": ""
	},
	"SystemTagList_(command,tags)": {
		"prefix": "SystemTagList_",
		"body": "SystemTagList_(${1:command,tags})",
		"description": ""
	},
	"AssignLock_(name,lock)": {
		"prefix": "AssignLock_",
		"body": "AssignLock_(${1:name,lock})",
		"description": ""
	},
	"AssignLate_(name,path)": {
		"prefix": "AssignLate_",
		"body": "AssignLate_(${1:name,path})",
		"description": ""
	},
	"AssignPath_(name,path)": {
		"prefix": "AssignPath_",
		"body": "AssignPath_(${1:name,path})",
		"description": ""
	},
	"AssignAdd_(name,lock)": {
		"prefix": "AssignAdd_",
		"body": "AssignAdd_(${1:name,lock})",
		"description": ""
	},
	"RemAssignList_(name,lock)": {
		"prefix": "RemAssignList_",
		"body": "RemAssignList_(${1:name,lock})",
		"description": ""
	},
	"GetDeviceProc_(name,dp)": {
		"prefix": "GetDeviceProc_",
		"body": "GetDeviceProc_(${1:name,dp})",
		"description": ""
	},
	"NextDosEntry_(dlist,flags)": {
		"prefix": "NextDosEntry_",
		"body": "NextDosEntry_(${1:dlist,flags})",
		"description": ""
	},
	"MakeDosEntry_(name,type)": {
		"prefix": "MakeDosEntry_",
		"body": "MakeDosEntry_(${1:name,type})",
		"description": ""
	},
	"Relabel_(drive,newname)": {
		"prefix": "Relabel_",
		"body": "Relabel_(${1:drive,newname})",
		"description": ""
	},
	"Inhibit_(name,onoff)": {
		"prefix": "Inhibit_",
		"body": "Inhibit_(${1:name,onoff})",
		"description": ""
	},
	"AddBuffers_(name,number)": {
		"prefix": "AddBuffers_",
		"body": "AddBuffers_(${1:name,number})",
		"description": ""
	},
	"CompareDates_(date1,date2)": {
		"prefix": "CompareDates_",
		"body": "CompareDates_(${1:date1,date2})",
		"description": ""
	},
	"InternalLoadSeg_(fh,table,funcarray,stack)": {
		"prefix": "InternalLoadSeg_",
		"body": "InternalLoadSeg_(${1:fh,table,funcarray,stack})",
		"description": ""
	},
	"InternalUnLoadSeg_(seglist,freefunc)": {
		"prefix": "InternalUnLoadSeg_",
		"body": "InternalUnLoadSeg_(${1:seglist,freefunc})",
		"description": ""
	},
	"NewLoadSeg_(file,tags)": {
		"prefix": "NewLoadSeg_",
		"body": "NewLoadSeg_(${1:file,tags})",
		"description": ""
	},
	"FindArg_(keyword,template)": {
		"prefix": "FindArg_",
		"body": "FindArg_(${1:keyword,template})",
		"description": ""
	},
	"NewFontContents_(fontsLock,fontName)": {
		"prefix": "NewFontContents_",
		"body": "NewFontContents_(${1:fontsLock,fontName})",
		"description": ""
	},
	"NewScaledDiskFont_(sourceFont,destTextAttr)": {
		"prefix": "NewScaledDiskFont_",
		"body": "NewScaledDiskFont_(${1:sourceFont,destTextAttr})",
		"description": ""
	},
	"GiveUnit_": {
		"prefix": "GiveUnit_",
		"body": "GiveUnit_",
		"description": ""
	},
	"RLDispatch_(rmsg,result)": {
		"prefix": "RLDispatch_",
		"body": "RLDispatch_(${1:rmsg,result})",
		"description": ""
	},
	"NewDTObjectA_(name,attrs)": {
		"prefix": "NewDTObjectA_",
		"body": "NewDTObjectA_(${1:name,attrs})",
		"description": ""
	},
	"SetDTAttrsA_(o,win,req,attrs)": {
		"prefix": "SetDTAttrsA_",
		"body": "SetDTAttrsA_(${1:o,win,req,attrs})",
		"description": ""
	},
	"GetDTAttrsA_(o,attrs)": {
		"prefix": "GetDTAttrsA_",
		"body": "GetDTAttrsA_(${1:o,attrs})",
		"description": ""
	},
	"AddDTObject_(win,req,o,pos)": {
		"prefix": "AddDTObject_",
		"body": "AddDTObject_(${1:win,req,o,pos})",
		"description": ""
	},
	"RefreshDTObjectA_(o,win,req,attrs)": {
		"prefix": "RefreshDTObjectA_",
		"body": "RefreshDTObjectA_(${1:o,win,req,attrs})",
		"description": ""
	},
	"DoAsyncLayout_(o,gpl)": {
		"prefix": "DoAsyncLayout_",
		"body": "DoAsyncLayout_(${1:o,gpl})",
		"description": ""
	},
	"DoDTMethodA_(o,win,req,msg)": {
		"prefix": "DoDTMethodA_",
		"body": "DoDTMethodA_(${1:o,win,req,msg})",
		"description": ""
	},
	"RemoveDTObject_(win,o)": {
		"prefix": "RemoveDTObject_",
		"body": "RemoveDTObject_(${1:win,o})",
		"description": ""
	},
	"PrintDTObjectA_(o,w,r,msg)": {
		"prefix": "PrintDTObjectA_",
		"body": "PrintDTObjectA_(${1:o,w,r,msg})",
		"description": ""
	},
	"CxBroker_(nb,error)": {
		"prefix": "CxBroker_",
		"body": "CxBroker_(${1:nb,error})",
		"description": ""
	},
	"ActivateCxObj_(co,true)": {
		"prefix": "ActivateCxObj_",
		"body": "ActivateCxObj_(${1:co,true})",
		"description": ""
	},
	"SetCxObjPri_(co,pri)": {
		"prefix": "SetCxObjPri_",
		"body": "SetCxObjPri_(${1:co,pri})",
		"description": ""
	},
	"AttachCxObj_(headObj,co)": {
		"prefix": "AttachCxObj_",
		"body": "AttachCxObj_(${1:headObj,co})",
		"description": ""
	},
	"EnqueueCxObj_(headObj,co)": {
		"prefix": "EnqueueCxObj_",
		"body": "EnqueueCxObj_(${1:headObj,co})",
		"description": ""
	},
	"SetTranslate_(translator,events)": {
		"prefix": "SetTranslate_",
		"body": "SetTranslate_(${1:translator,events})",
		"description": ""
	},
	"SetFilter_(filter,text)": {
		"prefix": "SetFilter_",
		"body": "SetFilter_(${1:filter,text})",
		"description": ""
	},
	"SetFilterIX_(filter,ix)": {
		"prefix": "SetFilterIX_",
		"body": "SetFilterIX_(${1:filter,ix})",
		"description": ""
	},
	"ParseIX_(description,ix)": {
		"prefix": "ParseIX_",
		"body": "ParseIX_(${1:description,ix})",
		"description": ""
	},
	"RouteCxMsg_(cxm,co)": {
		"prefix": "RouteCxMsg_",
		"body": "RouteCxMsg_(${1:cxm,co})",
		"description": ""
	},
	"MatchIX_(event,ix)": {
		"prefix": "MatchIX_",
		"body": "MatchIX_(${1:event,ix})",
		"description": ""
	},
	"ConvertHSBToRGB_(hsb,rgb)": {
		"prefix": "ConvertHSBToRGB_",
		"body": "ConvertHSBToRGB_(${1:hsb,rgb})",
		"description": ""
	},
	"ConvertRGBToHSB_(rgb,hsb)": {
		"prefix": "ConvertRGBToHSB_",
		"body": "ConvertRGBToHSB_(${1:rgb,hsb})",
		"description": ""
	},
	"AbleICR_b(resource,mask)": {
		"prefix": "AbleICR_b",
		"body": "AbleICR_b(${1:resource,mask})",
		"description": ""
	},
	"SetICR_b(resource,mask)": {
		"prefix": "SetICR_b",
		"body": "SetICR_b(${1:resource,mask})",
		"description": ""
	},
	"AbleICR_a(resource,mask)": {
		"prefix": "AbleICR_a",
		"body": "AbleICR_a(${1:resource,mask})",
		"description": ""
	},
	"SetICR_a(resource,mask)": {
		"prefix": "SetICR_a",
		"body": "SetICR_a(${1:resource,mask})",
		"description": ""
	},
	"ReleaseCard_(handle,flags)": {
		"prefix": "ReleaseCard_",
		"body": "ReleaseCard_(${1:handle,flags})",
		"description": ""
	},
	"GetCardMap_": {
		"prefix": "GetCardMap_",
		"body": "GetCardMap_",
		"description": ""
	},
	"ReadCardStatus_": {
		"prefix": "ReadCardStatus_",
		"body": "ReadCardStatus_",
		"description": ""
	},
	"CardResetRemove_(handle,flag)": {
		"prefix": "CardResetRemove_",
		"body": "CardResetRemove_(${1:handle,flag})",
		"description": ""
	},
	"CardMiscControl_(handle,control_bits)": {
		"prefix": "CardMiscControl_",
		"body": "CardMiscControl_(${1:handle,control_bits})",
		"description": ""
	},
	"CardAccessSpeed_(handle,nanoseconds)": {
		"prefix": "CardAccessSpeed_",
		"body": "CardAccessSpeed_(${1:handle,nanoseconds})",
		"description": ""
	},
	"CardProgramVoltage_(handle,voltage)": {
		"prefix": "CardProgramVoltage_",
		"body": "CardProgramVoltage_(${1:handle,voltage})",
		"description": ""
	},
	"CopyTuple_(handle,buffer,tuplecode,size)": {
		"prefix": "CopyTuple_",
		"body": "CopyTuple_(${1:handle,buffer,tuplecode,size})",
		"description": ""
	},
	"DeviceTuple_(tuple_data,storage)": {
		"prefix": "DeviceTuple_",
		"body": "DeviceTuple_(${1:tuple_data,storage})",
		"description": ""
	},
	"CardForceChange_": {
		"prefix": "CardForceChange_",
		"body": "CardForceChange_",
		"description": ""
	},
	"CardChangeCount_": {
		"prefix": "CardChangeCount_",
		"body": "CardChangeCount_",
		"description": ""
	},
	"CardInterface_": {
		"prefix": "CardInterface_",
		"body": "CardInterface_",
		"description": ""
	},
	"OpenEngine_": {
		"prefix": "OpenEngine_",
		"body": "OpenEngine_",
		"description": ""
	},
	"SetInfoA_(glyphEngine,tagList)": {
		"prefix": "SetInfoA_",
		"body": "SetInfoA_(${1:glyphEngine,tagList})",
		"description": ""
	},
	"ObtainInfoA_(glyphEngine,tagList)": {
		"prefix": "ObtainInfoA_",
		"body": "ObtainInfoA_(${1:glyphEngine,tagList})",
		"description": ""
	},
	"ReleaseInfoA_(glyphEngine,tagList)": {
		"prefix": "ReleaseInfoA_",
		"body": "ReleaseInfoA_(${1:glyphEngine,tagList})",
		"description": ""
	},
	"ObtainBattSemaphore_": {
		"prefix": "ObtainBattSemaphore_",
		"body": "ObtainBattSemaphore_",
		"description": ""
	},
	"ReleaseBattSemaphore_": {
		"prefix": "ReleaseBattSemaphore_",
		"body": "ReleaseBattSemaphore_",
		"description": ""
	},
	"ResetBattClock_": {
		"prefix": "ResetBattClock_",
		"body": "ResetBattClock_",
		"description": ""
	},
	"ReadBattClock_": {
		"prefix": "ReadBattClock_",
		"body": "ReadBattClock_",
		"description": ""
	},
	"AllocFileRequest_": {
		"prefix": "AllocFileRequest_",
		"body": "AllocFileRequest_",
		"description": ""
	},
	"AllocAslRequest_(reqType,tagList)": {
		"prefix": "AllocAslRequest_",
		"body": "AllocAslRequest_(${1:reqType,tagList})",
		"description": ""
	},
	"AslRequest_(requester,tagList)": {
		"prefix": "AslRequest_",
		"body": "AslRequest_(${1:requester,tagList})",
		"description": ""
	},
	"AGARexxHost_(rmsg,result)": {
		"prefix": "AGARexxHost_",
		"body": "AGARexxHost_(${1:rmsg,result})",
		"description": ""
	},
	"OpenAmigaGuideA_(nag,*)": {
		"prefix": "OpenAmigaGuideA_",
		"body": "OpenAmigaGuideA_(${1:nag,*})",
		"description": ""
	},
	"OpenAmigaGuideAsyncA_(nag,attrs)": {
		"prefix": "OpenAmigaGuideAsyncA_",
		"body": "OpenAmigaGuideAsyncA_(${1:nag,attrs})",
		"description": ""
	},
	"SendAmigaGuideContextA_(cl,attrs)": {
		"prefix": "SendAmigaGuideContextA_",
		"body": "SendAmigaGuideContextA_(${1:cl,attrs})",
		"description": ""
	},
	"SetAmigaGuideAttrsA_(cl,attrs)": {
		"prefix": "SetAmigaGuideAttrsA_",
		"body": "SetAmigaGuideAttrsA_(${1:cl,attrs})",
		"description": ""
	},
	"RemoveAmigaGuideHostA_(hh,attrs)": {
		"prefix": "RemoveAmigaGuideHostA_",
		"body": "RemoveAmigaGuideHostA_(${1:hh,attrs})",
		"description": ""
	},
	"TEDGetLabelList_()-42": {
		"prefix": "TEDGetLabelList_",
		"body": "TEDGetLabelList_(${1:)-42})",
		"description": "()-42."
	},
	"TEDGetLabelCount_()-48": {
		"prefix": "TEDGetLabelCount_",
		"body": "TEDGetLabelCount_(${1:)-48})",
		"description": "()-48."
	},
	"TEDSetJumpTable_()-54": {
		"prefix": "TEDSetJumpTable_",
		"body": "TEDSetJumpTable_(${1:)-54})",
		"description": "()-54."
	},
	"TEDGetJumpTable_()-60": {
		"prefix": "TEDGetJumpTable_",
		"body": "TEDGetJumpTable_(${1:)-60})",
		"description": "()-60."
	},
	"TEDGetFirstLine_()-84": {
		"prefix": "TEDGetFirstLine_",
		"body": "TEDGetFirstLine_(${1:)-84})",
		"description": "()-84."
	},
	"TEDGetCurrentLine_()-90": {
		"prefix": "TEDGetCurrentLine_",
		"body": "TEDGetCurrentLine_(${1:)-90})",
		"description": "()-90."
	},
	"TEDGetFilename_()-102": {
		"prefix": "TEDGetFilename_",
		"body": "TEDGetFilename_(${1:)-102})",
		"description": "()-102."
	},
	"XProtocolCleanup_(io)": {
		"prefix": "XProtocolCleanup_",
		"body": "XProtocolCleanup_(${1:io})",
		"description": ""
	},
	"XProtocolSetup_(io)": {
		"prefix": "XProtocolSetup_",
		"body": "XProtocolSetup_(${1:io})",
		"description": ""
	},
	"XProtocolSend_(io)": {
		"prefix": "XProtocolSend_",
		"body": "XProtocolSend_(${1:io})",
		"description": ""
	},
	"XProtocolReceive_(io)": {
		"prefix": "XProtocolReceive_",
		"body": "XProtocolReceive_(${1:io})",
		"description": ""
	},
	"AddAppWindowA_(id,userdata,window,msgport,taglist)": {
		"prefix": "AddAppWindowA_",
		"body": "AddAppWindowA_(${1:id,userdata,window,msgport,taglist})",
		"description": ""
	},
	"RemoveAppWindow_(appWindow)": {
		"prefix": "RemoveAppWindow_",
		"body": "RemoveAppWindow_(${1:appWindow})",
		"description": ""
	},
	"AddAppIconA_(id,userdata,text,msgport,lock,diskobj,taglist)": {
		"prefix": "AddAppIconA_",
		"body": "AddAppIconA_(${1:id,userdata,text,msgport,lock,diskobj,taglist})",
		"description": ""
	},
	"RemoveAppIcon_(appIcon)": {
		"prefix": "RemoveAppIcon_",
		"body": "RemoveAppIcon_(${1:appIcon})",
		"description": ""
	},
	"AddAppMenuItemA_(id,userdata,text,msgport,taglist)": {
		"prefix": "AddAppMenuItemA_",
		"body": "AddAppMenuItemA_(${1:id,userdata,text,msgport,taglist})",
		"description": ""
	},
	"RemoveAppMenuItem_(appMenuItem)": {
		"prefix": "RemoveAppMenuItem_",
		"body": "RemoveAppMenuItem_(${1:appMenuItem})",
		"description": ""
	},
	"WBInfo_(lock,name,screen)": {
		"prefix": "WBInfo_",
		"body": "WBInfo_(${1:lock,name,screen})",
		"description": ""
	},
	"GetTagData_(tagValue,defaultVal,tagList)": {
		"prefix": "GetTagData_",
		"body": "GetTagData_(${1:tagValue,defaultVal,tagList})",
		"description": ""
	},
	"PackBoolTags_(initialFlags,tagList,boolMap)": {
		"prefix": "PackBoolTags_",
		"body": "PackBoolTags_(${1:initialFlags,tagList,boolMap})",
		"description": ""
	},
	"NextTagItem_(tagListPtr)": {
		"prefix": "NextTagItem_",
		"body": "NextTagItem_(${1:tagListPtr})",
		"description": ""
	},
	"FilterTagChanges_(changeList,originalList,apply)": {
		"prefix": "FilterTagChanges_",
		"body": "FilterTagChanges_(${1:changeList,originalList,apply})",
		"description": ""
	},
	"MapTags_(tagList,mapList,mapType)": {
		"prefix": "MapTags_",
		"body": "MapTags_(${1:tagList,mapList,mapType})",
		"description": ""
	},
	"AllocateTagItems_(numTags)": {
		"prefix": "AllocateTagItems_",
		"body": "AllocateTagItems_(${1:numTags})",
		"description": ""
	},
	"CloneTagItems_(tagList)": {
		"prefix": "CloneTagItems_",
		"body": "CloneTagItems_(${1:tagList})",
		"description": ""
	},
	"FreeTagItems_(tagList)": {
		"prefix": "FreeTagItems_",
		"body": "FreeTagItems_(${1:tagList})",
		"description": ""
	},
	"FilterTagItems_(tagList,filterArray,logic)": {
		"prefix": "FilterTagItems_",
		"body": "FilterTagItems_(${1:tagList,filterArray,logic})",
		"description": ""
	},
	"CallHookPkt_(hook,object,paramPacket)": {
		"prefix": "CallHookPkt_",
		"body": "CallHookPkt_(${1:hook,object,paramPacket})",
		"description": ""
	},
	"Date2Amiga_(date)": {
		"prefix": "Date2Amiga_",
		"body": "Date2Amiga_(${1:date})",
		"description": ""
	},
	"CheckDate_(date)": {
		"prefix": "CheckDate_",
		"body": "CheckDate_(${1:date})",
		"description": ""
	},
	"Strnicmp_(string1,string2,length)": {
		"prefix": "Strnicmp_",
		"body": "Strnicmp_(${1:string1,string2,length})",
		"description": ""
	},
	"ToUpper_(character)": {
		"prefix": "ToUpper_",
		"body": "ToUpper_(${1:character})",
		"description": ""
	},
	"ToLower_(character)": {
		"prefix": "ToLower_",
		"body": "ToLower_(${1:character})",
		"description": ""
	},
	"PackStructureTags_(pack,packtable,tagList)": {
		"prefix": "PackStructureTags_",
		"body": "PackStructureTags_(${1:pack,packtable,tagList})",
		"description": ""
	},
	"UnpackStructureTags_(pack,packtable,tagList)": {
		"prefix": "UnpackStructureTags_",
		"body": "UnpackStructureTags_(${1:pack,packtable,tagList})",
		"description": ""
	},
	"AttemptRemNamedObject_(object)": {
		"prefix": "AttemptRemNamedObject_",
		"body": "AttemptRemNamedObject_(${1:object})",
		"description": ""
	},
	"FindNamedObject_(namespace,name,lastobject)": {
		"prefix": "FindNamedObject_",
		"body": "FindNamedObject_(${1:namespace,name,lastobject})",
		"description": ""
	},
	"FreeNamedObject_(object)": {
		"prefix": "FreeNamedObject_",
		"body": "FreeNamedObject_(${1:object})",
		"description": ""
	},
	"NamedObjectName_(object)": {
		"prefix": "NamedObjectName_",
		"body": "NamedObjectName_(${1:object})",
		"description": ""
	},
	"ReleaseNamedObject_(object)": {
		"prefix": "ReleaseNamedObject_",
		"body": "ReleaseNamedObject_(${1:object})",
		"description": ""
	},
	"DeleteArgstring_(argstring)": {
		"prefix": "DeleteArgstring_",
		"body": "DeleteArgstring_(${1:argstring})",
		"description": ""
	},
	"LengthArgstring_(argstring)": {
		"prefix": "LengthArgstring_",
		"body": "LengthArgstring_(${1:argstring})",
		"description": ""
	},
	"CreateRexxMsg_(port,extension,host)": {
		"prefix": "CreateRexxMsg_",
		"body": "CreateRexxMsg_(${1:port,extension,host})",
		"description": ""
	},
	"DeleteRexxMsg_(packet)": {
		"prefix": "DeleteRexxMsg_",
		"body": "DeleteRexxMsg_(${1:packet})",
		"description": ""
	},
	"FillRexxMsg_(msgptr,count,mask)": {
		"prefix": "FillRexxMsg_",
		"body": "FillRexxMsg_(${1:msgptr,count,mask})",
		"description": ""
	},
	"IsRexxMsg_(msgptr)": {
		"prefix": "IsRexxMsg_",
		"body": "IsRexxMsg_(${1:msgptr})",
		"description": ""
	},
	"LockRexxBase_(resource)": {
		"prefix": "LockRexxBase_",
		"body": "LockRexxBase_(${1:resource})",
		"description": ""
	},
	"UnlockRexxBase_(resource)": {
		"prefix": "UnlockRexxBase_",
		"body": "UnlockRexxBase_(${1:resource})",
		"description": ""
	},
	"AllocPotBits_(bits)": {
		"prefix": "AllocPotBits_",
		"body": "AllocPotBits_(${1:bits})",
		"description": ""
	},
	"FreePotBits_(bits)": {
		"prefix": "FreePotBits_",
		"body": "FreePotBits_(${1:bits})",
		"description": ""
	},
	"FreeMiscResource_(unitNum)": {
		"prefix": "FreeMiscResource_",
		"body": "FreeMiscResource_(${1:unitNum})",
		"description": ""
	},
	"SPAtan_(parm)": {
		"prefix": "SPAtan_",
		"body": "SPAtan_(${1:parm})",
		"description": ""
	},
	"SPSin_(parm)": {
		"prefix": "SPSin_",
		"body": "SPSin_(${1:parm})",
		"description": ""
	},
	"SPCos_(parm)": {
		"prefix": "SPCos_",
		"body": "SPCos_(${1:parm})",
		"description": ""
	},
	"SPTan_(parm)": {
		"prefix": "SPTan_",
		"body": "SPTan_(${1:parm})",
		"description": ""
	},
	"SPSinh_(parm)": {
		"prefix": "SPSinh_",
		"body": "SPSinh_(${1:parm})",
		"description": ""
	},
	"SPCosh_(parm)": {
		"prefix": "SPCosh_",
		"body": "SPCosh_(${1:parm})",
		"description": ""
	},
	"SPTanh_(parm)": {
		"prefix": "SPTanh_",
		"body": "SPTanh_(${1:parm})",
		"description": ""
	},
	"SPExp_(parm)": {
		"prefix": "SPExp_",
		"body": "SPExp_(${1:parm})",
		"description": ""
	},
	"SPLog_(parm)": {
		"prefix": "SPLog_",
		"body": "SPLog_(${1:parm})",
		"description": ""
	},
	"SPSqrt_(parm)": {
		"prefix": "SPSqrt_",
		"body": "SPSqrt_(${1:parm})",
		"description": ""
	},
	"SPTieee_(parm)": {
		"prefix": "SPTieee_",
		"body": "SPTieee_(${1:parm})",
		"description": ""
	},
	"SPFieee_(parm)": {
		"prefix": "SPFieee_",
		"body": "SPFieee_(${1:parm})",
		"description": ""
	},
	"SPAsin_(parm)": {
		"prefix": "SPAsin_",
		"body": "SPAsin_(${1:parm})",
		"description": ""
	},
	"SPAcos_(parm)": {
		"prefix": "SPAcos_",
		"body": "SPAcos_(${1:parm})",
		"description": ""
	},
	"SPLog10_(parm)": {
		"prefix": "SPLog10_",
		"body": "SPLog10_(${1:parm})",
		"description": ""
	},
	"IEEESPAtan_(parm)": {
		"prefix": "IEEESPAtan_",
		"body": "IEEESPAtan_(${1:parm})",
		"description": ""
	},
	"IEEESPSin_(parm)": {
		"prefix": "IEEESPSin_",
		"body": "IEEESPSin_(${1:parm})",
		"description": ""
	},
	"IEEESPCos_(parm)": {
		"prefix": "IEEESPCos_",
		"body": "IEEESPCos_(${1:parm})",
		"description": ""
	},
	"IEEESPTan_(parm)": {
		"prefix": "IEEESPTan_",
		"body": "IEEESPTan_(${1:parm})",
		"description": ""
	},
	"IEEESPSinh_(parm)": {
		"prefix": "IEEESPSinh_",
		"body": "IEEESPSinh_(${1:parm})",
		"description": ""
	},
	"IEEESPCosh_(parm)": {
		"prefix": "IEEESPCosh_",
		"body": "IEEESPCosh_(${1:parm})",
		"description": ""
	},
	"IEEESPTanh_(parm)": {
		"prefix": "IEEESPTanh_",
		"body": "IEEESPTanh_(${1:parm})",
		"description": ""
	},
	"IEEESPExp_(parm)": {
		"prefix": "IEEESPExp_",
		"body": "IEEESPExp_(${1:parm})",
		"description": ""
	},
	"IEEESPLog_(parm)": {
		"prefix": "IEEESPLog_",
		"body": "IEEESPLog_(${1:parm})",
		"description": ""
	},
	"IEEESPSqrt_(parm)": {
		"prefix": "IEEESPSqrt_",
		"body": "IEEESPSqrt_(${1:parm})",
		"description": ""
	},
	"IEEESPTieee_(parm)": {
		"prefix": "IEEESPTieee_",
		"body": "IEEESPTieee_(${1:parm})",
		"description": ""
	},
	"IEEESPFieee_(parm)": {
		"prefix": "IEEESPFieee_",
		"body": "IEEESPFieee_(${1:parm})",
		"description": ""
	},
	"IEEESPAsin_(parm)": {
		"prefix": "IEEESPAsin_",
		"body": "IEEESPAsin_(${1:parm})",
		"description": ""
	},
	"IEEESPAcos_(parm)": {
		"prefix": "IEEESPAcos_",
		"body": "IEEESPAcos_(${1:parm})",
		"description": ""
	},
	"IEEESPLog10_(parm)": {
		"prefix": "IEEESPLog10_",
		"body": "IEEESPLog10_(${1:parm})",
		"description": ""
	},
	"IEEESPFix_(parm)": {
		"prefix": "IEEESPFix_",
		"body": "IEEESPFix_(${1:parm})",
		"description": ""
	},
	"IEEESPFlt_(integer)": {
		"prefix": "IEEESPFlt_",
		"body": "IEEESPFlt_(${1:integer})",
		"description": ""
	},
	"IEEESPTst_(parm)": {
		"prefix": "IEEESPTst_",
		"body": "IEEESPTst_(${1:parm})",
		"description": ""
	},
	"IEEESPAbs_(parm)": {
		"prefix": "IEEESPAbs_",
		"body": "IEEESPAbs_(${1:parm})",
		"description": ""
	},
	"IEEESPNeg_(parm)": {
		"prefix": "IEEESPNeg_",
		"body": "IEEESPNeg_(${1:parm})",
		"description": ""
	},
	"IEEESPFloor_(parm)": {
		"prefix": "IEEESPFloor_",
		"body": "IEEESPFloor_(${1:parm})",
		"description": ""
	},
	"IEEESPCeil_(parm)": {
		"prefix": "IEEESPCeil_",
		"body": "IEEESPCeil_(${1:parm})",
		"description": ""
	},
	"IEEEDPSincos_(pf2,parm)": {
		"prefix": "IEEEDPSincos_",
		"body": "IEEEDPSincos_(${1:pf2,parm})",
		"description": ""
	},
	"IEEEDPFieee_(single)": {
		"prefix": "IEEEDPFieee_",
		"body": "IEEEDPFieee_(${1:single})",
		"description": ""
	},
	"IEEEDPFlt_(integer)": {
		"prefix": "IEEEDPFlt_",
		"body": "IEEEDPFlt_(${1:integer})",
		"description": ""
	},
	"SPFix_(parm)": {
		"prefix": "SPFix_",
		"body": "SPFix_(${1:parm})",
		"description": ""
	},
	"SPFlt_(integer)": {
		"prefix": "SPFlt_",
		"body": "SPFlt_(${1:integer})",
		"description": ""
	},
	"SPTst_(parm)": {
		"prefix": "SPTst_",
		"body": "SPTst_(${1:parm})",
		"description": ""
	},
	"SPAbs_(parm)": {
		"prefix": "SPAbs_",
		"body": "SPAbs_(${1:parm})",
		"description": ""
	},
	"SPNeg_(parm)": {
		"prefix": "SPNeg_",
		"body": "SPNeg_(${1:parm})",
		"description": ""
	},
	"SPFloor_(parm)": {
		"prefix": "SPFloor_",
		"body": "SPFloor_(${1:parm})",
		"description": ""
	},
	"SPCeil_(parm)": {
		"prefix": "SPCeil_",
		"body": "SPCeil_(${1:parm})",
		"description": ""
	},
	"CloseCatalog_(catalog)": {
		"prefix": "CloseCatalog_",
		"body": "CloseCatalog_(${1:catalog})",
		"description": ""
	},
	"CloseLocale_(locale)": {
		"prefix": "CloseLocale_",
		"body": "CloseLocale_(${1:locale})",
		"description": ""
	},
	"GetCatalogStr_(catalog,stringNum,defaultString)": {
		"prefix": "GetCatalogStr_",
		"body": "GetCatalogStr_(${1:catalog,stringNum,defaultString})",
		"description": ""
	},
	"OpenCatalogA_(locale,name,tags)": {
		"prefix": "OpenCatalogA_",
		"body": "OpenCatalogA_(${1:locale,name,tags})",
		"description": ""
	},
	"OpenLocale_(name)": {
		"prefix": "OpenLocale_",
		"body": "OpenLocale_(${1:name})",
		"description": ""
	},
	"StrConvert_(locale,string,buffer,bufferSize,type)": {
		"prefix": "StrConvert_",
		"body": "StrConvert_(${1:locale,string,buffer,bufferSize,type})",
		"description": ""
	},
	"StrnCmp_(locale,string1,string2,length,type)": {
		"prefix": "StrnCmp_",
		"body": "StrnCmp_(${1:locale,string1,string2,length,type})",
		"description": ""
	},
	"InitLayers_(li)": {
		"prefix": "InitLayers_",
		"body": "InitLayers_(${1:li})",
		"description": ""
	},
	"BeginUpdate_(l)": {
		"prefix": "BeginUpdate_",
		"body": "BeginUpdate_(${1:l})",
		"description": ""
	},
	"UnlockLayer_(layer)": {
		"prefix": "UnlockLayer_",
		"body": "UnlockLayer_(${1:layer})",
		"description": ""
	},
	"LockLayers_(li)": {
		"prefix": "LockLayers_",
		"body": "LockLayers_(${1:li})",
		"description": ""
	},
	"UnlockLayers_(li)": {
		"prefix": "UnlockLayers_",
		"body": "UnlockLayers_(${1:li})",
		"description": ""
	},
	"LockLayerInfo_(li)": {
		"prefix": "LockLayerInfo_",
		"body": "LockLayerInfo_(${1:li})",
		"description": ""
	},
	"WhichLayer_(li,x,y)": {
		"prefix": "WhichLayer_",
		"body": "WhichLayer_(${1:li,x,y})",
		"description": ""
	},
	"UnlockLayerInfo_(li)": {
		"prefix": "UnlockLayerInfo_",
		"body": "UnlockLayerInfo_(${1:li})",
		"description": ""
	},
	"DisposeLayerInfo_(li)": {
		"prefix": "DisposeLayerInfo_",
		"body": "DisposeLayerInfo_(${1:li})",
		"description": ""
	},
	"FattenLayerInfo_(li)": {
		"prefix": "FattenLayerInfo_",
		"body": "FattenLayerInfo_(${1:li})",
		"description": ""
	},
	"ThinLayerInfo_(li)": {
		"prefix": "ThinLayerInfo_",
		"body": "ThinLayerInfo_(${1:li})",
		"description": ""
	},
	"MoveSizeLayer_(layer,dx,dy,dw,dh)": {
		"prefix": "MoveSizeLayer_",
		"body": "MoveSizeLayer_(${1:layer,dx,dy,dw,dh})",
		"description": ""
	},
	"CreateUpfrontHookLayer_(li,bm,x0,y0,x1,y1,flags,hook,bm2)": {
		"prefix": "CreateUpfrontHookLayer_",
		"body": "CreateUpfrontHookLayer_(${1:li,bm,x0,y0,x1,y1,flags,hook,bm2})",
		"description": ""
	},
	"CreateBehindHookLayer_(li,bm,x0,y0,x1,y1,flags,hook,bm2)": {
		"prefix": "CreateBehindHookLayer_",
		"body": "CreateBehindHookLayer_(${1:li,bm,x0,y0,x1,y1,flags,hook,bm2})",
		"description": ""
	},
	"SortLayerCR_(layer,dx,dy)": {
		"prefix": "SortLayerCR_",
		"body": "SortLayerCR_(${1:layer,dx,dy})",
		"description": ""
	},
	"DoHookClipRects_(hook,rport,rect)": {
		"prefix": "DoHookClipRects_",
		"body": "DoHookClipRects_(${1:hook,rport,rect})",
		"description": ""
	},
	"SetKeyMapDefault_(keyMap)": {
		"prefix": "SetKeyMapDefault_",
		"body": "SetKeyMapDefault_(${1:keyMap})",
		"description": ""
	},
	"MapANSI_(string,count,buffer,length,keyMap)": {
		"prefix": "MapANSI_",
		"body": "MapANSI_(${1:string,count,buffer,length,keyMap})",
		"description": ""
	},
	"Intuition_(iEvent)": {
		"prefix": "Intuition_",
		"body": "Intuition_(${1:iEvent})",
		"description": ""
	},
	"AddGadget_(window,gadget,position)": {
		"prefix": "AddGadget_",
		"body": "AddGadget_(${1:window,gadget,position})",
		"description": ""
	},
	"ClearDMRequest_(window)": {
		"prefix": "ClearDMRequest_",
		"body": "ClearDMRequest_(${1:window})",
		"description": ""
	},
	"ClearMenuStrip_(window)": {
		"prefix": "ClearMenuStrip_",
		"body": "ClearMenuStrip_(${1:window})",
		"description": ""
	},
	"ClearPointer_(window)": {
		"prefix": "ClearPointer_",
		"body": "ClearPointer_(${1:window})",
		"description": ""
	},
	"CloseScreen_(screen)": {
		"prefix": "CloseScreen_",
		"body": "CloseScreen_(${1:screen})",
		"description": ""
	},
	"CloseWindow_(window)": {
		"prefix": "CloseWindow_",
		"body": "CloseWindow_(${1:window})",
		"description": ""
	},
	"DisplayAlert_(alertNumber,string,height)": {
		"prefix": "DisplayAlert_",
		"body": "DisplayAlert_(${1:alertNumber,string,height})",
		"description": ""
	},
	"DisplayBeep_(screen)": {
		"prefix": "DisplayBeep_",
		"body": "DisplayBeep_(${1:screen})",
		"description": ""
	},
	"InitRequester_(requester)": {
		"prefix": "InitRequester_",
		"body": "InitRequester_(${1:requester})",
		"description": ""
	},
	"MoveScreen_(screen,dx,dy)": {
		"prefix": "MoveScreen_",
		"body": "MoveScreen_(${1:screen,dx,dy})",
		"description": ""
	},
	"MoveWindow_(window,dx,dy)": {
		"prefix": "MoveWindow_",
		"body": "MoveWindow_(${1:window,dx,dy})",
		"description": ""
	},
	"OffGadget_(gadget,window,requester)": {
		"prefix": "OffGadget_",
		"body": "OffGadget_(${1:gadget,window,requester})",
		"description": ""
	},
	"OnGadget_(gadget,window,requester)": {
		"prefix": "OnGadget_",
		"body": "OnGadget_(${1:gadget,window,requester})",
		"description": ""
	},
	"OpenScreen_(newScreen)": {
		"prefix": "OpenScreen_",
		"body": "OpenScreen_(${1:newScreen})",
		"description": ""
	},
	"OpenWindow_(newWindow)": {
		"prefix": "OpenWindow_",
		"body": "OpenWindow_(${1:newWindow})",
		"description": ""
	},
	"RefreshGadgets_(gadgets,window,requester)": {
		"prefix": "RefreshGadgets_",
		"body": "RefreshGadgets_(${1:gadgets,window,requester})",
		"description": ""
	},
	"ScreenToBack_(screen)": {
		"prefix": "ScreenToBack_",
		"body": "ScreenToBack_(${1:screen})",
		"description": ""
	},
	"ScreenToFront_(screen)": {
		"prefix": "ScreenToFront_",
		"body": "ScreenToFront_(${1:screen})",
		"description": ""
	},
	"SetWindowTitles_(window,windowTitle,screenTitle)": {
		"prefix": "SetWindowTitles_",
		"body": "SetWindowTitles_(${1:window,windowTitle,screenTitle})",
		"description": ""
	},
	"SizeWindow_(window,dx,dy)": {
		"prefix": "SizeWindow_",
		"body": "SizeWindow_(${1:window,dx,dy})",
		"description": ""
	},
	"ViewPortAddress_(window)": {
		"prefix": "ViewPortAddress_",
		"body": "ViewPortAddress_(${1:window})",
		"description": ""
	},
	"WindowToBack_(window)": {
		"prefix": "WindowToBack_",
		"body": "WindowToBack_(${1:window})",
		"description": ""
	},
	"WindowToFront_(window)": {
		"prefix": "WindowToFront_",
		"body": "WindowToFront_(${1:window})",
		"description": ""
	},
	"WindowLimits_(window,widthMin,heightMin,widthMax,heightMax)": {
		"prefix": "WindowLimits_",
		"body": "WindowLimits_(${1:window,widthMin,heightMin,widthMax,heightMax})",
		"description": ""
	},
	"SetPrefs_(preferences,size,inform)": {
		"prefix": "SetPrefs_",
		"body": "SetPrefs_(${1:preferences,size,inform})",
		"description": ""
	},
	"IntuiTextLength_(iText)": {
		"prefix": "IntuiTextLength_",
		"body": "IntuiTextLength_(${1:iText})",
		"description": ""
	},
	"BeginRefresh_(window)": {
		"prefix": "BeginRefresh_",
		"body": "BeginRefresh_(${1:window})",
		"description": ""
	},
	"BuildSysRequest_(window,body,posText,negText,flags,width,height)": {
		"prefix": "BuildSysRequest_",
		"body": "BuildSysRequest_(${1:window,body,posText,negText,flags,width,height})",
		"description": ""
	},
	"FreeSysRequest_(window)": {
		"prefix": "FreeSysRequest_",
		"body": "FreeSysRequest_(${1:window})",
		"description": ""
	},
	"MakeScreen_(screen)": {
		"prefix": "MakeScreen_",
		"body": "MakeScreen_(${1:screen})",
		"description": ""
	},
	"AllocRemember_(rememberKey,size,flags)": {
		"prefix": "AllocRemember_",
		"body": "AllocRemember_(${1:rememberKey,size,flags})",
		"description": ""
	},
	"AlohaWorkbench_(wbport)": {
		"prefix": "AlohaWorkbench_",
		"body": "AlohaWorkbench_(${1:wbport})",
		"description": ""
	},
	"LockIBase_(dontknow)": {
		"prefix": "LockIBase_",
		"body": "LockIBase_(${1:dontknow})",
		"description": ""
	},
	"UnlockIBase_(ibLock)": {
		"prefix": "UnlockIBase_",
		"body": "UnlockIBase_(${1:ibLock})",
		"description": ""
	},
	"AddGList_(window,gadget,position,numGad,requester)": {
		"prefix": "AddGList_",
		"body": "AddGList_(${1:window,gadget,position,numGad,requester})",
		"description": ""
	},
	"RemoveGList_(remPtr,gadget,numGad)": {
		"prefix": "RemoveGList_",
		"body": "RemoveGList_(${1:remPtr,gadget,numGad})",
		"description": ""
	},
	"ActivateWindow_(window)": {
		"prefix": "ActivateWindow_",
		"body": "ActivateWindow_(${1:window})",
		"description": ""
	},
	"RefreshWindowFrame_(window)": {
		"prefix": "RefreshWindowFrame_",
		"body": "RefreshWindowFrame_(${1:window})",
		"description": ""
	},
	"ActivateGadget_(gadgets,window,requester)": {
		"prefix": "ActivateGadget_",
		"body": "ActivateGadget_(${1:gadgets,window,requester})",
		"description": ""
	},
	"NewModifyProp_(gadget,window,requester,flags,horizPot,vertPot,horizBody,vertBody,numGad)": {
		"prefix": "NewModifyProp_",
		"body": "NewModifyProp_(${1:gadget,window,requester,flags,horizPot,vertPot,horizBody,vertBody,numGad})",
		"description": ""
	},
	"QueryOverscan_(displayID,rect,oScanType)": {
		"prefix": "QueryOverscan_",
		"body": "QueryOverscan_(${1:displayID,rect,oScanType})",
		"description": ""
	},
	"ChangeWindowBox_(window,left,top,width,height)": {
		"prefix": "ChangeWindowBox_",
		"body": "ChangeWindowBox_(${1:window,left,top,width,height})",
		"description": ""
	},
	"SetEditHook_(hook)": {
		"prefix": "SetEditHook_",
		"body": "SetEditHook_(${1:hook})",
		"description": ""
	},
	"ZipWindow_(window)": {
		"prefix": "ZipWindow_",
		"body": "ZipWindow_(${1:window})",
		"description": ""
	},
	"LockPubScreen_(name)": {
		"prefix": "LockPubScreen_",
		"body": "LockPubScreen_(${1:name})",
		"description": ""
	},
	"SetDefaultPubScreen_(name)": {
		"prefix": "SetDefaultPubScreen_",
		"body": "SetDefaultPubScreen_(${1:name})",
		"description": ""
	},
	"SetPubScreenModes_(modes)": {
		"prefix": "SetPubScreenModes_",
		"body": "SetPubScreenModes_(${1:modes})",
		"description": ""
	},
	"ObtainGIRPort_(gInfo)": {
		"prefix": "ObtainGIRPort_",
		"body": "ObtainGIRPort_(${1:gInfo})",
		"description": ""
	},
	"ReleaseGIRPort_(rp)": {
		"prefix": "ReleaseGIRPort_",
		"body": "ReleaseGIRPort_(${1:rp})",
		"description": ""
	},
	"GadgetMouse_(gadget,gInfo,mousePoint)": {
		"prefix": "GadgetMouse_",
		"body": "GadgetMouse_(${1:gadget,gInfo,mousePoint})",
		"description": ""
	},
	"GetDefaultPubScreen_(nameBuffer)": {
		"prefix": "GetDefaultPubScreen_",
		"body": "GetDefaultPubScreen_(${1:nameBuffer})",
		"description": ""
	},
	"SysReqHandler_(window,idcmpPtr,waitInput)": {
		"prefix": "SysReqHandler_",
		"body": "SysReqHandler_(${1:window,idcmpPtr,waitInput})",
		"description": ""
	},
	"NewObjectA_(classPtr,classID,tagList)": {
		"prefix": "NewObjectA_",
		"body": "NewObjectA_(${1:classPtr,classID,tagList})",
		"description": ""
	},
	"DisposeObject_(object)": {
		"prefix": "DisposeObject_",
		"body": "DisposeObject_(${1:object})",
		"description": ""
	},
	"GetAttr_(attrID,object,storagePtr)": {
		"prefix": "GetAttr_",
		"body": "GetAttr_(${1:attrID,object,storagePtr})",
		"description": ""
	},
	"NextObject_(objectPtrPtr)": {
		"prefix": "NextObject_",
		"body": "NextObject_(${1:objectPtrPtr})",
		"description": ""
	},
	"MakeClass_(classID,superClassID,superClassPtr,instanceSize,flags)": {
		"prefix": "MakeClass_",
		"body": "MakeClass_(${1:classID,superClassID,superClassPtr,instanceSize,flags})",
		"description": ""
	},
	"AddClass_(classPtr)": {
		"prefix": "AddClass_",
		"body": "AddClass_(${1:classPtr})",
		"description": ""
	},
	"GetScreenDrawInfo_(screen)": {
		"prefix": "GetScreenDrawInfo_",
		"body": "GetScreenDrawInfo_(${1:screen})",
		"description": ""
	},
	"RemoveClass_(classPtr)": {
		"prefix": "RemoveClass_",
		"body": "RemoveClass_(${1:classPtr})",
		"description": ""
	},
	"FreeClass_(classPtr)": {
		"prefix": "FreeClass_",
		"body": "FreeClass_(${1:classPtr})",
		"description": ""
	},
	"AllocScreenBuffer_(sc,bm,flags)": {
		"prefix": "AllocScreenBuffer_",
		"body": "AllocScreenBuffer_(${1:sc,bm,flags})",
		"description": ""
	},
	"ScreenDepth_(screen,flags,reserved)": {
		"prefix": "ScreenDepth_",
		"body": "ScreenDepth_(${1:screen,flags,reserved})",
		"description": ""
	},
	"ScrollWindowRaster_(win,dx,dy,xMin,yMin,xMax,yMax)": {
		"prefix": "ScrollWindowRaster_",
		"body": "ScrollWindowRaster_(${1:win,dx,dy,xMin,yMin,xMax,yMax})",
		"description": ""
	},
	"CloseIFF_(iff)": {
		"prefix": "CloseIFF_",
		"body": "CloseIFF_(${1:iff})",
		"description": ""
	},
	"FreeIFF_(iff)": {
		"prefix": "FreeIFF_",
		"body": "FreeIFF_(${1:iff})",
		"description": ""
	},
	"ReadChunkBytes_(iff,buf,numBytes)": {
		"prefix": "ReadChunkBytes_",
		"body": "ReadChunkBytes_(${1:iff,buf,numBytes})",
		"description": ""
	},
	"WriteChunkBytes_(iff,buf,numBytes)": {
		"prefix": "WriteChunkBytes_",
		"body": "WriteChunkBytes_(${1:iff,buf,numBytes})",
		"description": ""
	},
	"PopChunk_(iff)": {
		"prefix": "PopChunk_",
		"body": "PopChunk_(${1:iff})",
		"description": ""
	},
	"PropChunk_(iff,type,id)": {
		"prefix": "PropChunk_",
		"body": "PropChunk_(${1:iff,type,id})",
		"description": ""
	},
	"PropChunks_(iff,propArray,numPairs)": {
		"prefix": "PropChunks_",
		"body": "PropChunks_(${1:iff,propArray,numPairs})",
		"description": ""
	},
	"StopChunk_(iff,type,id)": {
		"prefix": "StopChunk_",
		"body": "StopChunk_(${1:iff,type,id})",
		"description": ""
	},
	"StopChunks_(iff,propArray,numPairs)": {
		"prefix": "StopChunks_",
		"body": "StopChunks_(${1:iff,propArray,numPairs})",
		"description": ""
	},
	"CollectionChunk_(iff,type,id)": {
		"prefix": "CollectionChunk_",
		"body": "CollectionChunk_(${1:iff,type,id})",
		"description": ""
	},
	"CollectionChunks_(iff,propArray,numPairs)": {
		"prefix": "CollectionChunks_",
		"body": "CollectionChunks_(${1:iff,propArray,numPairs})",
		"description": ""
	},
	"StopOnExit_(iff,type,id)": {
		"prefix": "StopOnExit_",
		"body": "StopOnExit_(${1:iff,type,id})",
		"description": ""
	},
	"FindProp_(iff,type,id)": {
		"prefix": "FindProp_",
		"body": "FindProp_(${1:iff,type,id})",
		"description": ""
	},
	"FindCollection_(iff,type,id)": {
		"prefix": "FindCollection_",
		"body": "FindCollection_(${1:iff,type,id})",
		"description": ""
	},
	"FindPropContext_(iff)": {
		"prefix": "FindPropContext_",
		"body": "FindPropContext_(${1:iff})",
		"description": ""
	},
	"CurrentChunk_(iff)": {
		"prefix": "CurrentChunk_",
		"body": "CurrentChunk_(${1:iff})",
		"description": ""
	},
	"ParentChunk_(contextNode)": {
		"prefix": "ParentChunk_",
		"body": "ParentChunk_(${1:contextNode})",
		"description": ""
	},
	"LocalItemData_(localItem)": {
		"prefix": "LocalItemData_",
		"body": "LocalItemData_(${1:localItem})",
		"description": ""
	},
	"FreeLocalItem_(localItem)": {
		"prefix": "FreeLocalItem_",
		"body": "FreeLocalItem_(${1:localItem})",
		"description": ""
	},
	"StoreLocalItem_(iff,localItem,position)": {
		"prefix": "StoreLocalItem_",
		"body": "StoreLocalItem_(${1:iff,localItem,position})",
		"description": ""
	},
	"StoreItemInContext_(iff,localItem,contextNode)": {
		"prefix": "StoreItemInContext_",
		"body": "StoreItemInContext_(${1:iff,localItem,contextNode})",
		"description": ""
	},
	"InitIFF_(iff,flags,streamHook)": {
		"prefix": "InitIFF_",
		"body": "InitIFF_(${1:iff,flags,streamHook})",
		"description": ""
	},
	"InitIFFasDOS_(iff)": {
		"prefix": "InitIFFasDOS_",
		"body": "InitIFFasDOS_(${1:iff})",
		"description": ""
	},
	"InitIFFasClip_(iff)": {
		"prefix": "InitIFFasClip_",
		"body": "InitIFFasClip_(${1:iff})",
		"description": ""
	},
	"OpenClipboard_(unitNumber)": {
		"prefix": "OpenClipboard_",
		"body": "OpenClipboard_(${1:unitNumber})",
		"description": ""
	},
	"CloseClipboard_(clipHandle)": {
		"prefix": "CloseClipboard_",
		"body": "CloseClipboard_(${1:clipHandle})",
		"description": ""
	},
	"GoodID_(id)": {
		"prefix": "GoodID_",
		"body": "GoodID_(${1:id})",
		"description": ""
	},
	"GoodType_(type)": {
		"prefix": "GoodType_",
		"body": "GoodType_(${1:type})",
		"description": ""
	},
	"GetIcon_(name,icon,freelist)": {
		"prefix": "GetIcon_",
		"body": "GetIcon_(${1:name,icon,freelist})",
		"description": ""
	},
	"FreeFreeList_(freelist)": {
		"prefix": "FreeFreeList_",
		"body": "FreeFreeList_(${1:freelist})",
		"description": ""
	},
	"AddFreeList_(freelist,mem,size)": {
		"prefix": "AddFreeList_",
		"body": "AddFreeList_(${1:freelist,mem,size})",
		"description": ""
	},
	"GetDiskObject_(name)": {
		"prefix": "GetDiskObject_",
		"body": "GetDiskObject_(${1:name})",
		"description": ""
	},
	"FreeDiskObject_(diskobj)": {
		"prefix": "FreeDiskObject_",
		"body": "FreeDiskObject_(${1:diskobj})",
		"description": ""
	},
	"GetDefDiskObject_(type)": {
		"prefix": "GetDefDiskObject_",
		"body": "GetDefDiskObject_(${1:type})",
		"description": ""
	},
	"PutDefDiskObject_(diskObject)": {
		"prefix": "PutDefDiskObject_",
		"body": "PutDefDiskObject_(${1:diskObject})",
		"description": ""
	},
	"GetDiskObjectNew_(name)": {
		"prefix": "GetDiskObjectNew_",
		"body": "GetDiskObjectNew_(${1:name})",
		"description": ""
	},
	"DeleteDiskObject_(name)": {
		"prefix": "DeleteDiskObject_",
		"body": "DeleteDiskObject_(${1:name})",
		"description": ""
	},
	"EraseRect_(rp,xMin,yMin,xMax,yMax)": {
		"prefix": "EraseRect_",
		"body": "EraseRect_(${1:rp,xMin,yMin,xMax,yMax})",
		"description": ""
	},
	"StripFont_(font)": {
		"prefix": "StripFont_",
		"body": "StripFont_(${1:font})",
		"description": ""
	},
	"ObtainBestPenA_(cm,r,g,b,tags)": {
		"prefix": "ObtainBestPenA_",
		"body": "ObtainBestPenA_(${1:cm,r,g,b,tags})",
		"description": ""
	},
	"SetRGB32_(vp,n,r,g,b)": {
		"prefix": "SetRGB32_",
		"body": "SetRGB32_(${1:vp,n,r,g,b})",
		"description": ""
	},
	"GetAPen_(rp)": {
		"prefix": "GetAPen_",
		"body": "GetAPen_(${1:rp})",
		"description": ""
	},
	"GetBPen_(rp)": {
		"prefix": "GetBPen_",
		"body": "GetBPen_(${1:rp})",
		"description": ""
	},
	"GetDrMd_(rp)": {
		"prefix": "GetDrMd_",
		"body": "GetDrMd_(${1:rp})",
		"description": ""
	},
	"GetOutlinePen_(rp)": {
		"prefix": "GetOutlinePen_",
		"body": "GetOutlinePen_(${1:rp})",
		"description": ""
	},
	"SetChipRev_(want)": {
		"prefix": "SetChipRev_",
		"body": "SetChipRev_(${1:want})",
		"description": ""
	},
	"AllocBitMap_(sizex,sizey,depth,flags,friend_bitmap)": {
		"prefix": "AllocBitMap_",
		"body": "AllocBitMap_(${1:sizex,sizey,depth,flags,friend_bitmap})",
		"description": ""
	},
	"FreeBitMap_(bm)": {
		"prefix": "FreeBitMap_",
		"body": "FreeBitMap_(${1:bm})",
		"description": ""
	},
	"CoerceMode_(vp,monitorid,flags)": {
		"prefix": "CoerceMode_",
		"body": "CoerceMode_(${1:vp,monitorid,flags})",
		"description": ""
	},
	"ChangeVPBitMap_(vp,bm,db)": {
		"prefix": "ChangeVPBitMap_",
		"body": "ChangeVPBitMap_(${1:vp,bm,db})",
		"description": ""
	},
	"AllocDBufInfo_(vp)": {
		"prefix": "AllocDBufInfo_",
		"body": "AllocDBufInfo_(${1:vp})",
		"description": ""
	},
	"FreeDBufInfo_(dbi)": {
		"prefix": "FreeDBufInfo_",
		"body": "FreeDBufInfo_(${1:dbi})",
		"description": ""
	},
	"SetRGB32CM_(cm,n,r,g,b)": {
		"prefix": "SetRGB32CM_",
		"body": "SetRGB32CM_(${1:cm,n,r,g,b})",
		"description": ""
	},
	"ScrollRasterBF_(rp,dx,dy,xMin,yMin,xMax,yMax)": {
		"prefix": "ScrollRasterBF_",
		"body": "ScrollRasterBF_(${1:rp,dx,dy,xMin,yMin,xMax,yMax})",
		"description": ""
	},
	"FindColor_(cm,r,g,b,maxcolor)": {
		"prefix": "FindColor_",
		"body": "FindColor_(${1:cm,r,g,b,maxcolor})",
		"description": ""
	},
	"FreeSpriteData_(sp)": {
		"prefix": "FreeSpriteData_",
		"body": "FreeSpriteData_(${1:sp})",
		"description": ""
	},
	"BestModeIDA_(tags)": {
		"prefix": "BestModeIDA_",
		"body": "BestModeIDA_(${1:tags})",
		"description": ""
	},
	"BltBitMap_(srcBitMap,xSrc,ySrc,destBitMap,xDest,yDest,xSize,ySize,minterm,mask,tempA)": {
		"prefix": "BltBitMap_",
		"body": "BltBitMap_(${1:srcBitMap,xSrc,ySrc,destBitMap,xDest,yDest,xSize,ySize,minterm,mask,tempA})",
		"description": ""
	},
	"ClearEOL_(rp)": {
		"prefix": "ClearEOL_",
		"body": "ClearEOL_(${1:rp})",
		"description": ""
	},
	"ClearScreen_(rp)": {
		"prefix": "ClearScreen_",
		"body": "ClearScreen_(${1:rp})",
		"description": ""
	},
	"TextLength_(rp,string,count)": {
		"prefix": "TextLength_",
		"body": "TextLength_(${1:rp,string,count})",
		"description": ""
	},
	"Text_(rp,string,count)": {
		"prefix": "Text_",
		"body": "Text_(${1:rp,string,count})",
		"description": ""
	},
	"OpenFont_(textAttr)": {
		"prefix": "OpenFont_",
		"body": "OpenFont_(${1:textAttr})",
		"description": ""
	},
	"CloseFont_(textFont)": {
		"prefix": "CloseFont_",
		"body": "CloseFont_(${1:textFont})",
		"description": ""
	},
	"AskSoftStyle_(rp)": {
		"prefix": "AskSoftStyle_",
		"body": "AskSoftStyle_(${1:rp})",
		"description": ""
	},
	"SetSoftStyle_(rp,style,enable)": {
		"prefix": "SetSoftStyle_",
		"body": "SetSoftStyle_(${1:rp,style,enable})",
		"description": ""
	},
	"DoCollision_(rp)": {
		"prefix": "DoCollision_",
		"body": "DoCollision_(${1:rp})",
		"description": ""
	},
	"InitGels_(head,tail,gelsInfo)": {
		"prefix": "InitGels_",
		"body": "InitGels_(${1:head,tail,gelsInfo})",
		"description": ""
	},
	"InitMasks_(vSprite)": {
		"prefix": "InitMasks_",
		"body": "InitMasks_(${1:vSprite})",
		"description": ""
	},
	"RemIBob_(bob,rp,vp)": {
		"prefix": "RemIBob_",
		"body": "RemIBob_(${1:bob,rp,vp})",
		"description": ""
	},
	"RemVSprite_(vSprite)": {
		"prefix": "RemVSprite_",
		"body": "RemVSprite_(${1:vSprite})",
		"description": ""
	},
	"SetCollision_(num,routine,gelsInfo)": {
		"prefix": "SetCollision_",
		"body": "SetCollision_(${1:num,routine,gelsInfo})",
		"description": ""
	},
	"SortGList_(rp)": {
		"prefix": "SortGList_",
		"body": "SortGList_(${1:rp})",
		"description": ""
	},
	"AddAnimOb_(anOb,anKey,rp)": {
		"prefix": "AddAnimOb_",
		"body": "AddAnimOb_(${1:anOb,anKey,rp})",
		"description": ""
	},
	"GetGBuffers_(anOb,rp,flag)": {
		"prefix": "GetGBuffers_",
		"body": "GetGBuffers_(${1:anOb,rp,flag})",
		"description": ""
	},
	"InitGMasks_(anOb)": {
		"prefix": "InitGMasks_",
		"body": "InitGMasks_(${1:anOb})",
		"description": ""
	},
	"DrawEllipse_(rp,xCenter,yCenter,a,b)": {
		"prefix": "DrawEllipse_",
		"body": "DrawEllipse_(${1:rp,xCenter,yCenter,a,b})",
		"description": ""
	},
	"AreaEllipse_(rp,xCenter,yCenter,a,b)": {
		"prefix": "AreaEllipse_",
		"body": "AreaEllipse_(${1:rp,xCenter,yCenter,a,b})",
		"description": ""
	},
	"LoadRGB4_(vp,colors,count)": {
		"prefix": "LoadRGB4_",
		"body": "LoadRGB4_(${1:vp,colors,count})",
		"description": ""
	},
	"InitRastPort_(rp)": {
		"prefix": "InitRastPort_",
		"body": "InitRastPort_(${1:rp})",
		"description": ""
	},
	"InitVPort_(vp)": {
		"prefix": "InitVPort_",
		"body": "InitVPort_(${1:vp})",
		"description": ""
	},
	"MrgCop_(view)": {
		"prefix": "MrgCop_",
		"body": "MrgCop_(${1:view})",
		"description": ""
	},
	"LoadView_(view)": {
		"prefix": "LoadView_",
		"body": "LoadView_(${1:view})",
		"description": ""
	},
	"Move_(rp,x,y)": {
		"prefix": "Move_",
		"body": "Move_(${1:rp,x,y})",
		"description": ""
	},
	"Draw_(rp,x,y)": {
		"prefix": "Draw_",
		"body": "Draw_(${1:rp,x,y})",
		"description": ""
	},
	"AreaMove_(rp,x,y)": {
		"prefix": "AreaMove_",
		"body": "AreaMove_(${1:rp,x,y})",
		"description": ""
	},
	"AreaDraw_(rp,x,y)": {
		"prefix": "AreaDraw_",
		"body": "AreaDraw_(${1:rp,x,y})",
		"description": ""
	},
	"AreaEnd_(rp)": {
		"prefix": "AreaEnd_",
		"body": "AreaEnd_(${1:rp})",
		"description": ""
	},
	"QBlit_(blit)": {
		"prefix": "QBlit_",
		"body": "QBlit_(${1:blit})",
		"description": ""
	},
	"InitArea_(areaInfo,vectorBuffer,maxVectors)": {
		"prefix": "InitArea_",
		"body": "InitArea_(${1:areaInfo,vectorBuffer,maxVectors})",
		"description": ""
	},
	"SetRGB4_(vp,index,red,green,blue)": {
		"prefix": "SetRGB4_",
		"body": "SetRGB4_(${1:vp,index,red,green,blue})",
		"description": ""
	},
	"QBSBlit_(blit)": {
		"prefix": "QBSBlit_",
		"body": "QBSBlit_(${1:blit})",
		"description": ""
	},
	"BltClear_(memBlock,byteCount,flags)": {
		"prefix": "BltClear_",
		"body": "BltClear_(${1:memBlock,byteCount,flags})",
		"description": ""
	},
	"RectFill_(rp,xMin,yMin,xMax,yMax)": {
		"prefix": "RectFill_",
		"body": "RectFill_(${1:rp,xMin,yMin,xMax,yMax})",
		"description": ""
	},
	"BltPattern_(rp,mask,xMin,yMin,xMax,yMax,maskBPR)": {
		"prefix": "BltPattern_",
		"body": "BltPattern_(${1:rp,mask,xMin,yMin,xMax,yMax,maskBPR})",
		"description": ""
	},
	"ReadPixel_(rp,x,y)": {
		"prefix": "ReadPixel_",
		"body": "ReadPixel_(${1:rp,x,y})",
		"description": ""
	},
	"WritePixel_(rp,x,y)": {
		"prefix": "WritePixel_",
		"body": "WritePixel_(${1:rp,x,y})",
		"description": ""
	},
	"PolyDraw_(rp,count,polyTable)": {
		"prefix": "PolyDraw_",
		"body": "PolyDraw_(${1:rp,count,polyTable})",
		"description": ""
	},
	"InitView_(view)": {
		"prefix": "InitView_",
		"body": "InitView_(${1:view})",
		"description": ""
	},
	"CBump_(copList)": {
		"prefix": "CBump_",
		"body": "CBump_(${1:copList})",
		"description": ""
	},
	"CMove_(copList,destination,data)": {
		"prefix": "CMove_",
		"body": "CMove_(${1:copList,destination,data})",
		"description": ""
	},
	"CWait_(copList,v,h)": {
		"prefix": "CWait_",
		"body": "CWait_(${1:copList,v,h})",
		"description": ""
	},
	"ScrollRaster_(rp,dx,dy,xMin,yMin,xMax,yMax)": {
		"prefix": "ScrollRaster_",
		"body": "ScrollRaster_(${1:rp,dx,dy,xMin,yMin,xMax,yMax})",
		"description": ""
	},
	"WaitBOVP_(vp)": {
		"prefix": "WaitBOVP_",
		"body": "WaitBOVP_(${1:vp})",
		"description": ""
	},
	"FreeSprite_(num)": {
		"prefix": "FreeSprite_",
		"body": "FreeSprite_(${1:num})",
		"description": ""
	},
	"ChangeSprite_(vp,sprite,newData)": {
		"prefix": "ChangeSprite_",
		"body": "ChangeSprite_(${1:vp,sprite,newData})",
		"description": ""
	},
	"LockLayerRom_(layer)": {
		"prefix": "LockLayerRom_",
		"body": "LockLayerRom_(${1:layer})",
		"description": ""
	},
	"UnlockLayerRom_(layer)": {
		"prefix": "UnlockLayerRom_",
		"body": "UnlockLayerRom_(${1:layer})",
		"description": ""
	},
	"SyncSBitMap_(layer)": {
		"prefix": "SyncSBitMap_",
		"body": "SyncSBitMap_(${1:layer})",
		"description": ""
	},
	"CopySBitMap_(layer)": {
		"prefix": "CopySBitMap_",
		"body": "CopySBitMap_(${1:layer})",
		"description": ""
	},
	"InitTmpRas_(tmpRas,buffer,size)": {
		"prefix": "InitTmpRas_",
		"body": "InitTmpRas_(${1:tmpRas,buffer,size})",
		"description": ""
	},
	"AddFont_(textFont)": {
		"prefix": "AddFont_",
		"body": "AddFont_(${1:textFont})",
		"description": ""
	},
	"RemFont_(textFont)": {
		"prefix": "RemFont_",
		"body": "RemFont_(${1:textFont})",
		"description": ""
	},
	"FreeRaster_(p,width,height)": {
		"prefix": "FreeRaster_",
		"body": "FreeRaster_(${1:p,width,height})",
		"description": ""
	},
	"ClearRegion_(region)": {
		"prefix": "ClearRegion_",
		"body": "ClearRegion_(${1:region})",
		"description": ""
	},
	"DisposeRegion_(region)": {
		"prefix": "DisposeRegion_",
		"body": "DisposeRegion_(${1:region})",
		"description": ""
	},
	"FreeVPortCopLists_(vp)": {
		"prefix": "FreeVPortCopLists_",
		"body": "FreeVPortCopLists_(${1:vp})",
		"description": ""
	},
	"FreeCopList_(copList)": {
		"prefix": "FreeCopList_",
		"body": "FreeCopList_(${1:copList})",
		"description": ""
	},
	"ClipBlit_(srcRP,xSrc,ySrc,destRP,xDest,yDest,xSize,ySize,minterm)": {
		"prefix": "ClipBlit_",
		"body": "ClipBlit_(${1:srcRP,xSrc,ySrc,destRP,xDest,yDest,xSize,ySize,minterm})",
		"description": ""
	},
	"FreeCprList_(cprList)": {
		"prefix": "FreeCprList_",
		"body": "FreeCprList_(${1:cprList})",
		"description": ""
	},
	"GetColorMap_(entries)": {
		"prefix": "GetColorMap_",
		"body": "GetColorMap_(${1:entries})",
		"description": ""
	},
	"FreeColorMap_(colorMap)": {
		"prefix": "FreeColorMap_",
		"body": "FreeColorMap_(${1:colorMap})",
		"description": ""
	},
	"ScrollVPort_(vp)": {
		"prefix": "ScrollVPort_",
		"body": "ScrollVPort_(${1:vp})",
		"description": ""
	},
	"FreeGBuffers_(anOb,rp,flag)": {
		"prefix": "FreeGBuffers_",
		"body": "FreeGBuffers_(${1:anOb,rp,flag})",
		"description": ""
	},
	"BltBitMapRastPort_(srcBitMap,xSrc,ySrc,destRP,xDest,yDest,xSize,ySize,minterm)": {
		"prefix": "BltBitMapRastPort_",
		"body": "BltBitMapRastPort_(${1:srcBitMap,xSrc,ySrc,destRP,xDest,yDest,xSize,ySize,minterm})",
		"description": ""
	},
	"SetRGB4CM_(colorMap,index,red,green,blue)": {
		"prefix": "SetRGB4CM_",
		"body": "SetRGB4CM_(${1:colorMap,index,red,green,blue})",
		"description": ""
	},
	"AttemptLockLayerRom_(layer)": {
		"prefix": "AttemptLockLayerRom_",
		"body": "AttemptLockLayerRom_(${1:layer})",
		"description": ""
	},
	"GfxNew_(gfxNodeType)": {
		"prefix": "GfxNew_",
		"body": "GfxNew_(${1:gfxNodeType})",
		"description": ""
	},
	"GfxFree_(gfxNodePtr)": {
		"prefix": "GfxFree_",
		"body": "GfxFree_(${1:gfxNodePtr})",
		"description": ""
	},
	"BitMapScale_(bitScaleArgs)": {
		"prefix": "BitMapScale_",
		"body": "BitMapScale_(${1:bitScaleArgs})",
		"description": ""
	},
	"ScalerDiv_(factor,numerator,denominator)": {
		"prefix": "ScalerDiv_",
		"body": "ScalerDiv_(${1:factor,numerator,denominator})",
		"description": ""
	},
	"GfxLookUp_(associateNode)": {
		"prefix": "GfxLookUp_",
		"body": "GfxLookUp_(${1:associateNode})",
		"description": ""
	},
	"CloseMonitor_(monitorSpec)": {
		"prefix": "CloseMonitor_",
		"body": "CloseMonitor_(${1:monitorSpec})",
		"description": ""
	},
	"FindDisplayInfo_(displayID)": {
		"prefix": "FindDisplayInfo_",
		"body": "FindDisplayInfo_(${1:displayID})",
		"description": ""
	},
	"NextDisplayInfo_(displayID)": {
		"prefix": "NextDisplayInfo_",
		"body": "NextDisplayInfo_(${1:displayID})",
		"description": ""
	},
	"GetDisplayInfoData_(handle,buf,size,tagID,displayID)": {
		"prefix": "GetDisplayInfoData_",
		"body": "GetDisplayInfoData_(${1:handle,buf,size,tagID,displayID})",
		"description": ""
	},
	"ReadPixelArray8_(rp,xstart,ystart,xstop,ystop,array,temprp)": {
		"prefix": "ReadPixelArray8_",
		"body": "ReadPixelArray8_(${1:rp,xstart,ystart,xstop,ystop,array,temprp})",
		"description": ""
	},
	"WritePixelArray8_(rp,xstart,ystart,xstop,ystop,array,temprp)": {
		"prefix": "WritePixelArray8_",
		"body": "WritePixelArray8_(${1:rp,xstart,ystart,xstop,ystop,array,temprp})",
		"description": ""
	},
	"GetVPModeID_(vp)": {
		"prefix": "GetVPModeID_",
		"body": "GetVPModeID_(${1:vp})",
		"description": ""
	},
	"ModeNotAvailable_(modeID)": {
		"prefix": "ModeNotAvailable_",
		"body": "ModeNotAvailable_(${1:modeID})",
		"description": ""
	},
	"WeighTAMatch_(reqTextAttr,targetTextAttr,targetTags)": {
		"prefix": "WeighTAMatch_",
		"body": "WeighTAMatch_(${1:reqTextAttr,targetTextAttr,targetTags})",
		"description": ""
	},
	"FreeGadgets_(gad)": {
		"prefix": "FreeGadgets_",
		"body": "FreeGadgets_(${1:gad})",
		"description": ""
	},
	"FreeMenus_(menu)": {
		"prefix": "FreeMenus_",
		"body": "FreeMenus_(${1:menu})",
		"description": ""
	},
	"LayoutMenuItemsA_(firstitem,vi,taglist)": {
		"prefix": "LayoutMenuItemsA_",
		"body": "LayoutMenuItemsA_(${1:firstitem,vi,taglist})",
		"description": ""
	},
	"LayoutMenusA_(firstmenu,vi,taglist)": {
		"prefix": "LayoutMenusA_",
		"body": "LayoutMenusA_(${1:firstmenu,vi,taglist})",
		"description": ""
	},
	"GT_GetIMsg_(iport)": {
		"prefix": "GT_GetIMsg_",
		"body": "GT_GetIMsg_(${1:iport})",
		"description": ""
	},
	"GT_ReplyIMsg_(imsg)": {
		"prefix": "GT_ReplyIMsg_",
		"body": "GT_ReplyIMsg_(${1:imsg})",
		"description": ""
	},
	"GT_BeginRefresh_(win)": {
		"prefix": "GT_BeginRefresh_",
		"body": "GT_BeginRefresh_(${1:win})",
		"description": ""
	},
	"GT_FilterIMsg_(imsg)": {
		"prefix": "GT_FilterIMsg_",
		"body": "GT_FilterIMsg_(${1:imsg})",
		"description": ""
	},
	"GT_PostFilterIMsg_(imsg)": {
		"prefix": "GT_PostFilterIMsg_",
		"body": "GT_PostFilterIMsg_(${1:imsg})",
		"description": ""
	},
	"CreateContext_(glistptr)": {
		"prefix": "CreateContext_",
		"body": "CreateContext_(${1:glistptr})",
		"description": ""
	},
	"FreeVisualInfo_(vi)": {
		"prefix": "FreeVisualInfo_",
		"body": "FreeVisualInfo_(${1:vi})",
		"description": ""
	},
	"AddConfigDev_(configDev)": {
		"prefix": "AddConfigDev_",
		"body": "AddConfigDev_(${1:configDev})",
		"description": ""
	},
	"AllocBoardMem_(slotSpec)": {
		"prefix": "AllocBoardMem_",
		"body": "AllocBoardMem_(${1:slotSpec})",
		"description": ""
	},
	"ConfigChain_(baseAddr)": {
		"prefix": "ConfigChain_",
		"body": "ConfigChain_(${1:baseAddr})",
		"description": ""
	},
	"FindConfigDev_(oldConfigDev,manufacturer,product)": {
		"prefix": "FindConfigDev_",
		"body": "FindConfigDev_(${1:oldConfigDev,manufacturer,product})",
		"description": ""
	},
	"FreeConfigDev_(configDev)": {
		"prefix": "FreeConfigDev_",
		"body": "FreeConfigDev_(${1:configDev})",
		"description": ""
	},
	"RemConfigDev_(configDev)": {
		"prefix": "RemConfigDev_",
		"body": "RemConfigDev_(${1:configDev})",
		"description": ""
	},
	"WriteExpansionByte_(board,offset,byte)": {
		"prefix": "WriteExpansionByte_",
		"body": "WriteExpansionByte_(${1:board,offset,byte})",
		"description": ""
	},
	"MakeDosNode_(parmPacket)": {
		"prefix": "MakeDosNode_",
		"body": "MakeDosNode_(${1:parmPacket})",
		"description": ""
	},
	"AddDosNode_(bootPri,flags,deviceNode)": {
		"prefix": "AddDosNode_",
		"body": "AddDosNode_(${1:bootPri,flags,deviceNode})",
		"description": ""
	},
	"Supervisor_(userFunction)": {
		"prefix": "Supervisor_",
		"body": "Supervisor_(${1:userFunction})",
		"description": ""
	},
	"InitStruct_(initTable,memory,size)": {
		"prefix": "InitStruct_",
		"body": "InitStruct_(${1:initTable,memory,size})",
		"description": ""
	},
	"MakeLibrary_(funcInit,structInit,libInit,dataSize,segList)": {
		"prefix": "MakeLibrary_",
		"body": "MakeLibrary_(${1:funcInit,structInit,libInit,dataSize,segList})",
		"description": ""
	},
	"MakeFunctions_(target,functionArray,funcDispBase)": {
		"prefix": "MakeFunctions_",
		"body": "MakeFunctions_(${1:target,functionArray,funcDispBase})",
		"description": ""
	},
	"FindResident_(name)": {
		"prefix": "FindResident_",
		"body": "FindResident_(${1:name})",
		"description": ""
	},
	"Alert_(alertNum)": {
		"prefix": "Alert_",
		"body": "Alert_(${1:alertNum})",
		"description": ""
	},
	"Debug_(flags)": {
		"prefix": "Debug_",
		"body": "Debug_(${1:flags})",
		"description": ""
	},
	"UserState_(sysStack)": {
		"prefix": "UserState_",
		"body": "UserState_(${1:sysStack})",
		"description": ""
	},
	"Cause_(interrupt)": {
		"prefix": "Cause_",
		"body": "Cause_(${1:interrupt})",
		"description": ""
	},
	"Deallocate_(freeList,memoryBlock,byteSize)": {
		"prefix": "Deallocate_",
		"body": "Deallocate_(${1:freeList,memoryBlock,byteSize})",
		"description": ""
	},
	"AvailMem_(requirements)": {
		"prefix": "AvailMem_",
		"body": "AvailMem_(${1:requirements})",
		"description": ""
	},
	"AllocEntry_(entry)": {
		"prefix": "AllocEntry_",
		"body": "AllocEntry_(${1:entry})",
		"description": ""
	},
	"FreeEntry_(entry)": {
		"prefix": "FreeEntry_",
		"body": "FreeEntry_(${1:entry})",
		"description": ""
	},
	"Insert_(list,node,pred)": {
		"prefix": "Insert_",
		"body": "Insert_(${1:list,node,pred})",
		"description": ""
	},
	"Remove_(node)": {
		"prefix": "Remove_",
		"body": "Remove_(${1:node})",
		"description": ""
	},
	"RemHead_(list)": {
		"prefix": "RemHead_",
		"body": "RemHead_(${1:list})",
		"description": ""
	},
	"RemTail_(list)": {
		"prefix": "RemTail_",
		"body": "RemTail_(${1:list})",
		"description": ""
	},
	"AddTask_(task,initPC,finalPC)": {
		"prefix": "AddTask_",
		"body": "AddTask_(${1:task,initPC,finalPC})",
		"description": ""
	},
	"RemTask_(task)": {
		"prefix": "RemTask_",
		"body": "RemTask_(${1:task})",
		"description": ""
	},
	"FindTask_(name)": {
		"prefix": "FindTask_",
		"body": "FindTask_(${1:name})",
		"description": ""
	},
	"Wait_(signalSet)": {
		"prefix": "Wait_",
		"body": "Wait_(${1:signalSet})",
		"description": ""
	},
	"AllocSignal_(signalNum)": {
		"prefix": "AllocSignal_",
		"body": "AllocSignal_(${1:signalNum})",
		"description": ""
	},
	"FreeSignal_(signalNum)": {
		"prefix": "FreeSignal_",
		"body": "FreeSignal_(${1:signalNum})",
		"description": ""
	},
	"AllocTrap_(trapNum)": {
		"prefix": "AllocTrap_",
		"body": "AllocTrap_(${1:trapNum})",
		"description": ""
	},
	"FreeTrap_(trapNum)": {
		"prefix": "FreeTrap_",
		"body": "FreeTrap_(${1:trapNum})",
		"description": ""
	},
	"AddPort_(port)": {
		"prefix": "AddPort_",
		"body": "AddPort_(${1:port})",
		"description": ""
	},
	"RemPort_(port)": {
		"prefix": "RemPort_",
		"body": "RemPort_(${1:port})",
		"description": ""
	},
	"GetMsg_(port)": {
		"prefix": "GetMsg_",
		"body": "GetMsg_(${1:port})",
		"description": ""
	},
	"ReplyMsg_(message)": {
		"prefix": "ReplyMsg_",
		"body": "ReplyMsg_(${1:message})",
		"description": ""
	},
	"WaitPort_(port)": {
		"prefix": "WaitPort_",
		"body": "WaitPort_(${1:port})",
		"description": ""
	},
	"FindPort_(name)": {
		"prefix": "FindPort_",
		"body": "FindPort_(${1:name})",
		"description": ""
	},
	"AddLibrary_(library)": {
		"prefix": "AddLibrary_",
		"body": "AddLibrary_(${1:library})",
		"description": ""
	},
	"RemLibrary_(library)": {
		"prefix": "RemLibrary_",
		"body": "RemLibrary_(${1:library})",
		"description": ""
	},
	"OldOpenLibrary_(libName)": {
		"prefix": "OldOpenLibrary_",
		"body": "OldOpenLibrary_(${1:libName})",
		"description": ""
	},
	"CloseLibrary_(library)": {
		"prefix": "CloseLibrary_",
		"body": "CloseLibrary_(${1:library})",
		"description": ""
	},
	"SetFunction_(library,funcOffset,newFunction)": {
		"prefix": "SetFunction_",
		"body": "SetFunction_(${1:library,funcOffset,newFunction})",
		"description": ""
	},
	"SumLibrary_(library)": {
		"prefix": "SumLibrary_",
		"body": "SumLibrary_(${1:library})",
		"description": ""
	},
	"AddDevice_(device)": {
		"prefix": "AddDevice_",
		"body": "AddDevice_(${1:device})",
		"description": ""
	},
	"RemDevice_(device)": {
		"prefix": "RemDevice_",
		"body": "RemDevice_(${1:device})",
		"description": ""
	},
	"CloseDevice_(ioRequest)": {
		"prefix": "CloseDevice_",
		"body": "CloseDevice_(${1:ioRequest})",
		"description": ""
	},
	"DoIO_(ioRequest)": {
		"prefix": "DoIO_",
		"body": "DoIO_(${1:ioRequest})",
		"description": ""
	},
	"SendIO_(ioRequest)": {
		"prefix": "SendIO_",
		"body": "SendIO_(${1:ioRequest})",
		"description": ""
	},
	"CheckIO_(ioRequest)": {
		"prefix": "CheckIO_",
		"body": "CheckIO_(${1:ioRequest})",
		"description": ""
	},
	"WaitIO_(ioRequest)": {
		"prefix": "WaitIO_",
		"body": "WaitIO_(${1:ioRequest})",
		"description": ""
	},
	"AbortIO_(ioRequest)": {
		"prefix": "AbortIO_",
		"body": "AbortIO_(${1:ioRequest})",
		"description": ""
	},
	"AddResource_(resource)": {
		"prefix": "AddResource_",
		"body": "AddResource_(${1:resource})",
		"description": ""
	},
	"RemResource_(resource)": {
		"prefix": "RemResource_",
		"body": "RemResource_(${1:resource})",
		"description": ""
	},
	"OpenResource_(resName)": {
		"prefix": "OpenResource_",
		"body": "OpenResource_(${1:resName})",
		"description": ""
	},
	"TypeOfMem_(address)": {
		"prefix": "TypeOfMem_",
		"body": "TypeOfMem_(${1:address})",
		"description": ""
	},
	"InitSemaphore_(sigSem)": {
		"prefix": "InitSemaphore_",
		"body": "InitSemaphore_(${1:sigSem})",
		"description": ""
	},
	"ObtainSemaphore_(sigSem)": {
		"prefix": "ObtainSemaphore_",
		"body": "ObtainSemaphore_(${1:sigSem})",
		"description": ""
	},
	"ReleaseSemaphore_(sigSem)": {
		"prefix": "ReleaseSemaphore_",
		"body": "ReleaseSemaphore_(${1:sigSem})",
		"description": ""
	},
	"AttemptSemaphore_(sigSem)": {
		"prefix": "AttemptSemaphore_",
		"body": "AttemptSemaphore_(${1:sigSem})",
		"description": ""
	},
	"ObtainSemaphoreList_(sigSem)": {
		"prefix": "ObtainSemaphoreList_",
		"body": "ObtainSemaphoreList_(${1:sigSem})",
		"description": ""
	},
	"ReleaseSemaphoreList_(sigSem)": {
		"prefix": "ReleaseSemaphoreList_",
		"body": "ReleaseSemaphoreList_(${1:sigSem})",
		"description": ""
	},
	"FindSemaphore_(sigSem)": {
		"prefix": "FindSemaphore_",
		"body": "FindSemaphore_(${1:sigSem})",
		"description": ""
	},
	"AddSemaphore_(sigSem)": {
		"prefix": "AddSemaphore_",
		"body": "AddSemaphore_(${1:sigSem})",
		"description": ""
	},
	"RemSemaphore_(sigSem)": {
		"prefix": "RemSemaphore_",
		"body": "RemSemaphore_(${1:sigSem})",
		"description": ""
	},
	"AddMemList_(size,attributes,pri,base,name)": {
		"prefix": "AddMemList_",
		"body": "AddMemList_(${1:size,attributes,pri,base,name})",
		"description": ""
	},
	"CopyMem_(source,dest,size)": {
		"prefix": "CopyMem_",
		"body": "CopyMem_(${1:source,dest,size})",
		"description": ""
	},
	"CopyMemQuick_(source,dest,size)": {
		"prefix": "CopyMemQuick_",
		"body": "CopyMemQuick_(${1:source,dest,size})",
		"description": ""
	},
	"CacheClearE_(address,length,caches)": {
		"prefix": "CacheClearE_",
		"body": "CacheClearE_(${1:address,length,caches})",
		"description": ""
	},
	"DeleteIORequest_(iorequest)": {
		"prefix": "DeleteIORequest_",
		"body": "DeleteIORequest_(${1:iorequest})",
		"description": ""
	},
	"DeleteMsgPort_(port)": {
		"prefix": "DeleteMsgPort_",
		"body": "DeleteMsgPort_(${1:port})",
		"description": ""
	},
	"ObtainSemaphoreShared_(sigSem)": {
		"prefix": "ObtainSemaphoreShared_",
		"body": "ObtainSemaphoreShared_(${1:sigSem})",
		"description": ""
	},
	"FreeVec_(memoryBlock)": {
		"prefix": "FreeVec_",
		"body": "FreeVec_(${1:memoryBlock})",
		"description": ""
	},
	"CreatePool_(requirements,puddleSize,threshSize)": {
		"prefix": "CreatePool_",
		"body": "CreatePool_(${1:requirements,puddleSize,threshSize})",
		"description": ""
	},
	"DeletePool_(poolHeader)": {
		"prefix": "DeletePool_",
		"body": "DeletePool_(${1:poolHeader})",
		"description": ""
	},
	"FreePooled_(poolHeader,memory,memSize)": {
		"prefix": "FreePooled_",
		"body": "FreePooled_(${1:poolHeader,memory,memSize})",
		"description": ""
	},
	"AttemptSemaphoreShared_(sigSem)": {
		"prefix": "AttemptSemaphoreShared_",
		"body": "AttemptSemaphoreShared_(${1:sigSem})",
		"description": ""
	},
	"StackSwap_(newStack)": {
		"prefix": "StackSwap_",
		"body": "StackSwap_(${1:newStack})",
		"description": ""
	},
	"ChildFree_(tid)": {
		"prefix": "ChildFree_",
		"body": "ChildFree_(${1:tid})",
		"description": ""
	},
	"ChildOrphan_(tid)": {
		"prefix": "ChildOrphan_",
		"body": "ChildOrphan_(${1:tid})",
		"description": ""
	},
	"ChildStatus_(tid)": {
		"prefix": "ChildStatus_",
		"body": "ChildStatus_(${1:tid})",
		"description": ""
	},
	"ChildWait_(tid)": {
		"prefix": "ChildWait_",
		"body": "ChildWait_(${1:tid})",
		"description": ""
	},
	"CachePreDMA_(address,length,flags)": {
		"prefix": "CachePreDMA_",
		"body": "CachePreDMA_(${1:address,length,flags})",
		"description": ""
	},
	"CachePostDMA_(address,length,flags)": {
		"prefix": "CachePostDMA_",
		"body": "CachePostDMA_(${1:address,length,flags})",
		"description": ""
	},
	"AddMemHandler_(memhand)": {
		"prefix": "AddMemHandler_",
		"body": "AddMemHandler_(${1:memhand})",
		"description": ""
	},
	"RemMemHandler_(memhand)": {
		"prefix": "RemMemHandler_",
		"body": "RemMemHandler_(${1:memhand})",
		"description": ""
	},
	"ReadItem_(name,maxchars,cSource)": {
		"prefix": "ReadItem_",
		"body": "ReadItem_(${1:name,maxchars,cSource})",
		"description": ""
	},
	"MatchNext_(anchor)": {
		"prefix": "MatchNext_",
		"body": "MatchNext_(${1:anchor})",
		"description": ""
	},
	"MatchEnd_(anchor)": {
		"prefix": "MatchEnd_",
		"body": "MatchEnd_(${1:anchor})",
		"description": ""
	},
	"ParsePattern_(pat,buf,buflen)": {
		"prefix": "ParsePattern_",
		"body": "ParsePattern_(${1:pat,buf,buflen})",
		"description": ""
	},
	"FreeArgs_(args)": {
		"prefix": "FreeArgs_",
		"body": "FreeArgs_(${1:args})",
		"description": ""
	},
	"FilePart_(path)": {
		"prefix": "FilePart_",
		"body": "FilePart_(${1:path})",
		"description": ""
	},
	"PathPart_(path)": {
		"prefix": "PathPart_",
		"body": "PathPart_(${1:path})",
		"description": ""
	},
	"AddPart_(dirname,filename,size)": {
		"prefix": "AddPart_",
		"body": "AddPart_(${1:dirname,filename,size})",
		"description": ""
	},
	"StartNotify_(notify)": {
		"prefix": "StartNotify_",
		"body": "StartNotify_(${1:notify})",
		"description": ""
	},
	"EndNotify_(notify)": {
		"prefix": "EndNotify_",
		"body": "EndNotify_(${1:notify})",
		"description": ""
	},
	"CliInitNewcli_(dp)": {
		"prefix": "CliInitNewcli_",
		"body": "CliInitNewcli_(${1:dp})",
		"description": ""
	},
	"CliInitRun_(dp)": {
		"prefix": "CliInitRun_",
		"body": "CliInitRun_(${1:dp})",
		"description": ""
	},
	"PutStr_(str)": {
		"prefix": "PutStr_",
		"body": "PutStr_(${1:str})",
		"description": ""
	},
	"ParsePatternNoCase_(pat,buf,buflen)": {
		"prefix": "ParsePatternNoCase_",
		"body": "ParsePatternNoCase_(${1:pat,buf,buflen})",
		"description": ""
	},
	"ExAllEnd_(lock,buffer,size,data,control)": {
		"prefix": "ExAllEnd_",
		"body": "ExAllEnd_(${1:lock,buffer,size,data,control})",
		"description": ""
	},
	"Close_(file)": {
		"prefix": "Close_",
		"body": "Close_(${1:file})",
		"description": ""
	},
	"Read_(file,buffer,length)": {
		"prefix": "Read_",
		"body": "Read_(${1:file,buffer,length})",
		"description": ""
	},
	"Write_(file,buffer,length)": {
		"prefix": "Write_",
		"body": "Write_(${1:file,buffer,length})",
		"description": ""
	},
	"Seek_(file,position,offset)": {
		"prefix": "Seek_",
		"body": "Seek_(${1:file,position,offset})",
		"description": ""
	},
	"DeleteFile_(name)": {
		"prefix": "DeleteFile_",
		"body": "DeleteFile_(${1:name})",
		"description": ""
	},
	"UnLock_(lock)": {
		"prefix": "UnLock_",
		"body": "UnLock_(${1:lock})",
		"description": ""
	},
	"DupLock_(lock)": {
		"prefix": "DupLock_",
		"body": "DupLock_(${1:lock})",
		"description": ""
	},
	"CreateDir_(name)": {
		"prefix": "CreateDir_",
		"body": "CreateDir_(${1:name})",
		"description": ""
	},
	"CurrentDir_(lock)": {
		"prefix": "CurrentDir_",
		"body": "CurrentDir_(${1:lock})",
		"description": ""
	},
	"Exit_(returnCode)": {
		"prefix": "Exit_",
		"body": "Exit_(${1:returnCode})",
		"description": ""
	},
	"LoadSeg_(name)": {
		"prefix": "LoadSeg_",
		"body": "LoadSeg_(${1:name})",
		"description": ""
	},
	"UnLoadSeg_(seglist)": {
		"prefix": "UnLoadSeg_",
		"body": "UnLoadSeg_(${1:seglist})",
		"description": ""
	},
	"DeviceProc_(name)": {
		"prefix": "DeviceProc_",
		"body": "DeviceProc_(${1:name})",
		"description": ""
	},
	"DateStamp_(date)": {
		"prefix": "DateStamp_",
		"body": "DateStamp_(${1:date})",
		"description": ""
	},
	"Delay_(timeout)": {
		"prefix": "Delay_",
		"body": "Delay_(${1:timeout})",
		"description": ""
	},
	"ParentDir_(lock)": {
		"prefix": "ParentDir_",
		"body": "ParentDir_(${1:lock})",
		"description": ""
	},
	"IsInteractive_(file)": {
		"prefix": "IsInteractive_",
		"body": "IsInteractive_(${1:file})",
		"description": ""
	},
	"Execute_(string,file,file2)": {
		"prefix": "Execute_",
		"body": "Execute_(${1:string,file,file2})",
		"description": ""
	},
	"DoPkt_(port,action,arg1,arg2,arg3,arg4,arg5)": {
		"prefix": "DoPkt_",
		"body": "DoPkt_(${1:port,action,arg1,arg2,arg3,arg4,arg5})",
		"description": ""
	},
	"SendPkt_(dp,port,replyport)": {
		"prefix": "SendPkt_",
		"body": "SendPkt_(${1:dp,port,replyport})",
		"description": ""
	},
	"ReplyPkt_(dp,res1,res2)": {
		"prefix": "ReplyPkt_",
		"body": "ReplyPkt_(${1:dp,res1,res2})",
		"description": ""
	},
	"LockRecord_(fh,offset,length,mode,timeout)": {
		"prefix": "LockRecord_",
		"body": "LockRecord_(${1:fh,offset,length,mode,timeout})",
		"description": ""
	},
	"UnLockRecord_(fh,offset,length)": {
		"prefix": "UnLockRecord_",
		"body": "UnLockRecord_(${1:fh,offset,length})",
		"description": ""
	},
	"UnLockRecords_(recArray)": {
		"prefix": "UnLockRecords_",
		"body": "UnLockRecords_(${1:recArray})",
		"description": ""
	},
	"SelectInput_(fh)": {
		"prefix": "SelectInput_",
		"body": "SelectInput_(${1:fh})",
		"description": ""
	},
	"SelectOutput_(fh)": {
		"prefix": "SelectOutput_",
		"body": "SelectOutput_(${1:fh})",
		"description": ""
	},
	"FGetC_(fh)": {
		"prefix": "FGetC_",
		"body": "FGetC_(${1:fh})",
		"description": ""
	},
	"FGets_(fh,buf,buflen)": {
		"prefix": "FGets_",
		"body": "FGets_(${1:fh,buf,buflen})",
		"description": ""
	},
	"VFWritef_(fh,format,argarray)": {
		"prefix": "VFWritef_",
		"body": "VFWritef_(${1:fh,format,argarray})",
		"description": ""
	},
	"VFPrintf_(fh,format,argarray)": {
		"prefix": "VFPrintf_",
		"body": "VFPrintf_(${1:fh,format,argarray})",
		"description": ""
	},
	"Flush_(fh)": {
		"prefix": "Flush_",
		"body": "Flush_(${1:fh})",
		"description": ""
	},
	"DupLockFromFH_(fh)": {
		"prefix": "DupLockFromFH_",
		"body": "DupLockFromFH_(${1:fh})",
		"description": ""
	},
	"OpenFromLock_(lock)": {
		"prefix": "OpenFromLock_",
		"body": "OpenFromLock_(${1:lock})",
		"description": ""
	},
	"ParentOfFH_(fh)": {
		"prefix": "ParentOfFH_",
		"body": "ParentOfFH_(${1:fh})",
		"description": ""
	},
	"NameFromLock_(lock,buffer,len)": {
		"prefix": "NameFromLock_",
		"body": "NameFromLock_(${1:lock,buffer,len})",
		"description": ""
	},
	"NameFromFH_(fh,buffer,len)": {
		"prefix": "NameFromFH_",
		"body": "NameFromFH_(${1:fh,buffer,len})",
		"description": ""
	},
	"SplitName_(name,seperator,buf,oldpos,size)": {
		"prefix": "SplitName_",
		"body": "SplitName_(${1:name,seperator,buf,oldpos,size})",
		"description": ""
	},
	"ExAll_(lock,buffer,size,data,control)": {
		"prefix": "ExAll_",
		"body": "ExAll_(${1:lock,buffer,size,data,control})",
		"description": ""
	},
	"ReadLink_(port,lock,path,buffer,size)": {
		"prefix": "ReadLink_",
		"body": "ReadLink_(${1:port,lock,path,buffer,size})",
		"description": ""
	},
	"MakeLink_(name,dest,soft)": {
		"prefix": "MakeLink_",
		"body": "MakeLink_(${1:name,dest,soft})",
		"description": ""
	},
	"ChangeMode_(type,fh,newmode)": {
		"prefix": "ChangeMode_",
		"body": "ChangeMode_(${1:type,fh,newmode})",
		"description": ""
	},
	"SetFileSize_(fh,pos,mode)": {
		"prefix": "SetFileSize_",
		"body": "SetFileSize_(${1:fh,pos,mode})",
		"description": ""
	},
	"SetIoErr_(result)": {
		"prefix": "SetIoErr_",
		"body": "SetIoErr_(${1:result})",
		"description": ""
	},
	"CreateNewProc_(tags)": {
		"prefix": "CreateNewProc_",
		"body": "CreateNewProc_(${1:tags})",
		"description": ""
	},
	"SetConsoleTask_(task)": {
		"prefix": "SetConsoleTask_",
		"body": "SetConsoleTask_(${1:task})",
		"description": ""
	},
	"SetFileSysTask_(task)": {
		"prefix": "SetFileSysTask_",
		"body": "SetFileSysTask_(${1:task})",
		"description": ""
	},
	"SetArgStr_(string)": {
		"prefix": "SetArgStr_",
		"body": "SetArgStr_(${1:string})",
		"description": ""
	},
	"FindCliProc_(num)": {
		"prefix": "FindCliProc_",
		"body": "FindCliProc_(${1:num})",
		"description": ""
	},
	"SetCurrentDirName_(name)": {
		"prefix": "SetCurrentDirName_",
		"body": "SetCurrentDirName_(${1:name})",
		"description": ""
	},
	"SetProgramName_(name)": {
		"prefix": "SetProgramName_",
		"body": "SetProgramName_(${1:name})",
		"description": ""
	},
	"SetPrompt_(name)": {
		"prefix": "SetPrompt_",
		"body": "SetPrompt_(${1:name})",
		"description": ""
	},
	"SetProgramDir_(lock)": {
		"prefix": "SetProgramDir_",
		"body": "SetProgramDir_(${1:lock})",
		"description": ""
	},
	"FreeDeviceProc_(dp)": {
		"prefix": "FreeDeviceProc_",
		"body": "FreeDeviceProc_(${1:dp})",
		"description": ""
	},
	"LockDosList_(flags)": {
		"prefix": "LockDosList_",
		"body": "LockDosList_(${1:flags})",
		"description": ""
	},
	"UnLockDosList_(flags)": {
		"prefix": "UnLockDosList_",
		"body": "UnLockDosList_(${1:flags})",
		"description": ""
	},
	"AttemptLockDosList_(flags)": {
		"prefix": "AttemptLockDosList_",
		"body": "AttemptLockDosList_(${1:flags})",
		"description": ""
	},
	"RemDosEntry_(dlist)": {
		"prefix": "RemDosEntry_",
		"body": "RemDosEntry_(${1:dlist})",
		"description": ""
	},
	"AddDosEntry_(dlist)": {
		"prefix": "AddDosEntry_",
		"body": "AddDosEntry_(${1:dlist})",
		"description": ""
	},
	"FindDosEntry_(dlist,name,flags)": {
		"prefix": "FindDosEntry_",
		"body": "FindDosEntry_(${1:dlist,name,flags})",
		"description": ""
	},
	"FreeDosEntry_(dlist)": {
		"prefix": "FreeDosEntry_",
		"body": "FreeDosEntry_(${1:dlist})",
		"description": ""
	},
	"IsFileSystem_(name)": {
		"prefix": "IsFileSystem_",
		"body": "IsFileSystem_(${1:name})",
		"description": ""
	},
	"Format_(filesystem,volumename,dostype)": {
		"prefix": "Format_",
		"body": "Format_(${1:filesystem,volumename,dostype})",
		"description": ""
	},
	"DateToStr_(datetime)": {
		"prefix": "DateToStr_",
		"body": "DateToStr_(${1:datetime})",
		"description": ""
	},
	"StrToDate_(datetime)": {
		"prefix": "StrToDate_",
		"body": "StrToDate_(${1:datetime})",
		"description": ""
	},
	"AddSegment_(name,seg,system)": {
		"prefix": "AddSegment_",
		"body": "AddSegment_(${1:name,seg,system})",
		"description": ""
	},
	"FindSegment_(name,seg,system)": {
		"prefix": "FindSegment_",
		"body": "FindSegment_(${1:name,seg,system})",
		"description": ""
	},
	"RemSegment_(seg)": {
		"prefix": "RemSegment_",
		"body": "RemSegment_(${1:seg})",
		"description": ""
	},
	"CheckSignal_(mask)": {
		"prefix": "CheckSignal_",
		"body": "CheckSignal_(${1:mask})",
		"description": ""
	},
	"ReadArgs_(template,array,args)": {
		"prefix": "ReadArgs_",
		"body": "ReadArgs_(${1:template,array,args})",
		"description": ""
	},
	"OpenDiskFont_(textAttr)": {
		"prefix": "OpenDiskFont_",
		"body": "OpenDiskFont_(${1:textAttr})",
		"description": ""
	},
	"AvailFonts_(buffer,bufBytes,flags)": {
		"prefix": "AvailFonts_",
		"body": "AvailFonts_(${1:buffer,bufBytes,flags})",
		"description": ""
	},
	"DisposeFontContents_(fontContentsHeader)": {
		"prefix": "DisposeFontContents_",
		"body": "DisposeFontContents_(${1:fontContentsHeader})",
		"description": ""
	},
	"AllocUnit_(unitNum)": {
		"prefix": "AllocUnit_",
		"body": "AllocUnit_(${1:unitNum})",
		"description": ""
	},
	"FreeUnit_(unitNum)": {
		"prefix": "FreeUnit_",
		"body": "FreeUnit_(${1:unitNum})",
		"description": ""
	},
	"GetUnit_(unitPointer)": {
		"prefix": "GetUnit_",
		"body": "GetUnit_(${1:unitPointer})",
		"description": ""
	},
	"GetUnitID_(unitNum)": {
		"prefix": "GetUnitID_",
		"body": "GetUnitID_(${1:unitNum})",
		"description": ""
	},
	"ReadUnitID_(unitNum)": {
		"prefix": "ReadUnitID_",
		"body": "ReadUnitID_(${1:unitNum})",
		"description": ""
	},
	"ObtainDataTypeA_(type,handle,attrs)": {
		"prefix": "ObtainDataTypeA_",
		"body": "ObtainDataTypeA_(${1:type,handle,attrs})",
		"description": ""
	},
	"ReleaseDataType_(dt)": {
		"prefix": "ReleaseDataType_",
		"body": "ReleaseDataType_(${1:dt})",
		"description": ""
	},
	"DisposeDTObject_(o)": {
		"prefix": "DisposeDTObject_",
		"body": "DisposeDTObject_(${1:o})",
		"description": ""
	},
	"GetDTMethods_(object)": {
		"prefix": "GetDTMethods_",
		"body": "GetDTMethods_(${1:object})",
		"description": ""
	},
	"GetDTTriggerMethods_(object)": {
		"prefix": "GetDTTriggerMethods_",
		"body": "GetDTTriggerMethods_(${1:object})",
		"description": ""
	},
	"GetDTString_(id)": {
		"prefix": "GetDTString_",
		"body": "GetDTString_(${1:id})",
		"description": ""
	},
	"CreateCxObj_(type,arg1,arg2)": {
		"prefix": "CreateCxObj_",
		"body": "CreateCxObj_(${1:type,arg1,arg2})",
		"description": ""
	},
	"DeleteCxObj_(co)": {
		"prefix": "DeleteCxObj_",
		"body": "DeleteCxObj_(${1:co})",
		"description": ""
	},
	"DeleteCxObjAll_(co)": {
		"prefix": "DeleteCxObjAll_",
		"body": "DeleteCxObjAll_(${1:co})",
		"description": ""
	},
	"CxObjType_(co)": {
		"prefix": "CxObjType_",
		"body": "CxObjType_(${1:co})",
		"description": ""
	},
	"CxObjError_(co)": {
		"prefix": "CxObjError_",
		"body": "CxObjError_(${1:co})",
		"description": ""
	},
	"ClearCxObjError_(co)": {
		"prefix": "ClearCxObjError_",
		"body": "ClearCxObjError_(${1:co})",
		"description": ""
	},
	"InsertCxObj_(headObj,co,pred)": {
		"prefix": "InsertCxObj_",
		"body": "InsertCxObj_(${1:headObj,co,pred})",
		"description": ""
	},
	"RemoveCxObj_(co)": {
		"prefix": "RemoveCxObj_",
		"body": "RemoveCxObj_(${1:co})",
		"description": ""
	},
	"CxMsgType_(cxm)": {
		"prefix": "CxMsgType_",
		"body": "CxMsgType_(${1:cxm})",
		"description": ""
	},
	"CxMsgData_(cxm)": {
		"prefix": "CxMsgData_",
		"body": "CxMsgData_(${1:cxm})",
		"description": ""
	},
	"CxMsgID_(cxm)": {
		"prefix": "CxMsgID_",
		"body": "CxMsgID_(${1:cxm})",
		"description": ""
	},
	"DivertCxMsg_(cxm,headObj,returnObj)": {
		"prefix": "DivertCxMsg_",
		"body": "DivertCxMsg_(${1:cxm,headObj,returnObj})",
		"description": ""
	},
	"DisposeCxMsg_(cxm)": {
		"prefix": "DisposeCxMsg_",
		"body": "DisposeCxMsg_(${1:cxm})",
		"description": ""
	},
	"InvertKeyMap_(ansiCode,event,km)": {
		"prefix": "InvertKeyMap_",
		"body": "InvertKeyMap_(${1:ansiCode,event,km})",
		"description": ""
	},
	"AddIEvents_(events)": {
		"prefix": "AddIEvents_",
		"body": "AddIEvents_(${1:events})",
		"description": ""
	},
	"AddICRVector_b(resource,iCRBit,interrupt)": {
		"prefix": "AddICRVector_b",
		"body": "AddICRVector_b(${1:resource,iCRBit,interrupt})",
		"description": ""
	},
	"RemICRVector_b(resource,iCRBit,interrupt)": {
		"prefix": "RemICRVector_b",
		"body": "RemICRVector_b(${1:resource,iCRBit,interrupt})",
		"description": ""
	},
	"AddICRVector_a(resource,iCRBit,interrupt)": {
		"prefix": "AddICRVector_a",
		"body": "AddICRVector_a(${1:resource,iCRBit,interrupt})",
		"description": ""
	},
	"RemICRVector_a(resource,iCRBit,interrupt)": {
		"prefix": "RemICRVector_a",
		"body": "RemICRVector_a(${1:resource,iCRBit,interrupt})",
		"description": ""
	},
	"OwnCard_(handle)": {
		"prefix": "OwnCard_",
		"body": "OwnCard_(${1:handle})",
		"description": ""
	},
	"BeginCardAccess_(handle)": {
		"prefix": "BeginCardAccess_",
		"body": "BeginCardAccess_(${1:handle})",
		"description": ""
	},
	"EndCardAccess_(handle)": {
		"prefix": "EndCardAccess_",
		"body": "EndCardAccess_(${1:handle})",
		"description": ""
	},
	"CardResetCard_(handle)": {
		"prefix": "CardResetCard_",
		"body": "CardResetCard_(${1:handle})",
		"description": ""
	},
	"IfAmigaXIP_(handle)": {
		"prefix": "IfAmigaXIP_",
		"body": "IfAmigaXIP_(${1:handle})",
		"description": ""
	},
	"CloseEngine_(glyphEngine)": {
		"prefix": "CloseEngine_",
		"body": "CloseEngine_(${1:glyphEngine})",
		"description": ""
	},
	"ReadBattMem_(buffer,offset,length)": {
		"prefix": "ReadBattMem_",
		"body": "ReadBattMem_(${1:buffer,offset,length})",
		"description": ""
	},
	"WriteBattMem_(buffer,offset,length)": {
		"prefix": "WriteBattMem_",
		"body": "WriteBattMem_(${1:buffer,offset,length})",
		"description": ""
	},
	"WriteBattClock_(time)": {
		"prefix": "WriteBattClock_",
		"body": "WriteBattClock_(${1:time})",
		"description": ""
	},
	"FreeFileRequest_(fileReq)": {
		"prefix": "FreeFileRequest_",
		"body": "FreeFileRequest_(${1:fileReq})",
		"description": ""
	},
	"RequestFile_(fileReq)": {
		"prefix": "RequestFile_",
		"body": "RequestFile_(${1:fileReq})",
		"description": ""
	},
	"FreeAslRequest_(requester)": {
		"prefix": "FreeAslRequest_",
		"body": "FreeAslRequest_(${1:requester})",
		"description": ""
	},
	"LockAmigaGuideBase_(handle)": {
		"prefix": "LockAmigaGuideBase_",
		"body": "LockAmigaGuideBase_(${1:handle})",
		"description": ""
	},
	"UnlockAmigaGuideBase_(key)": {
		"prefix": "UnlockAmigaGuideBase_",
		"body": "UnlockAmigaGuideBase_(${1:key})",
		"description": ""
	},
	"CloseAmigaGuide_(cl)": {
		"prefix": "CloseAmigaGuide_",
		"body": "CloseAmigaGuide_(${1:cl})",
		"description": ""
	},
	"AmigaGuideSignal_(cl)": {
		"prefix": "AmigaGuideSignal_",
		"body": "AmigaGuideSignal_(${1:cl})",
		"description": ""
	},
	"GetAmigaGuideMsg_(cl)": {
		"prefix": "GetAmigaGuideMsg_",
		"body": "GetAmigaGuideMsg_(${1:cl})",
		"description": ""
	},
	"ReplyAmigaGuideMsg_(amsg)": {
		"prefix": "ReplyAmigaGuideMsg_",
		"body": "ReplyAmigaGuideMsg_(${1:amsg})",
		"description": ""
	},
	"SetAmigaGuideContextA_(cl,id,attrs)": {
		"prefix": "SetAmigaGuideContextA_",
		"body": "SetAmigaGuideContextA_(${1:cl,id,attrs})",
		"description": ""
	},
	"SendAmigaGuideCmdA_(cl,cmd,attrs)": {
		"prefix": "SendAmigaGuideCmdA_",
		"body": "SendAmigaGuideCmdA_(${1:cl,cmd,attrs})",
		"description": ""
	},
	"GetAmigaGuideAttr_(tag,cl,storage)": {
		"prefix": "GetAmigaGuideAttr_",
		"body": "GetAmigaGuideAttr_(${1:tag,cl,storage})",
		"description": ""
	},
	"AddAmigaGuideHostA_(h,name,attrs)": {
		"prefix": "AddAmigaGuideHostA_",
		"body": "AddAmigaGuideHostA_(${1:h,name,attrs})",
		"description": ""
	},
	"GetAmigaGuideString_(id)": {
		"prefix": "GetAmigaGuideString_",
		"body": "GetAmigaGuideString_(${1:id})",
		"description": ""
	},
	"TEDSetLabelList_(&mouselist) (a0)-30": {
		"prefix": "TEDSetLabelList_",
		"body": "TEDSetLabelList_(${1:&mouselist) (a0)-30})",
		"description": ""
	},
	"TEDSetLabelCount_(&mousecount) (a0)-36": {
		"prefix": "TEDSetLabelCount_",
		"body": "TEDSetLabelCount_(${1:&mousecount) (a0)-36})",
		"description": ""
	},
	"TEDError_(bodytext) (a0)-66": {
		"prefix": "TEDError_",
		"body": "TEDError_(${1:bodytext) (a0)-66})",
		"description": ""
	},
	"TEDSetFirstLine_(&firstline) (a0)-72": {
		"prefix": "TEDSetFirstLine_",
		"body": "TEDSetFirstLine_(${1:&firstline) (a0)-72})",
		"description": ""
	},
	"TEDSetCurrentLine_(&currentline) (a0)-78": {
		"prefix": "TEDSetCurrentLine_",
		"body": "TEDSetCurrentLine_(${1:&currentline) (a0)-78})",
		"description": ""
	},
	"TEDDetoke_(sourceline) (a0)-96": {
		"prefix": "TEDDetoke_",
		"body": "TEDDetoke_(${1:sourceline) (a0)-96})",
		"description": ""
	},
	"TagList [#TagList]": {
		"prefix": "TagList",
		"body": "TagList ${1:[#TagList]}",
		"description": "returns location of TagList, 0 if not in use."
	},
	"InitTagList TagList#,NoTags.l": {
		"prefix": "InitTagList",
		"body": "InitTagList ${1:TagList#,NoTags.l}",
		"description": ""
	},
	"AddTags [#TagList] [[,Tag.l,Data.l]]": {
		"prefix": "AddTags",
		"body": "AddTags ${1:[#TagList] [[,Tag.l,Data.l]]}",
		"description": ""
	},
	"NoTagsLeft [#TagList]": {
		"prefix": "NoTagsLeft",
		"body": "NoTagsLeft ${1:[#TagList]}",
		"description": "returns the number of tags left in the taglist."
	},
	"LED_On turn Power-LED on.": {
		"prefix": "LED_On",
		"body": "LED_On ${1:turn Power-LED on.}",
		"description": ""
	},
	"LED_Off turn Power-LED off.": {
		"prefix": "LED_Off",
		"body": "LED_Off ${1:turn Power-LED off.}",
		"description": ""
	},
	"LED_Toggle toggle PowerLED.": {
		"prefix": "LED_Toggle",
		"body": "LED_Toggle ${1:toggle PowerLED.}",
		"description": ""
	},
	"LED_Status 0=off, -1=on": {
		"prefix": "LED_Status",
		"body": "LED_Status ${1:0=off, -1=on}",
		"description": ""
	},
	"PotGo": {
		"prefix": "PotGo",
		"body": "PotGo",
		"description": "starts up ADs (need 300ms to run)."
	},
	"ReadPot(AD)": {
		"prefix": "ReadPot",
		"body": "ReadPot(${1:AD})",
		"description": "0=P0-X, 1=P0-Y, 2=P1-X, 3=P1-Y."
	},
	"AKey": {
		"prefix": "AKey",
		"body": "AKey",
		"description": "n.b=AKey, Code of !ALL! Keys."
	},
	"LMBD": {
		"prefix": "LMBD",
		"body": "LMBD",
		"description": "wait until Left-Mouse-Button-Down."
	},
	"RMBD": {
		"prefix": "RMBD",
		"body": "RMBD",
		"description": "wait until Right-Mouse-Button-Down."
	},
	"LMBU": {
		"prefix": "LMBU",
		"body": "LMBU",
		"description": "wait until Left-Mouse-Button-Up."
	},
	"RMBU": {
		"prefix": "RMBU",
		"body": "RMBU",
		"description": "wait until Right-Mouse-Button-Up."
	},
	"ReadParPort": {
		"prefix": "ReadParPort",
		"body": "ReadParPort",
		"description": "n.b=ReadParPort."
	},
	"WriteParPort BitSet": {
		"prefix": "WriteParPort",
		"body": "WriteParPort ${1:BitSet}",
		"description": "0-255."
	},
	"SetParDDR BitSet": {
		"prefix": "SetParDDR",
		"body": "SetParDDR ${1:BitSet}",
		"description": "0-255."
	},
	"GetParDDR": {
		"prefix": "GetParDDR",
		"body": "GetParDDR",
		"description": "n.b=GetParDDR."
	},
	"TCPSock A sockit object.": {
		"prefix": "TCPSock",
		"body": "TCPSock ${1:A sockit object.}",
		"description": ""
	},
	"TCPClose": {
		"prefix": "TCPClose",
		"body": "TCPClose",
		"description": ""
	},
	"TCPAvail": {
		"prefix": "TCPAvail",
		"body": "TCPAvail",
		"description": ""
	},
	"BSDSocket(Domain,Type,Protocol)": {
		"prefix": "BSDSocket",
		"body": "BSDSocket(${1:Domain,Type,Protocol})",
		"description": ""
	},
	"BSDBind([s]ock,*Name,NameLen)": {
		"prefix": "BSDBind",
		"body": "BSDBind(${1:[s]ock,*Name,NameLen})",
		"description": ""
	},
	"BSDListen([s]ock,BackLog)": {
		"prefix": "BSDListen",
		"body": "BSDListen(${1:[s]ock,BackLog})",
		"description": ""
	},
	"BSDAccept([s]ock,*Addr,*AddrLen)": {
		"prefix": "BSDAccept",
		"body": "BSDAccept(${1:[s]ock,*Addr,*AddrLen})",
		"description": ""
	},
	"BSDConnect([s]ock,*Name,*NameLen)": {
		"prefix": "BSDConnect",
		"body": "BSDConnect(${1:[s]ock,*Name,*NameLen})",
		"description": ""
	},
	"BSDSendTo([s]ock,*Buf,Len,Flags,*To,ToLen)": {
		"prefix": "BSDSendTo",
		"body": "BSDSendTo(${1:[s]ock,*Buf,Len,Flags,*To,ToLen})",
		"description": ""
	},
	"BSDSend([s]ock,*Buf,Len,Flags)": {
		"prefix": "BSDSend",
		"body": "BSDSend(${1:[s]ock,*Buf,Len,Flags})",
		"description": ""
	},
	"BSDRecvFrom([s]ock,*Buf,Len,Flags,*Addr,*AddrLen)": {
		"prefix": "BSDRecvFrom",
		"body": "BSDRecvFrom(${1:[s]ock,*Buf,Len,Flags,*Addr,*AddrLen})",
		"description": ""
	},
	"BSDRecv([s]ock,*Buf,Len,Flags)": {
		"prefix": "BSDRecv",
		"body": "BSDRecv(${1:[s]ock,*Buf,Len,Flags})",
		"description": ""
	},
	"BSDShutDown([s]ock,How)": {
		"prefix": "BSDShutDown",
		"body": "BSDShutDown(${1:[s]ock,How})",
		"description": ""
	},
	"BSDSetSockOpt([s]ock,Level,OptName,*OptVal,OptLen)": {
		"prefix": "BSDSetSockOpt",
		"body": "BSDSetSockOpt(${1:[s]ock,Level,OptName,*OptVal,OptLen})",
		"description": ""
	},
	"BSDGetSockOpt([s]ock,Level,OptName,*OptVal,*OptLen)": {
		"prefix": "BSDGetSockOpt",
		"body": "BSDGetSockOpt(${1:[s]ock,Level,OptName,*OptVal,*OptLen})",
		"description": ""
	},
	"BSDGetSockName([s]ock,*Name,*NameLen)": {
		"prefix": "BSDGetSockName",
		"body": "BSDGetSockName(${1:[s]ock,*Name,*NameLen})",
		"description": ""
	},
	"BSDGetPeerName([s]ock,*Name,*NameLen)": {
		"prefix": "BSDGetPeerName",
		"body": "BSDGetPeerName(${1:[s]ock,*Name,*NameLen})",
		"description": ""
	},
	"BSDIoctlSocket([s]ock,Req,*ArgP)": {
		"prefix": "BSDIoctlSocket",
		"body": "BSDIoctlSocket(${1:[s]ock,Req,*ArgP})",
		"description": ""
	},
	"BSDCloseSocket([s]ock)": {
		"prefix": "BSDCloseSocket",
		"body": "BSDCloseSocket(${1:[s]ock})",
		"description": ""
	},
	"BSDWaitSelect(nFDS,*ReadFDS,*WriteFDS,*ExceptFDS,*TimeOut,*Signal)": {
		"prefix": "BSDWaitSelect",
		"body": "BSDWaitSelect(${1:nFDS,*ReadFDS,*WriteFDS,*ExceptFDS,*TimeOut,*Signal})",
		"description": ""
	},
	"BSDSetSocketSignals(IntMask,IOMask,UrgentMask)": {
		"prefix": "BSDSetSocketSignals",
		"body": "BSDSetSocketSignals(${1:IntMask,IOMask,UrgentMask})",
		"description": ""
	},
	"BSDGetDTableSize": {
		"prefix": "BSDGetDTableSize",
		"body": "BSDGetDTableSize",
		"description": ""
	},
	"BSDObtainSocket(ID,Domain,Type,Protocol)": {
		"prefix": "BSDObtainSocket",
		"body": "BSDObtainSocket(${1:ID,Domain,Type,Protocol})",
		"description": ""
	},
	"BSDReleaseSocket([s]ock,ID)": {
		"prefix": "BSDReleaseSocket",
		"body": "BSDReleaseSocket(${1:[s]ock,ID})",
		"description": ""
	},
	"BSDReleaseCopyOfSocket([s]ock,ID)": {
		"prefix": "BSDReleaseCopyOfSocket",
		"body": "BSDReleaseCopyOfSocket(${1:[s]ock,ID})",
		"description": ""
	},
	"BSDErrNo": {
		"prefix": "BSDErrNo",
		"body": "BSDErrNo",
		"description": ""
	},
	"BSDSetErrnoPtr(*ErrNoP,Size)": {
		"prefix": "BSDSetErrnoPtr",
		"body": "BSDSetErrnoPtr(${1:*ErrNoP,Size})",
		"description": ""
	},
	"BSDINet_NToA(IP)": {
		"prefix": "BSDINet_NToA",
		"body": "BSDINet_NToA(${1:IP})",
		"description": ""
	},
	"BSDINet_Addr(*CP)": {
		"prefix": "BSDINet_Addr",
		"body": "BSDINet_Addr(${1:*CP})",
		"description": ""
	},
	"BSDINet_LnaOf(,In)": {
		"prefix": "BSDINet_LnaOf",
		"body": "BSDINet_LnaOf(${1:,In})",
		"description": ""
	},
	"BSDINet_NetOf(In)": {
		"prefix": "BSDINet_NetOf",
		"body": "BSDINet_NetOf(${1:In})",
		"description": ""
	},
	"BSDINet_MakeAddr(Net,Host)": {
		"prefix": "BSDINet_MakeAddr",
		"body": "BSDINet_MakeAddr(${1:Net,Host})",
		"description": ""
	},
	"BSDINet_Network(*CP)": {
		"prefix": "BSDINet_Network",
		"body": "BSDINet_Network(${1:*CP})",
		"description": ""
	},
	"BSDGetHostByAddr(*Addr,Len,Type)": {
		"prefix": "BSDGetHostByAddr",
		"body": "BSDGetHostByAddr(${1:*Addr,Len,Type})",
		"description": ""
	},
	"BSDGetNetByName(*Name)": {
		"prefix": "BSDGetNetByName",
		"body": "BSDGetNetByName(${1:*Name})",
		"description": ""
	},
	"BSDGetNetByAddr(Net,Type)": {
		"prefix": "BSDGetNetByAddr",
		"body": "BSDGetNetByAddr(${1:Net,Type})",
		"description": ""
	},
	"BSDGetServByName(*Name,*Proto)": {
		"prefix": "BSDGetServByName",
		"body": "BSDGetServByName(${1:*Name,*Proto})",
		"description": ""
	},
	"BSDGetServByPort(Port,*Proto)": {
		"prefix": "BSDGetServByPort",
		"body": "BSDGetServByPort(${1:Port,*Proto})",
		"description": ""
	},
	"BSDGetProtoByName(*Name)": {
		"prefix": "BSDGetProtoByName",
		"body": "BSDGetProtoByName(${1:*Name})",
		"description": ""
	},
	"BSDGetProtoByNumber(ID)": {
		"prefix": "BSDGetProtoByNumber",
		"body": "BSDGetProtoByNumber(${1:ID})",
		"description": ""
	},
	"BSDVSysLog(Pri,*Msg,Args)": {
		"prefix": "BSDVSysLog",
		"body": "BSDVSysLog(${1:Pri,*Msg,Args})",
		"description": ""
	},
	"BSDDup2Socket(Olds,News)": {
		"prefix": "BSDDup2Socket",
		"body": "BSDDup2Socket(${1:Olds,News})",
		"description": ""
	},
	"BSDSendMsg([s]ock,*Msg,Flags)": {
		"prefix": "BSDSendMsg",
		"body": "BSDSendMsg(${1:[s]ock,*Msg,Flags})",
		"description": ""
	},
	"BSDRecvMsg([s]ock,*Msg,Flags)": {
		"prefix": "BSDRecvMsg",
		"body": "BSDRecvMsg(${1:[s]ock,*Msg,Flags})",
		"description": ""
	},
	"BSDGetHostName(*Name,NameLen)": {
		"prefix": "BSDGetHostName",
		"body": "BSDGetHostName(${1:*Name,NameLen})",
		"description": ""
	},
	"BSDGetHostID": {
		"prefix": "BSDGetHostID",
		"body": "BSDGetHostID",
		"description": ""
	},
	"BSDSocketBaseTagList(*Tags)": {
		"prefix": "BSDSocketBaseTagList",
		"body": "BSDSocketBaseTagList(${1:*Tags})",
		"description": ""
	},
	"BSDGetSocketEvents(*EventSP)": {
		"prefix": "BSDGetSocketEvents",
		"body": "BSDGetSocketEvents(${1:*EventSP})",
		"description": ""
	},
	"BSDGetHostByName(*Name)": {
		"prefix": "BSDGetHostByName",
		"body": "BSDGetHostByName(${1:*Name})",
		"description": ""
	},
	"TCPFillMemB *Address,FillByte,Length": {
		"prefix": "TCPFillMemB",
		"body": "TCPFillMemB ${1:*Address,FillByte,Length}",
		"description": ""
	},
	"TCPOpen": {
		"prefix": "TCPOpen",
		"body": "TCPOpen",
		"description": ""
	},
	"TCPFillMemL *Address,FillLong,Length": {
		"prefix": "TCPFillMemL",
		"body": "TCPFillMemL ${1:*Address,FillLong,Length}",
		"description": ""
	},
	"TCPFDSet SockBit,*FDAddress": {
		"prefix": "TCPFDSet",
		"body": "TCPFDSet ${1:SockBit,*FDAddress}",
		"description": ""
	},
	"TCPFDClear SockBit,*FDAddress": {
		"prefix": "TCPFDClear",
		"body": "TCPFDClear ${1:SockBit,*FDAddress}",
		"description": ""
	},
	"TCPCreateSocket(TCPSock#,BlockingOnOff,SocketRW,TSecs,TMicros)": {
		"prefix": "TCPCreateSocket",
		"body": "TCPCreateSocket(${1:TCPSock#,BlockingOnOff,SocketRW,TSecs,TMicros})",
		"description": ""
	},
	"TCPRemoveSocket(TCPSock#)": {
		"prefix": "TCPRemoveSocket",
		"body": "TCPRemoveSocket(${1:TCPSock#})",
		"description": ""
	},
	"TCPFDIsSet(SockBit,*FDAddress)": {
		"prefix": "TCPFDIsSet",
		"body": "TCPFDIsSet(${1:SockBit,*FDAddress})",
		"description": ""
	},
	"TCPFDWriteLoc": {
		"prefix": "TCPFDWriteLoc",
		"body": "TCPFDWriteLoc",
		"description": ""
	},
	"TCPFDReadLoc": {
		"prefix": "TCPFDReadLoc",
		"body": "TCPFDReadLoc",
		"description": ""
	},
	"TCPConnectSocket(TCPSock#,Host$,Port)": {
		"prefix": "TCPConnectSocket",
		"body": "TCPConnectSocket(${1:TCPSock#,Host$,Port})",
		"description": ""
	},
	"TCPEvent": {
		"prefix": "TCPEvent",
		"body": "TCPEvent",
		"description": ""
	},
	"TCPShutSocket(TCPSock#,How)": {
		"prefix": "TCPShutSocket",
		"body": "TCPShutSocket(${1:TCPSock#,How})",
		"description": ""
	},
	"TCPFDIntHighLoc": {
		"prefix": "TCPFDIntHighLoc",
		"body": "TCPFDIntHighLoc",
		"description": ""
	},
	"TCPHighest": {
		"prefix": "TCPHighest",
		"body": "TCPHighest",
		"description": ""
	},
	"TCPRescanHighest": {
		"prefix": "TCPRescanHighest",
		"body": "TCPRescanHighest",
		"description": ""
	},
	"TCPSetStates(TCPSock#,States)": {
		"prefix": "TCPSetStates",
		"body": "TCPSetStates(${1:TCPSock#,States})",
		"description": ""
	},
	"TCPWrite TCPSock#,*DataAddress,DataLength": {
		"prefix": "TCPWrite",
		"body": "TCPWrite ${1:TCPSock#,*DataAddress,DataLength}",
		"description": ""
	},
	"TCPPrint TCPSock#,Data$": {
		"prefix": "TCPPrint",
		"body": "TCPPrint ${1:TCPSock#,Data$}",
		"description": ""
	},
	"TCPNPrint TCPSock#,Data$": {
		"prefix": "TCPNPrint",
		"body": "TCPNPrint ${1:TCPSock#,Data$}",
		"description": ""
	},
	"TCPSetReceiveBuffer(Size)": {
		"prefix": "TCPSetReceiveBuffer",
		"body": "TCPSetReceiveBuffer(${1:Size})",
		"description": ""
	},
	"TCPReadSocket$(TCPSock#)": {
		"prefix": "TCPReadSocket$",
		"body": "TCPReadSocket$(${1:TCPSock#})",
		"description": ""
	},
	"TCPIsReadEvent(TCPSock#)": {
		"prefix": "TCPIsReadEvent",
		"body": "TCPIsReadEvent(${1:TCPSock#})",
		"description": ""
	},
	"TCPIsWriteEvent(TCPSock#)": {
		"prefix": "TCPIsWriteEvent",
		"body": "TCPIsWriteEvent(${1:TCPSock#})",
		"description": ""
	},
	"TCPFreeReceiveBuffer": {
		"prefix": "TCPFreeReceiveBuffer",
		"body": "TCPFreeReceiveBuffer",
		"description": ""
	},
	"TCPBufferAddress": {
		"prefix": "TCPBufferAddress",
		"body": "TCPBufferAddress",
		"description": ""
	},
	"TCPFDTempWriteLoc": {
		"prefix": "TCPFDTempWriteLoc",
		"body": "TCPFDTempWriteLoc",
		"description": ""
	},
	"TCPFDTempReadLoc": {
		"prefix": "TCPFDTempReadLoc",
		"body": "TCPFDTempReadLoc",
		"description": ""
	},
	"TCPLastReadSize": {
		"prefix": "TCPLastReadSize",
		"body": "TCPLastReadSize",
		"description": ""
	},
	"TCPSocketNumber(TCPSock#)": {
		"prefix": "TCPSocketNumber",
		"body": "TCPSocketNumber(${1:TCPSock#})",
		"description": ""
	},
	"TCPSocketError(TCPSock#)": {
		"prefix": "TCPSocketError",
		"body": "TCPSocketError(${1:TCPSock#})",
		"description": ""
	},
	"TCPErrorString$": {
		"prefix": "TCPErrorString$",
		"body": "TCPErrorString$",
		"description": ""
	},
	"TCPListenSocket(TCPSock#,QueueBacklog)": {
		"prefix": "TCPListenSocket",
		"body": "TCPListenSocket(${1:TCPSock#,QueueBacklog})",
		"description": ""
	},
	"TCPGetOwnHostName$(MaxLength)": {
		"prefix": "TCPGetOwnHostName$",
		"body": "TCPGetOwnHostName$(${1:MaxLength})",
		"description": ""
	},
	"TCPGetIPStr$(IPAddress.l)": {
		"prefix": "TCPGetIPStr$",
		"body": "TCPGetIPStr$(${1:IPAddress.l})",
		"description": ""
	},
	"TCPGetIPClass(IPAddress.l,Class)": {
		"prefix": "TCPGetIPClass",
		"body": "TCPGetIPClass(${1:IPAddress.l,Class})",
		"description": "Class: 0-3."
	},
	"TCPExamineHostEntry(Host$)": {
		"prefix": "TCPExamineHostEntry",
		"body": "TCPExamineHostEntry(${1:Host$})",
		"description": ""
	},
	"TCPHostIPStr$(Entry)": {
		"prefix": "TCPHostIPStr$",
		"body": "TCPHostIPStr$(${1:Entry})",
		"description": ""
	},
	"TCPHostIP(Entry)": {
		"prefix": "TCPHostIP",
		"body": "TCPHostIP(${1:Entry})",
		"description": ""
	},
	"TCPExamineAddrEntry(IPAddress.l)": {
		"prefix": "TCPExamineAddrEntry",
		"body": "TCPExamineAddrEntry(${1:IPAddress.l})",
		"description": ""
	},
	"TCPCanonicalName$": {
		"prefix": "TCPCanonicalName$",
		"body": "TCPCanonicalName$",
		"description": ""
	},
	"TCPSlapSocketIn(Socket,TCPSock#)": {
		"prefix": "TCPSlapSocketIn",
		"body": "TCPSlapSocketIn(${1:Socket,TCPSock#})",
		"description": ""
	},
	"TCPPullSocketOut(TCPSock#)": {
		"prefix": "TCPPullSocketOut",
		"body": "TCPPullSocketOut(${1:TCPSock#})",
		"description": ""
	},
	"TCPGetOwnHostIP": {
		"prefix": "TCPGetOwnHostIP",
		"body": "TCPGetOwnHostIP",
		"description": ""
	},
	"UPeek(ad.l)": {
		"prefix": "UPeek",
		"body": "UPeek(${1:ad.l})",
		"description": "returns a word equal to unsigned value of byte at ad."
	},
	"DotProduct &N.Vector_Type,&L.Vector_Type": {
		"prefix": "DotProduct",
		"body": "DotProduct ${1:&N.Vector_Type,&L.Vector_Type}",
		"description": ""
	},
	"ApplyMatrix &M.Matrix_Type,&V.Vector_Type,&R.Vector_Type": {
		"prefix": "ApplyMatrix",
		"body": "ApplyMatrix ${1:&M.Matrix_Type,&V.Vector_Type,&R.Vector_Type}",
		"description": ""
	},
	"VectorMagnitude(&V.Vector_Type) returns quick": {
		"prefix": "VectorMagnitude",
		"body": "VectorMagnitude(${1:&V.Vector_Type) returns quick})",
		"description": ""
	},
	"VectorAngle(&N.Vector_Type,&L.Vector_Type), returns quick": {
		"prefix": "VectorAngle",
		"body": "VectorAngle(${1:&N.Vector_Type,&L.Vector_Type), returns quick})",
		"description": ""
	},
	"UnitVector &N.Vector_Type": {
		"prefix": "UnitVector",
		"body": "UnitVector ${1:&N.Vector_Type}",
		"description": ""
	},
	"CrossProduct &N.Vector_Type,&L.Vector_Type,&Result.Vector_Type": {
		"prefix": "CrossProduct",
		"body": "CrossProduct ${1:&N.Vector_Type,&L.Vector_Type,&Result.Vector_Type}",
		"description": ""
	},
	"SubtractVectors &N.Vector_Type,&L.Vector_Type,&Result.Vector_Type": {
		"prefix": "SubtractVectors",
		"body": "SubtractVectors ${1:&N.Vector_Type,&L.Vector_Type,&Result.Vector_Type}",
		"description": ""
	},
	"MakeVector x.w,y.w,z.w,&V.Vector_Type": {
		"prefix": "MakeVector",
		"body": "MakeVector ${1:x.w,y.w,z.w,&V.Vector_Type}",
		"description": ""
	},
	"DepthSort &Index.q,&Assoc1.l,&Assoc2.l,items.l": {
		"prefix": "DepthSort",
		"body": "DepthSort ${1:&Index.q,&Assoc1.l,&Assoc2.l,items.l}",
		"description": ""
	},
	"ShellSort &array.l,items.l": {
		"prefix": "ShellSort",
		"body": "ShellSort ${1:&array.l,items.l}",
		"description": ""
	},
	"QMULS(v1.q,v2.q) Fast 020 quick multiply": {
		"prefix": "QMULS",
		"body": "QMULS(${1:v1.q,v2.q) Fast 020 quick multiply})",
		"description": ""
	},
	"FastApply &M.Matrix_Type,&V.Vector_Type,&R.Vector_Type": {
		"prefix": "FastApply",
		"body": "FastApply ${1:&M.Matrix_Type,&V.Vector_Type,&R.Vector_Type}",
		"description": ""
	},
	"FastVectorAngle(&N.Vector_Type,&L.Vector_Type), returns quick": {
		"prefix": "FastVectorAngle",
		"body": "FastVectorAngle(${1:&N.Vector_Type,&L.Vector_Type), returns quick})",
		"description": ""
	},
	"FastUnitVector &N.Vector_Type": {
		"prefix": "FastUnitVector",
		"body": "FastUnitVector ${1:&N.Vector_Type}",
		"description": ""
	},
	"ShellDepthSort &array.l,items.l": {
		"prefix": "ShellDepthSort",
		"body": "ShellDepthSort ${1:&array.l,items.l}",
		"description": ""
	},
	"CInitDraw Addr Chunky Object.l": {
		"prefix": "CInitDraw",
		"body": "CInitDraw ${1:Addr Chunky Object.l}",
		"description": ""
	},
	"CHLine x1,x2,y,c.b": {
		"prefix": "CHLine",
		"body": "CHLine ${1:x1,x2,y,c.b}",
		"description": ""
	},
	"CDrawDone": {
		"prefix": "CDrawDone",
		"body": "CDrawDone",
		"description": ""
	},
	"CLine x1,y1,x2,y2,c": {
		"prefix": "CLine",
		"body": "CLine ${1:x1,y1,x2,y2,c}",
		"description": ""
	},
	"CCls colour mask": {
		"prefix": "CCls",
		"body": "CCls ${1:colour mask}",
		"description": ""
	},
	"CVirtualBuffers RWE PRIVATE": {
		"prefix": "CVirtualBuffers",
		"body": "CVirtualBuffers ${1:RWE PRIVATE}",
		"description": ""
	},
	"CTriangle &pointlist,color.b": {
		"prefix": "CTriangle",
		"body": "CTriangle ${1:&pointlist,color.b}",
		"description": ""
	},
	"CTrianglef &pointlist,color.b": {
		"prefix": "CTrianglef",
		"body": "CTrianglef ${1:&pointlist,color.b}",
		"description": ""
	},
	"RetrieveCallHook": {
		"prefix": "RetrieveCallHook",
		"body": "RetrieveCallHook",
		"description": ""
	},
	"QAdd(First,Second)": {
		"prefix": "QAdd",
		"body": "QAdd(${1:First,Second})",
		"description": ""
	},
	"QSub(First,Second)": {
		"prefix": "QSub",
		"body": "QSub(${1:First,Second})",
		"description": ""
	},
	"QMul020(First,Second)": {
		"prefix": "QMul020",
		"body": "QMul020(${1:First,Second})",
		"description": ""
	},
	"QDiv020(First,Second)": {
		"prefix": "QDiv020",
		"body": "QDiv020(${1:First,Second})",
		"description": ""
	},
	"WWrap(Word,Low,High)": {
		"prefix": "WWrap",
		"body": "WWrap(${1:Word,Low,High})",
		"description": ""
	},
	"WLimit(Word,Low,High)": {
		"prefix": "WLimit",
		"body": "WLimit(${1:Word,Low,High})",
		"description": ""
	},
	"QPlot Bitmap#,X,Y,Plane": {
		"prefix": "QPlot",
		"body": "QPlot ${1:Bitmap#,X,Y,Plane}",
		"description": ""
	},
	"ChunkyBuffer(ChunkyBuffer#)": {
		"prefix": "ChunkyBuffer",
		"body": "ChunkyBuffer(${1:ChunkyBuffer#})",
		"description": ""
	},
	"ChunkyBufferSize(ChunkyBuffer#)": {
		"prefix": "ChunkyBufferSize",
		"body": "ChunkyBufferSize(${1:ChunkyBuffer#})",
		"description": ""
	},
	"InitChunkyBuffer ChunkyBuffer#,Bitmap#": {
		"prefix": "InitChunkyBuffer",
		"body": "InitChunkyBuffer ${1:ChunkyBuffer#,Bitmap#}",
		"description": ""
	},
	"ChunkyToPlanar ChunkyBuffer#": {
		"prefix": "ChunkyToPlanar",
		"body": "ChunkyToPlanar ${1:ChunkyBuffer#}",
		"description": ""
	},
	"ClearChunkyBuffer ChunkyBuffer#": {
		"prefix": "ClearChunkyBuffer",
		"body": "ClearChunkyBuffer ${1:ChunkyBuffer#}",
		"description": ""
	},
	"FreeChunkyBuffer ChunkyBuffer#": {
		"prefix": "FreeChunkyBuffer",
		"body": "FreeChunkyBuffer ${1:ChunkyBuffer#}",
		"description": ""
	},
	"QCos(angle.w)": {
		"prefix": "QCos",
		"body": "QCos(${1:angle.w})",
		"description": "angle(0..255)  (c) 1996 by Oliver Michel."
	},
	"QSin(angle.w)": {
		"prefix": "QSin",
		"body": "QSin(${1:angle.w})",
		"description": "angle(0..255)  (c) 1996 by Oliver Michel."
	},
	"QTan(angle.w)": {
		"prefix": "QTan",
		"body": "QTan(${1:angle.w})",
		"description": "angle(0..255)  (c) 1996 by Oliver Michel."
	},
	"OMc2p width.w,height.w,bplmod.w,linemod.w,chunky.l,planar.l": {
		"prefix": "OMc2p",
		"body": "OMc2p ${1:width.w,height.w,bplmod.w,linemod.w,chunky.l,planar.l}",
		"description": ""
	},
	"OMcolumn texture.l(64x64 v),chunky.l,scal.l": {
		"prefix": "OMcolumn",
		"body": "OMcolumn ${1:texture.l(64x64 v),chunky.l,scal.l}",
		"description": ""
	},
	"MUI_NewObject(Class$,Tag[,Tag...])": {
		"prefix": "MUI_NewObject",
		"body": "MUI_NewObject(${1:Class$,Tag[,Tag...]})",
		"description": ""
	},
	"MUI_MakeObject(Type,Tag[,Tag...])": {
		"prefix": "MUI_MakeObject",
		"body": "MUI_MakeObject(${1:Type,Tag[,Tag...]})",
		"description": ""
	},
	"MUI_TRUE": {
		"prefix": "MUI_TRUE",
		"body": "MUI_TRUE",
		"description": "Return the TRUE value for MUI."
	},
	"MUI_Base": {
		"prefix": "MUI_Base",
		"body": "MUI_Base",
		"description": "Return the Base of MUIMaster."
	},
	"HCenter(obj)": {
		"prefix": "HCenter",
		"body": "HCenter(${1:obj})",
		"description": "MUI HCenter."
	},
	"VCenter(obj)": {
		"prefix": "VCenter",
		"body": "VCenter(${1:obj})",
		"description": "MUI VCenter."
	},
	"MUIString MUIObject#,Contents$,MaxLen": {
		"prefix": "MUIString",
		"body": "MUIString ${1:MUIObject#,Contents$,MaxLen}",
		"description": "MUI String."
	},
	"KeyString(contents$,maxlen,controlchar$)": {
		"prefix": "KeyString",
		"body": "KeyString(${1:contents$,maxlen,controlchar$})",
		"description": "MUI KeyString."
	},
	"CheckMark(selected)": {
		"prefix": "CheckMark",
		"body": "CheckMark(${1:selected})",
		"description": "MUI CheckMark."
	},
	"KeyCheckMark(selected,control$)": {
		"prefix": "KeyCheckMark",
		"body": "KeyCheckMark(${1:selected,control$})",
		"description": "MUI KeyCheckMark."
	},
	"SimpleButton(label$)": {
		"prefix": "SimpleButton",
		"body": "SimpleButton(${1:label$})",
		"description": "MUI SimpleButton."
	},
	"KeyButton(name$,key$)": {
		"prefix": "KeyButton",
		"body": "KeyButton(${1:name$,key$})",
		"description": "MUI KeyButton."
	},
	"MUI_Cycle(&*entries(0))": {
		"prefix": "MUI_Cycle",
		"body": "MUI_Cycle(${1:&*entries(0)})",
		"description": "MUI Cycle."
	},
	"KeyCycle(&*entries(0),key$)": {
		"prefix": "KeyCycle",
		"body": "KeyCycle(${1:&*entries(0),key$})",
		"description": "MUI KeyCycle."
	},
	"Radio(name$,&*array(0))": {
		"prefix": "Radio",
		"body": "Radio(${1:name$,&*array(0)})",
		"description": "MUI Radio."
	},
	"KeyRadio(name$,&*array(0),key$)": {
		"prefix": "KeyRadio",
		"body": "KeyRadio(${1:name$,&*array(0),key$})",
		"description": "MUI KeyRadio."
	},
	"Slider(min,max,level)": {
		"prefix": "Slider",
		"body": "Slider(${1:min,max,level})",
		"description": "MUI Slider."
	},
	"KeySlider(min,max,level,key$)": {
		"prefix": "KeySlider",
		"body": "KeySlider(${1:min,max,level,key$})",
		"description": "MUI KeySlider."
	},
	"PopButton(img)": {
		"prefix": "PopButton",
		"body": "PopButton(${1:img})",
		"description": "MUI PopButton."
	},
	"Label(label$)": {
		"prefix": "Label",
		"body": "Label(${1:label$})",
		"description": "MUI Label."
	},
	"LabelI(label$)": {
		"prefix": "LabelI",
		"body": "LabelI(${1:label$})",
		"description": "MUI LabelI."
	},
	"LabelII(label$)": {
		"prefix": "LabelII",
		"body": "LabelII(${1:label$})",
		"description": "MUI LabelII."
	},
	"LLabel(label$)": {
		"prefix": "LLabel",
		"body": "LLabel(${1:label$})",
		"description": "MUI LLabel."
	},
	"LLabelI(label$)": {
		"prefix": "LLabelI",
		"body": "LLabelI(${1:label$})",
		"description": "MUI LLabelI."
	},
	"LLabelII(label$)": {
		"prefix": "LLabelII",
		"body": "LLabelII(${1:label$})",
		"description": "MUI LLabelII."
	},
	"CLabel(label$)": {
		"prefix": "CLabel",
		"body": "CLabel(${1:label$})",
		"description": "MUI CLabel."
	},
	"CLabelI(label$)": {
		"prefix": "CLabelI",
		"body": "CLabelI(${1:label$})",
		"description": "MUI CLabelI."
	},
	"CLabelII(label$)": {
		"prefix": "CLabelII",
		"body": "CLabelII(${1:label$})",
		"description": "MUI CLabelII."
	},
	"FreeLabel(label$)": {
		"prefix": "FreeLabel",
		"body": "FreeLabel(${1:label$})",
		"description": "MUI FreeLabel."
	},
	"FreeLabelI(label$)": {
		"prefix": "FreeLabelI",
		"body": "FreeLabelI(${1:label$})",
		"description": "MUI FreeLabelI."
	},
	"FreeLabelII(label$)": {
		"prefix": "FreeLabelII",
		"body": "FreeLabelII(${1:label$})",
		"description": "MUI FreeLabelII."
	},
	"FreeLLabel(label$)": {
		"prefix": "FreeLLabel",
		"body": "FreeLLabel(${1:label$})",
		"description": "MUI FreeLLabel."
	},
	"FreeLLabelI(label$)": {
		"prefix": "FreeLLabelI",
		"body": "FreeLLabelI(${1:label$})",
		"description": "MUI FreeLLabelI."
	},
	"FreeLLabelII(label$)": {
		"prefix": "FreeLLabelII",
		"body": "FreeLLabelII(${1:label$})",
		"description": "MUI FreeLLabelII."
	},
	"FreeCLabel(label$)": {
		"prefix": "FreeCLabel",
		"body": "FreeCLabel(${1:label$})",
		"description": "MUI FreeCLabel."
	},
	"FreeCLabelI(label$)": {
		"prefix": "FreeCLabelI",
		"body": "FreeCLabelI(${1:label$})",
		"description": "MUI FreeCLabelI."
	},
	"FreeCLabelII(label$)": {
		"prefix": "FreeCLabelII",
		"body": "FreeCLabelII(${1:label$})",
		"description": "MUI FreeCLabelII."
	},
	"KeyLabel(label$,key$)": {
		"prefix": "KeyLabel",
		"body": "KeyLabel(${1:label$,key$})",
		"description": "MUI KeyLabel."
	},
	"KeyLabelI(label$,key$)": {
		"prefix": "KeyLabelI",
		"body": "KeyLabelI(${1:label$,key$})",
		"description": "MUI KeyLabelI."
	},
	"KeyLabelII(label$,key$)": {
		"prefix": "KeyLabelII",
		"body": "KeyLabelII(${1:label$,key$})",
		"description": "MUI KeyLabelII."
	},
	"KeyLLabel(label$,key$)": {
		"prefix": "KeyLLabel",
		"body": "KeyLLabel(${1:label$,key$})",
		"description": "MUI KeyLLabel."
	},
	"KeyLLabelI(label$,key$)": {
		"prefix": "KeyLLabelI",
		"body": "KeyLLabelI(${1:label$,key$})",
		"description": "MUI KeyLLabelI."
	},
	"KeyLLabelII(label$,key$)": {
		"prefix": "KeyLLabelII",
		"body": "KeyLLabelII(${1:label$,key$})",
		"description": "MUI KeyLLabelII."
	},
	"KeyCLabel(label$,key$)": {
		"prefix": "KeyCLabel",
		"body": "KeyCLabel(${1:label$,key$})",
		"description": "MUI KeyCLabel."
	},
	"KeyCLabelI(label$,key$)": {
		"prefix": "KeyCLabelI",
		"body": "KeyCLabelI(${1:label$,key$})",
		"description": "MUI KeyCLabelI."
	},
	"KeyCLabelII(label$,key$)": {
		"prefix": "KeyCLabelII",
		"body": "KeyCLabelII(${1:label$,key$})",
		"description": "MUI KeyCLabelII."
	},
	"FreeKeyLabel(label$,key$)": {
		"prefix": "FreeKeyLabel",
		"body": "FreeKeyLabel(${1:label$,key$})",
		"description": "MUI FreeKeyLabel."
	},
	"FreeKeyLabelI(label$,key$)": {
		"prefix": "FreeKeyLabelI",
		"body": "FreeKeyLabelI(${1:label$,key$})",
		"description": "MUI FreeKeyLabelI."
	},
	"FreeKeyLabelII(label$,key$)": {
		"prefix": "FreeKeyLabelII",
		"body": "FreeKeyLabelII(${1:label$,key$})",
		"description": "MUI FreeKeyLabelII."
	},
	"FreeKeyLLabel(label$,key$)": {
		"prefix": "FreeKeyLLabel",
		"body": "FreeKeyLLabel(${1:label$,key$})",
		"description": "MUI FreeKeyLLabel."
	},
	"FreeKeyLLabelI(label$,key$)": {
		"prefix": "FreeKeyLLabelI",
		"body": "FreeKeyLLabelI(${1:label$,key$})",
		"description": "MUI FreeKeyLLabelI."
	},
	"FreeKeyLLabelII(label$,key$)": {
		"prefix": "FreeKeyLLabelII",
		"body": "FreeKeyLLabelII(${1:label$,key$})",
		"description": "MUI FreeKeyLLabelII."
	},
	"FreeKeyCLabel(label$,key$)": {
		"prefix": "FreeKeyCLabel",
		"body": "FreeKeyCLabel(${1:label$,key$})",
		"description": "MUI FreeKeyCLabel."
	},
	"FreeKeyCLabelI(label$,key$)": {
		"prefix": "FreeKeyCLabelI",
		"body": "FreeKeyCLabelI(${1:label$,key$})",
		"description": "MUI FreeKeyCLabelI."
	},
	"FreeKeyCLabelII(label$,key$)": {
		"prefix": "FreeKeyCLabelII",
		"body": "FreeKeyCLabelII(${1:label$,key$})",
		"description": "MUI FreeKeyCLabelII."
	},
	"MUI_get obj,attr,store": {
		"prefix": "MUI_get",
		"body": "MUI_get ${1:obj,attr,store}",
		"description": "MUI get."
	},
	"MUI_set obj,attr,value": {
		"prefix": "MUI_set",
		"body": "MUI_set ${1:obj,attr,value}",
		"description": "MUI set."
	},
	"nnset obj,attr,value": {
		"prefix": "nnset",
		"body": "nnset ${1:obj,attr,value}",
		"description": "MUI nnset."
	},
	"setmutex obj,n": {
		"prefix": "setmutex",
		"body": "setmutex ${1:obj,n}",
		"description": "MUI setmutex."
	},
	"setcycle obj,n": {
		"prefix": "setcycle",
		"body": "setcycle ${1:obj,n}",
		"description": "MUI setcycle."
	},
	"setstring obj,s": {
		"prefix": "setstring",
		"body": "setstring ${1:obj,s}",
		"description": "MUI setstring."
	},
	"setcheckmark obj,b": {
		"prefix": "setcheckmark",
		"body": "setcheckmark ${1:obj,b}",
		"description": "MUI setcheckmark."
	},
	"setslider obj,l": {
		"prefix": "setslider",
		"body": "setslider ${1:obj,l}",
		"description": "MUI setslider."
	},
	"MSDPrefs": {
		"prefix": "MSDPrefs",
		"body": "MSDPrefs",
		"description": "Encrypted prefs file object."
	},
	"MSDLoadPrefs(PrefsFile#,FileNAME$,HeaderC$[,alterarray.w])": {
		"prefix": "MSDLoadPrefs",
		"body": "MSDLoadPrefs(${1:PrefsFile#,FileNAME$,HeaderC$[,alterarray.w]})",
		"description": ""
	},
	"MSDSavePrefs(PrefsFile#,FileNAME$,HeaderC$)": {
		"prefix": "MSDSavePrefs",
		"body": "MSDSavePrefs(${1:PrefsFile#,FileNAME$,HeaderC$})",
		"description": ""
	},
	"MSDPushPrefs PrefsFile#,PrefsEntry.w,String$": {
		"prefix": "MSDPushPrefs",
		"body": "MSDPushPrefs ${1:PrefsFile#,PrefsEntry.w,String$}",
		"description": ""
	},
	"MSDPopPrefs(PrefsFile#,PrefsEntry.w)": {
		"prefix": "MSDPopPrefs",
		"body": "MSDPopPrefs(${1:PrefsFile#,PrefsEntry.w})",
		"description": ""
	},
	"MSDClearPrefs PrefsFile#[,onlystrings.w]": {
		"prefix": "MSDClearPrefs",
		"body": "MSDClearPrefs ${1:PrefsFile#[,onlystrings.w]}",
		"description": ""
	},
	"MSDInitPrefs(PrefsFile#,Lines.w)": {
		"prefix": "MSDInitPrefs",
		"body": "MSDInitPrefs(${1:PrefsFile#,Lines.w})",
		"description": ""
	},
	"MSDStandardHead$": {
		"prefix": "MSDStandardHead$",
		"body": "MSDStandardHead$",
		"description": ""
	},
	"MSDMenuPrefHead$": {
		"prefix": "MSDMenuPrefHead$",
		"body": "MSDMenuPrefHead$",
		"description": ""
	},
	"MSDMenuScriptHead$": {
		"prefix": "MSDMenuScriptHead$",
		"body": "MSDMenuScriptHead$",
		"description": ""
	},
	"MSDDecodePrefs(PrefsFile#,Address.l,BlockLength.l,HeaderC$[,alterarray.w])": {
		"prefix": "MSDDecodePrefs",
		"body": "MSDDecodePrefs(${1:PrefsFile#,Address.l,BlockLength.l,HeaderC$[,alterarray.w]})",
		"description": ""
	},
	"MSDTimer A MultiTimer Object": {
		"prefix": "MSDTimer",
		"body": "MSDTimer ${1:A MultiTimer Object}",
		"description": ""
	},
	"MSDPoint(x.w,y.w)": {
		"prefix": "MSDPoint",
		"body": "MSDPoint(${1:x.w,y.w})",
		"description": "Returns colour of pixel at x,y."
	},
	"MSDPixel(x.w,y.w)": {
		"prefix": "MSDPixel",
		"body": "MSDPixel(${1:x.w,y.w})",
		"description": "Returns <>0 if non-zero pixel at x,y."
	},
	"MSDEraseBlit Shape#,x.w,y.w": {
		"prefix": "MSDEraseBlit",
		"body": "MSDEraseBlit ${1:Shape#,x.w,y.w}",
		"description": "Erase an area of graphics the same shape as the shape."
	},
	"MSDPlot x.w,y.w,colour.w": {
		"prefix": "MSDPlot",
		"body": "MSDPlot ${1:x.w,y.w,colour.w}",
		"description": "Draw pixel of colour at x,y."
	},
	"InterleaveShape oldshape.w,newshape.w": {
		"prefix": "InterleaveShape",
		"body": "InterleaveShape ${1:oldshape.w,newshape.w}",
		"description": ""
	},
	"MSDPlotTable *table": {
		"prefix": "MSDPlotTable",
		"body": "MSDPlotTable ${1:*table}",
		"description": ""
	},
	"MSDPeekLen$(Address.l,Length.l)": {
		"prefix": "MSDPeekLen$",
		"body": "MSDPeekLen$(${1:Address.l,Length.l})",
		"description": ""
	},
	"MSDRoundDown(Number.w,Closest.w)": {
		"prefix": "MSDRoundDown",
		"body": "MSDRoundDown(${1:Number.w,Closest.w})",
		"description": ""
	},
	"MSDRound(Number.w,Closest.w)": {
		"prefix": "MSDRound",
		"body": "MSDRound(${1:Number.w,Closest.w})",
		"description": ""
	},
	"MSDRoundUp(Number.w,Closest.w)": {
		"prefix": "MSDRoundUp",
		"body": "MSDRoundUp(${1:Number.w,Closest.w})",
		"description": ""
	},
	"InterleaveBitMap oldbitmap.w,newbitmap.w": {
		"prefix": "InterleaveBitMap",
		"body": "InterleaveBitMap ${1:oldbitmap.w,newbitmap.w}",
		"description": ""
	},
	"MSD32BitCipher *StartAddress,ByteSize": {
		"prefix": "MSD32BitCipher",
		"body": "MSD32BitCipher ${1:*StartAddress,ByteSize}",
		"description": ""
	},
	"MSD32BitCipherOLD *StartAddress,ByteSize": {
		"prefix": "MSD32BitCipherOLD",
		"body": "MSD32BitCipherOLD ${1:*StartAddress,ByteSize}",
		"description": ""
	},
	"MSDKeyBase": {
		"prefix": "MSDKeyBase",
		"body": "MSDKeyBase",
		"description": ""
	},
	"MSDResetKeys": {
		"prefix": "MSDResetKeys",
		"body": "MSDResetKeys",
		"description": ""
	},
	"MSDSet32BitKey Key,Value": {
		"prefix": "MSDSet32BitKey",
		"body": "MSDSet32BitKey ${1:Key,Value}",
		"description": ""
	},
	"MSDGenerateKeys Key,Key,Key,Key": {
		"prefix": "MSDGenerateKeys",
		"body": "MSDGenerateKeys ${1:Key,Key,Key,Key}",
		"description": ""
	},
	"MSDSaveKey FileName$": {
		"prefix": "MSDSaveKey",
		"body": "MSDSaveKey ${1:FileName$}",
		"description": ""
	},
	"MSDLoadKey FileName$": {
		"prefix": "MSDLoadKey",
		"body": "MSDLoadKey ${1:FileName$}",
		"description": ""
	},
	"MSDRandomize Seed,Seed": {
		"prefix": "MSDRandomize",
		"body": "MSDRandomize ${1:Seed,Seed}",
		"description": ""
	},
	"MSDLongWrap(Number,Low,High)": {
		"prefix": "MSDLongWrap",
		"body": "MSDLongWrap(${1:Number,Low,High})",
		"description": ""
	},
	"MSDRnd(Low,High)": {
		"prefix": "MSDRnd",
		"body": "MSDRnd(${1:Low,High})",
		"description": ""
	},
	"MSDQModulus(Numerator.q,Denominator)": {
		"prefix": "MSDQModulus",
		"body": "MSDQModulus(${1:Numerator.q,Denominator})",
		"description": ""
	},
	"MSDTimerReset MSDTimerEvent#": {
		"prefix": "MSDTimerReset",
		"body": "MSDTimerReset ${1:MSDTimerEvent#}",
		"description": ""
	},
	"MSDTimerTicks(MSDTimerEvent#)": {
		"prefix": "MSDTimerTicks",
		"body": "MSDTimerTicks(${1:MSDTimerEvent#})",
		"description": ""
	},
	"MSDTimerSecs(MSDTimerEvent#,Rate)": {
		"prefix": "MSDTimerSecs",
		"body": "MSDTimerSecs(${1:MSDTimerEvent#,Rate})",
		"description": ""
	},
	"MSDGetTimer(MSDTimerEvent#)": {
		"prefix": "MSDGetTimer",
		"body": "MSDGetTimer(${1:MSDTimerEvent#})",
		"description": ""
	},
	"MSDSetTimer MSDTimerEvent#,Value": {
		"prefix": "MSDSetTimer",
		"body": "MSDSetTimer ${1:MSDTimerEvent#,Value}",
		"description": ""
	},
	"MSDFindTimer": {
		"prefix": "MSDFindTimer",
		"body": "MSDFindTimer",
		"description": ""
	},
	"MSDInitTimer": {
		"prefix": "MSDInitTimer",
		"body": "MSDInitTimer",
		"description": ""
	},
	"ILCludgeBitMap BitMap#,Width.w,Height.w,Depth.w,Memory.l": {
		"prefix": "ILCludgeBitMap",
		"body": "ILCludgeBitMap ${1:BitMap#,Width.w,Height.w,Depth.w,Memory.l}",
		"description": ""
	},
	"MSDQuickWrap(Number.q,Low.q,High.q)": {
		"prefix": "MSDQuickWrap",
		"body": "MSDQuickWrap(${1:Number.q,Low.q,High.q})",
		"description": ""
	},
	"MSDQRoundDown(Number.q,Closest.q)": {
		"prefix": "MSDQRoundDown",
		"body": "MSDQRoundDown(${1:Number.q,Closest.q})",
		"description": ""
	},
	"MSDQRound(Number.q,Closest.q)": {
		"prefix": "MSDQRound",
		"body": "MSDQRound(${1:Number.q,Closest.q})",
		"description": ""
	},
	"MSDQRoundUp(Number.q,Closest.q)": {
		"prefix": "MSDQRoundUp",
		"body": "MSDQRoundUp(${1:Number.q,Closest.q})",
		"description": ""
	},
	"MSDReadMice": {
		"prefix": "MSDReadMice",
		"body": "MSDReadMice",
		"description": ""
	},
	"MSDReadMouse [Port.w]": {
		"prefix": "MSDReadMouse",
		"body": "MSDReadMouse ${1:[Port.w]}",
		"description": ""
	},
	"MSDMouse OnOff.b[,Port.w]": {
		"prefix": "MSDMouse",
		"body": "MSDMouse ${1:OnOff.b[,Port.w]}",
		"description": ""
	},
	"MSDMouseArea MinX.w,MinY.w,MaxX.w,MaxY.w[Port.w]": {
		"prefix": "MSDMouseArea",
		"body": "MSDMouseArea ${1:MinX.w,MinY.w,MaxX.w,MaxY.w[Port.w]}",
		"description": ""
	},
	"MSDMouseX [(Port.w)]": {
		"prefix": "MSDMouseX",
		"body": "MSDMouseX ${1:[(Port.w)]}",
		"description": ""
	},
	"MSDMouseXSpeed [(Port.w)]": {
		"prefix": "MSDMouseXSpeed",
		"body": "MSDMouseXSpeed ${1:[(Port.w)]}",
		"description": ""
	},
	"MSDMouseY [(Port.w)]": {
		"prefix": "MSDMouseY",
		"body": "MSDMouseY ${1:[(Port.w)]}",
		"description": ""
	},
	"MSDMouseYSpeed [(Port.w)]": {
		"prefix": "MSDMouseYSpeed",
		"body": "MSDMouseYSpeed ${1:[(Port.w)]}",
		"description": ""
	},
	"MSDJoyB(Port.w)": {
		"prefix": "MSDJoyB",
		"body": "MSDJoyB(${1:Port.w})",
		"description": ""
	},
	"MSDCreateBuffers(NumBuffers.w)": {
		"prefix": "MSDCreateBuffers",
		"body": "MSDCreateBuffers(${1:NumBuffers.w})",
		"description": "Allocate array to store buffer info."
	},
	"MSDBuffer(buffer.w,NumPlots.w)": {
		"prefix": "MSDBuffer",
		"body": "MSDBuffer(${1:buffer.w,NumPlots.w})",
		"description": "Create space in buffer for number of plots."
	},
	"MSDBPlot buffer.w,x.w,y.w,color.w": {
		"prefix": "MSDBPlot",
		"body": "MSDBPlot ${1:buffer.w,x.w,y.w,color.w}",
		"description": "Buffered plot to current bitmap."
	},
	"MSDUnbuffer buffer.w": {
		"prefix": "MSDUnbuffer",
		"body": "MSDUnbuffer ${1:buffer.w}",
		"description": "Replace previous pixels under BPlotted pixels."
	},
	"MSDFlushBuffer buffer.w": {
		"prefix": "MSDFlushBuffer",
		"body": "MSDFlushBuffer ${1:buffer.w}",
		"description": "Discards all pixels in specified buffer."
	},
	"MSDFreeBuffers [buffer.w]": {
		"prefix": "MSDFreeBuffers",
		"body": "MSDFreeBuffers ${1:[buffer.w]}",
		"description": "Free all buffers and base array or specified buffer."
	},
	"MSDBufferSpace(buffer.w)": {
		"prefix": "MSDBufferSpace",
		"body": "MSDBufferSpace(${1:buffer.w})",
		"description": "returns how many more BPlots can be done on this buffer."
	},
	"MSDHLine x.w,y.w,width.w,color.w": {
		"prefix": "MSDHLine",
		"body": "MSDHLine ${1:x.w,y.w,width.w,color.w}",
		"description": "draw horizontal line."
	},
	"MSDBoxF x.w,y.w,width.w,height.w,color.w": {
		"prefix": "MSDBoxF",
		"body": "MSDBoxF ${1:x.w,y.w,width.w,height.w,color.w}",
		"description": "draw a filled box."
	},
	"MSDVLine x.w,y.w,height.w,color.w": {
		"prefix": "MSDVLine",
		"body": "MSDVLine ${1:x.w,y.w,height.w,color.w}",
		"description": "draw vertical line."
	},
	"MSDZeroBlit shape#,x.w,y.w": {
		"prefix": "MSDZeroBlit",
		"body": "MSDZeroBlit ${1:shape#,x.w,y.w}",
		"description": "blit shape onto color 0 only."
	},
	"QMult(num1.q, num2.q)": {
		"prefix": "QMult",
		"body": "QMult(${1:num1.q, num2.q})",
		"description": ""
	},
	"QDiv(num.q,den.q)": {
		"prefix": "QDiv",
		"body": "QDiv(${1:num.q,den.q})",
		"description": ""
	},
	"BBlitInit(NumBuffers.w)": {
		"prefix": "BBlitInit",
		"body": "BBlitInit(${1:NumBuffers.w})",
		"description": "Allocate array to store buffer info."
	},
	"BBlitBuffer(buffer.w,MemSize.l)": {
		"prefix": "BBlitBuffer",
		"body": "BBlitBuffer(${1:buffer.w,MemSize.l})",
		"description": "Create space in buffer for bblits."
	},
	"MSDBBlit buffer.w,Shape#,x.w,y.w": {
		"prefix": "MSDBBlit",
		"body": "MSDBBlit ${1:buffer.w,Shape#,x.w,y.w}",
		"description": "Buffered blit to current bitmap."
	},
	"BBlitUnbuffer buffer.w": {
		"prefix": "BBlitUnbuffer",
		"body": "BBlitUnbuffer ${1:buffer.w}",
		"description": "Replace previous graphics under MSDBBlit'ted shapes."
	},
	"BBlitFlush buffer.w": {
		"prefix": "BBlitFlush",
		"body": "BBlitFlush ${1:buffer.w}",
		"description": "Discards all data in specified buffer."
	},
	"BBlitFree [buffer.w]": {
		"prefix": "BBlitFree",
		"body": "BBlitFree ${1:[buffer.w]}",
		"description": "Free all buffers and base array/specified buffer."
	},
	"BBlitSpace(buffer.w)": {
		"prefix": "BBlitSpace",
		"body": "BBlitSpace(${1:buffer.w})",
		"description": "returns how much free memory is in this buffer."
	},
	"MSDBlit Shape#,x.w,y.w": {
		"prefix": "MSDBlit",
		"body": "MSDBlit ${1:Shape#,x.w,y.w}",
		"description": "Blit shape to current bitmap."
	},
	"MMc2pRowLacing State.b": {
		"prefix": "MMc2pRowLacing",
		"body": "MMc2pRowLacing ${1:State.b}",
		"description": "Toggle row-lacing in c2p On/Off. NonZero=On."
	},
	"MMc2pColumnLacing State.b": {
		"prefix": "MMc2pColumnLacing",
		"body": "MMc2pColumnLacing ${1:State.b}",
		"description": "Toggle column-lacing in c2p On/Off."
	},
	"MMc2pRowToggle": {
		"prefix": "MMc2pRowToggle",
		"body": "MMc2pRowToggle",
		"description": "Toggle c2p row lacing between Even/Odd rows."
	},
	"MMc2pColumnToggle": {
		"prefix": "MMc2pColumnToggle",
		"body": "MMc2pColumnToggle",
		"description": "Toggle c2p column lacing between Even/Odd columns."
	},
	"MMc2pToggleSingle": {
		"prefix": "MMc2pToggleSingle",
		"body": "MMc2pToggleSingle",
		"description": "Toggle c2p lacing for single-buffered display."
	},
	"MMc2pToggleDouble Buf.b": {
		"prefix": "MMc2pToggleDouble",
		"body": "MMc2pToggleDouble ${1:Buf.b}",
		"description": "0 or 1. Toggle c2p lacing for double-buffered display."
	},
	"MMc2pToggleTriple Buf.b": {
		"prefix": "MMc2pToggleTriple",
		"body": "MMc2pToggleTriple ${1:Buf.b}",
		"description": "0, 1 or 2. Toggle c2p lacing for triple-buffered display."
	},
	"MMc2pToggle Buffers.b,Buf.b": {
		"prefix": "MMc2pToggle",
		"body": "MMc2pToggle ${1:Buffers.b,Buf.b}",
		"description": "1, 2 or 3, and 0, 1 or 2. Toggle c2p lacing."
	},
	"MM040c2pUsage Status.b": {
		"prefix": "MM040c2pUsage",
		"body": "MM040c2pUsage ${1:Status.b}",
		"description": "On/Off - Availability of 040 c2p. Overrides Mc2pCPUmode."
	},
	"MMc2pCPUmode CPU.b": {
		"prefix": "MMc2pCPUmode",
		"body": "MMc2pCPUmode ${1:CPU.b}",
		"description": "Set cpu c2p uses. Use Blitz's `Processor'. <4=030-, 4=040+."
	},
	"MMc2pWindow c2pWindow#.w,OpWidth.w,OpHeight.w[,SourceBWidth.w[,Processor.b],PlanarWidth.w,PlanarHeight.w]": {
		"prefix": "MMc2pWindow",
		"body": "MMc2pWindow ${1:c2pWindow#.w,OpWidth.w,OpHeight.w[,SourceBWidth.w[,Processor.b],PlanarWidth.w,PlanarHeight.w]}",
		"description": ""
	},
	"MMc2pWindowWidth(c2pWindowNumber.w)": {
		"prefix": "MMc2pWindowWidth",
		"body": "MMc2pWindowWidth(${1:c2pWindowNumber.w})",
		"description": "Returns width of c2pWindow."
	},
	"MMc2pWindowHeight(c2pWindowNumber.w)": {
		"prefix": "MMc2pWindowHeight",
		"body": "MMc2pWindowHeight(${1:c2pWindowNumber.w})",
		"description": "Returns height of c2pWindow."
	},
	"MMc2pWindowNewHeight c2pWindow#.w,NewHeight.w": {
		"prefix": "MMc2pWindowNewHeight",
		"body": "MMc2pWindowNewHeight ${1:c2pWindow#.w,NewHeight.w}",
		"description": "Change height of already defined c2p object."
	},
	"MMc2p c2pWindow#.w,Chunky.l,Planar.l": {
		"prefix": "MMc2p",
		"body": "MMc2p ${1:c2pWindow#.w,Chunky.l,Planar.l}",
		"description": "Convert chunky to planar (Use Mc2pWindow first)."
	},
	"MMReservec2pWindows [(]NumberOfWindows.w[)]": {
		"prefix": "MMReservec2pWindows",
		"body": "MMReservec2pWindows ${1:[(]NumberOfWindows.w[)]}",
		"description": "Reserve structure-memory for c2pWindows."
	},
	"MMFreec2pWindows [Firstc2pWindow.w,Lastc2pWindow.w]": {
		"prefix": "MMFreec2pWindows",
		"body": "MMFreec2pWindows ${1:[Firstc2pWindow.w,Lastc2pWindow.w]}",
		"description": "Free/delete all/range of c2pwindows."
	},
	"MMFreec2pWindow Free/delete a pre-existing c2pWindow": {
		"prefix": "MMFreec2pWindow",
		"body": "MMFreec2pWindow ${1:Free/delete a pre-existing c2pWindow}",
		"description": ""
	},
	"MMAddrc2pWindow(c2pWindowNumer.w}": {
		"prefix": "MMAddrc2pWindow",
		"body": "MMAddrc2pWindow(${1:c2pWindowNumer.w}})",
		"description": "Returns address of c2pWindow structure."
	},
	"MMUsec2pWindows Mainc2pWindowNum.w[,Secondc2pWindowNum.w[,Thirdc2pWindowNum.w]]": {
		"prefix": "MMUsec2pWindows",
		"body": "MMUsec2pWindows ${1:Mainc2pWindowNum.w[,Secondc2pWindowNum.w[,Thirdc2pWindowNum.w]]}",
		"description": "Current to use."
	},
	"MMUsec2pWindow c2pWindowNumber.w": {
		"prefix": "MMUsec2pWindow",
		"body": "MMUsec2pWindow ${1:c2pWindowNumber.w}",
		"description": "Current to use."
	},
	"MMUsedc2pWindow": {
		"prefix": "MMUsedc2pWindow",
		"body": "MMUsedc2pWindow",
		"description": "Returns currently used c2pWindow."
	},
	"MMAutoUsec2pWindows True/False": {
		"prefix": "MMAutoUsec2pWindows",
		"body": "MMAutoUsec2pWindows ${1:True/False}",
		"description": "Automatically `use' new c2pWindows. <>0=True."
	},
	"MMCopyc2pWindow Sourcec2pWindow.w,Destc2pWindow.w": {
		"prefix": "MMCopyc2pWindow",
		"body": "MMCopyc2pWindow ${1:Sourcec2pWindow.w,Destc2pWindow.w}",
		"description": "Copy definition-data only."
	},
	"MMGenericPtr Xpos.w,Ypos.w,BaseAddress.l,RowWidth.w": {
		"prefix": "MMGenericPtr",
		"body": "MMGenericPtr ${1:Xpos.w,Ypos.w,BaseAddress.l,RowWidth.w}",
		"description": "Calculate and return address based on inputs."
	},
	"MWrapXParticles CoordinateList.l,NumPoints.l": {
		"prefix": "MWrapXParticles",
		"body": "MWrapXParticles ${1:CoordinateList.l,NumPoints.l}",
		"description": "Bring particles in from left/right edges (Not Ptr.l)."
	},
	"MWrapYParticles CoordinateList.l,NumPoints.l": {
		"prefix": "MWrapYParticles",
		"body": "MWrapYParticles ${1:CoordinateList.l,NumPoints.l}",
		"description": "Bring particles in from top/bottom edges."
	},
	"MAddToXParticles CoordinateList.l,NumPoints.l,IncA.l[,IncB.l]": {
		"prefix": "MAddToXParticles",
		"body": "MAddToXParticles ${1:CoordinateList.l,NumPoints.l,IncA.l[,IncB.l]}",
		"description": "Add X components of [two sets of] increments."
	},
	"MAddToYParticles CoordinateList.l,NumPoints.l,IncA.l[,IncB.l]": {
		"prefix": "MAddToYParticles",
		"body": "MAddToYParticles ${1:CoordinateList.l,NumPoints.l,IncA.l[,IncB.l]}",
		"description": "Add Y components of [two sets of] increments."
	},
	"MAddMode": {
		"prefix": "MAddMode",
		"body": "MAddMode",
		"description": "Returns value 7 which represents `add' mode in the blit modes."
	},
	"Mc2pCPUmode CPU.b": {
		"prefix": "Mc2pCPUmode",
		"body": "Mc2pCPUmode ${1:CPU.b}",
		"description": "Set cpu c2p uses. Use `MProcessor' or `Processor'. <4=030-, >3=040+."
	},
	"Mc2pWindow c2pWindow#.w,OpWidth.w,OpHeight.w[,SourceBWidth.w[,Processor.b],PlanarWidth.w,PlanarHeight.w]": {
		"prefix": "Mc2pWindow",
		"body": "Mc2pWindow ${1:c2pWindow#.w,OpWidth.w,OpHeight.w[,SourceBWidth.w[,Processor.b],PlanarWidth.w,PlanarHeight.w]}",
		"description": ""
	},
	"Mc2pWindowWidth [(c2pWindowNumber.w)]": {
		"prefix": "Mc2pWindowWidth",
		"body": "Mc2pWindowWidth ${1:[(c2pWindowNumber.w)]}",
		"description": "Returns width of c2pWindow."
	},
	"Mc2pWindowHeight [(c2pWindowNumber.w)]": {
		"prefix": "Mc2pWindowHeight",
		"body": "Mc2pWindowHeight ${1:[(c2pWindowNumber.w)]}",
		"description": "Returns height of c2pWindow."
	},
	"Mc2pWindowNewHeight c2pWindow#.w,NewHeight.w": {
		"prefix": "Mc2pWindowNewHeight",
		"body": "Mc2pWindowNewHeight ${1:c2pWindow#.w,NewHeight.w}",
		"description": "Change height of already defined c2p object."
	},
	"Mc2p [[c2pWindow#.w],Chunky.l],Planar.l": {
		"prefix": "Mc2p",
		"body": "Mc2p ${1:[[c2pWindow#.w],Chunky.l],Planar.l}",
		"description": "Convert chunky to planar (Use Mc2pWindow first)."
	},
	"MReservec2pWindows [(]NumberOfWindows.w[)]": {
		"prefix": "MReservec2pWindows",
		"body": "MReservec2pWindows ${1:[(]NumberOfWindows.w[)]}",
		"description": "Reserve structure-memory for c2pWindows."
	},
	"MReserveShapes [(]NumberOfShapes.w[,ShapeBankToUse.w][)]": {
		"prefix": "MReserveShapes",
		"body": "MReserveShapes ${1:[(]NumberOfShapes.w[,ShapeBankToUse.w][)]}",
		"description": "Reserve structure-memory for Shapes."
	},
	"MReserveBitmaps [(]NumberOfBitmaps.w[)]": {
		"prefix": "MReserveBitmaps",
		"body": "MReserveBitmaps ${1:[(]NumberOfBitmaps.w[)]}",
		"description": "Reserve structure-memory for Bitmaps."
	},
	"MShape [(]ShapeNumber.w,Width.w,Height.w[)]": {
		"prefix": "MShape",
		"body": "MShape ${1:[(]ShapeNumber.w,Width.w,Height.w[)]}",
		"description": "Allocmem for shape data."
	},
	"MBitmap [(]BitmapNumber.w,Width.w,Height.w[)]": {
		"prefix": "MBitmap",
		"body": "MBitmap ${1:[(]BitmapNumber.w,Width.w,Height.w[)]}",
		"description": "Allocmem for bitmap data."
	},
	"MAutoCookie On/Off": {
		"prefix": "MAutoCookie",
		"body": "MAutoCookie ${1:On/Off}",
		"description": "Autocreation of ByteForByte cookies."
	},
	"MAutoStencil On/Off": {
		"prefix": "MAutoStencil",
		"body": "MAutoStencil ${1:On/Off}",
		"description": "Autocreation of ByteForByte stencils."
	},
	"MFreec2pWindow [Firstc2pWindow.w[,Lastc2pWindow.w]]": {
		"prefix": "MFreec2pWindow",
		"body": "MFreec2pWindow ${1:[Firstc2pWindow.w[,Lastc2pWindow.w]]}",
		"description": "Free a c2pWindow, range of c2pWindows or all c2pWindows."
	},
	"MFreeShape [FirstShape.w[,LastShape.w]]": {
		"prefix": "MFreeShape",
		"body": "MFreeShape ${1:[FirstShape.w[,LastShape.w]]}",
		"description": "Free a Shape, range of shapes, or all shapes."
	},
	"MFreeBitmap [FirstBitmap.w[,LastBitmap.w]]": {
		"prefix": "MFreeBitmap",
		"body": "MFreeBitmap ${1:[FirstBitmap.w[,LastBitmap.w]]}",
		"description": "Free a Bitmap, range of bitmaps, or all bitmaps."
	},
	"MShapeWidth [(ShapeNumber.w)]": {
		"prefix": "MShapeWidth",
		"body": "MShapeWidth ${1:[(ShapeNumber.w)]}",
		"description": "Returns width of Shape."
	},
	"MBitmapWidth [(BitmapNumber.w)]": {
		"prefix": "MBitmapWidth",
		"body": "MBitmapWidth ${1:[(BitmapNumber.w)]}",
		"description": "Returns width of Bitmap."
	},
	"MShapeHeight [(ShapeNumber.w)]": {
		"prefix": "MShapeHeight",
		"body": "MShapeHeight ${1:[(ShapeNumber.w)]}",
		"description": "Returns height of Shape."
	},
	"MBitmapHeight [(BitmapNumber.w)]": {
		"prefix": "MBitmapHeight",
		"body": "MBitmapHeight ${1:[(BitmapNumber.w)]}",
		"description": "Returns height of Bitmap."
	},
	"MAddrc2pWindow [(c2pWindowNumer.w)]": {
		"prefix": "MAddrc2pWindow",
		"body": "MAddrc2pWindow ${1:[(c2pWindowNumer.w)]}",
		"description": "Returns address of c2pWindow structure."
	},
	"MAddrShape [(ShapeNumber.w)]": {
		"prefix": "MAddrShape",
		"body": "MAddrShape ${1:[(ShapeNumber.w)]}",
		"description": "Returns address of Shape structure."
	},
	"MAddrBitmap [(BitmapNumber.w)]": {
		"prefix": "MAddrBitmap",
		"body": "MAddrBitmap ${1:[(BitmapNumber.w)]}",
		"description": "Returns address of Bitmap structure."
	},
	"MHandle ShapeNumber.w,XOffset.w,YOffset.w": {
		"prefix": "MHandle",
		"body": "MHandle ${1:ShapeNumber.w,XOffset.w,YOffset.w}",
		"description": "Set handle of Shape."
	},
	"MBitmapOrigin BitmapNumber.w,XOffset.w,YOffset.w": {
		"prefix": "MBitmapOrigin",
		"body": "MBitmapOrigin ${1:BitmapNumber.w,XOffset.w,YOffset.w}",
		"description": "Set origin of Bitmap."
	},
	"MUsec2pWindow Mainc2pWindowNum.w[,Secondc2pWindowNum.w[,Thirdc2pWindowNum.w]]": {
		"prefix": "MUsec2pWindow",
		"body": "MUsec2pWindow ${1:Mainc2pWindowNum.w[,Secondc2pWindowNum.w[,Thirdc2pWindowNum.w]]}",
		"description": "Current to use."
	},
	"MUseShape MainShapeNum.w[,SecondShapeNum.w[,ThirdShapeNum.w]]": {
		"prefix": "MUseShape",
		"body": "MUseShape ${1:MainShapeNum.w[,SecondShapeNum.w[,ThirdShapeNum.w]]}",
		"description": "Current Shape(s) to use."
	},
	"MUseBitmap MainBitmapNum.w[,SecondBitmapNum.w[,ThirdBitmapNum.w]]": {
		"prefix": "MUseBitmap",
		"body": "MUseBitmap ${1:MainBitmapNum.w[,SecondBitmapNum.w[,ThirdBitmapNum.w]]}",
		"description": "Current Bitmap(s) to use."
	},
	"MUsedc2pWindow": {
		"prefix": "MUsedc2pWindow",
		"body": "MUsedc2pWindow",
		"description": "Returns currently used c2pWindow."
	},
	"MUsedShape": {
		"prefix": "MUsedShape",
		"body": "MUsedShape",
		"description": "Returns currently used Shape."
	},
	"MUsedBitmap": {
		"prefix": "MUsedBitmap",
		"body": "MUsedBitmap",
		"description": "Returns currently used Bitmap."
	},
	"MCludgeShape ShapeNumber.w,Width.w,Height.w,Memory.l": {
		"prefix": "MCludgeShape",
		"body": "MCludgeShape ${1:ShapeNumber.w,Width.w,Height.w,Memory.l}",
		"description": "Cludge shape from existing mem."
	},
	"MCludgeBitmap BitmapNumber.w,Width.w,Height.w,Memory.l": {
		"prefix": "MCludgeBitmap",
		"body": "MCludgeBitmap ${1:BitmapNumber.w,Width.w,Height.w,Memory.l}",
		"description": "Cludge bitmap from existing mem."
	},
	"MAutoUsec2pWindows True/False": {
		"prefix": "MAutoUsec2pWindows",
		"body": "MAutoUsec2pWindows ${1:True/False}",
		"description": "Automatically `use' new c2pWindows. <>0=True."
	},
	"MAutoUseShapes True/False": {
		"prefix": "MAutoUseShapes",
		"body": "MAutoUseShapes ${1:True/False}",
		"description": "Automatically `use' new shapes. <>0=True."
	},
	"MAutoUseBitmaps True/False": {
		"prefix": "MAutoUseBitmaps",
		"body": "MAutoUseBitmaps ${1:True/False}",
		"description": "Automatically `use' new bitmaps. <>0=True."
	},
	"MMakeCookie [FirstShape.w[,LastShape.w]]": {
		"prefix": "MMakeCookie",
		"body": "MMakeCookie ${1:[FirstShape.w[,LastShape.w]]}",
		"description": "Make a cookie for a shape, range of shapes, or all shapes."
	},
	"MMakeStencil [FirstBitmap.w[,LastBitmap.w]]": {
		"prefix": "MMakeStencil",
		"body": "MMakeStencil ${1:[FirstBitmap.w[,LastBitmap.w]]}",
		"description": "Make a stencil for a bitmap, range of bitmaps, or all bitmaps."
	},
	"MFreeCookie [FirstShape.w[,LastShape.w]]": {
		"prefix": "MFreeCookie",
		"body": "MFreeCookie ${1:[FirstShape.w[,LastShape.w]]}",
		"description": "Free a Shape's cookie, a range of Shape's cookies, or all cookies."
	},
	"MFreeStencil [FirstBitmap.w[,LastBitmap.w]]": {
		"prefix": "MFreeStencil",
		"body": "MFreeStencil ${1:[FirstBitmap.w[,LastBitmap.w]]}",
		"description": "Free's a Bitmap's stencil, a range of stencils or all stencils."
	},
	"MAutoShapeWrap On/Off": {
		"prefix": "MAutoShapeWrap",
		"body": "MAutoShapeWrap ${1:On/Off}",
		"description": "Auto X&Y Handle-wrapping for Shapes."
	},
	"MAutoBitmapWrap On/Off": {
		"prefix": "MAutoBitmapWrap",
		"body": "MAutoBitmapWrap ${1:On/Off}",
		"description": "Auto X&Y Handle-Wrapingp for Bitmaps."
	},
	"MShapeWrap ShapeNumber.w,On/Off": {
		"prefix": "MShapeWrap",
		"body": "MShapeWrap ${1:ShapeNumber.w,On/Off}",
		"description": "De/Activate X&Y Handle-Wrap for Shape."
	},
	"MBitmapWrap BitmapNumber.w,On/Off": {
		"prefix": "MBitmapWrap",
		"body": "MBitmapWrap ${1:BitmapNumber.w,On/Off}",
		"description": "De/Activate X&Y Handle-Wrap for Bitmap."
	},
	"MCludgeShapeStruct [(]SourceShape.w,DestShape.w[)]": {
		"prefix": "MCludgeShapeStruct",
		"body": "MCludgeShapeStruct ${1:[(]SourceShape.w,DestShape.w[)]}",
		"description": "Copy definition-data only."
	},
	"MCludgeBitmapStruct [(]SourceBitmap.w,DestBitmap.w[)]": {
		"prefix": "MCludgeBitmapStruct",
		"body": "MCludgeBitmapStruct ${1:[(]SourceBitmap.w,DestBitmap.w[)]}",
		"description": "Copy definition-data only."
	},
	"MCopyc2pWindow Sourcec2pWindow.w,Destc2pWindow.w": {
		"prefix": "MCopyc2pWindow",
		"body": "MCopyc2pWindow ${1:Sourcec2pWindow.w,Destc2pWindow.w}",
		"description": "Copy definition-data only."
	},
	"MShapeWindow [(]SourceShape.w,DestShape.w,X.w,Y.w,Width.w,Height.w[)]": {
		"prefix": "MShapeWindow",
		"body": "MShapeWindow ${1:[(]SourceShape.w,DestShape.w,X.w,Y.w,Width.w,Height.w[)]}",
		"description": "Cludge Shape within a Shape."
	},
	"MBitmapWindow [(]SourceBitmap.w,DestBitmap.w,X.w,Y.w,Width.w,Height.w[)]": {
		"prefix": "MBitmapWindow",
		"body": "MBitmapWindow ${1:[(]SourceBitmap.w,DestBitmap.w,X.w,Y.w,Width.w,Height.w[)]}",
		"description": "Cludge Bitmap within a Bitmap."
	},
	"MBitmapShape [(]SourceBitmap.w,DestShape.w[)]": {
		"prefix": "MBitmapShape",
		"body": "MBitmapShape ${1:[(]SourceBitmap.w,DestShape.w[)]}",
		"description": "Copy definition-data only."
	},
	"MShapesBitmap [(]SourceShape.w,DestBitmap.w[)]": {
		"prefix": "MShapesBitmap",
		"body": "MShapesBitmap ${1:[(]SourceShape.w,DestBitmap.w[)]}",
		"description": "Copy definition-data only."
	},
	"MAutoCookieXFlip On/Off": {
		"prefix": "MAutoCookieXFlip",
		"body": "MAutoCookieXFlip ${1:On/Off}",
		"description": "Auto X-Flip for Shape's cookie."
	},
	"MAutoCookieYFlip On/Off": {
		"prefix": "MAutoCookieYFlip",
		"body": "MAutoCookieYFlip ${1:On/Off}",
		"description": "Auto Y-Flip for Shape's cookie."
	},
	"MAutoStencilXFlip On/Off": {
		"prefix": "MAutoStencilXFlip",
		"body": "MAutoStencilXFlip ${1:On/Off}",
		"description": "Auto X-Flip for Bitmap's stencil."
	},
	"MAutoStencilYFlip On/Off": {
		"prefix": "MAutoStencilYFlip",
		"body": "MAutoStencilYFlip ${1:On/Off}",
		"description": "Auto Y-Flip for Bitmap's stencil."
	},
	"MAutoCookieFlip On/Off": {
		"prefix": "MAutoCookieFlip",
		"body": "MAutoCookieFlip ${1:On/Off}",
		"description": "Auto X&Y Cookie-Flip for Shapes."
	},
	"MAutoStencilFlip On/Off": {
		"prefix": "MAutoStencilFlip",
		"body": "MAutoStencilFlip ${1:On/Off}",
		"description": "Auto X&Y Stencil-Flip for Bitmaps."
	},
	"MShapeXFlip ShapeNumber.w": {
		"prefix": "MShapeXFlip",
		"body": "MShapeXFlip ${1:ShapeNumber.w}",
		"description": "Horizontally flip a Shape (see MAutoCookieFlip)."
	},
	"MShapeYFlip ShapeNumber.w": {
		"prefix": "MShapeYFlip",
		"body": "MShapeYFlip ${1:ShapeNumber.w}",
		"description": "Vertically flip a Shape (see MAutoCookieFlip)."
	},
	"MBitmapXFlip BitmapNumber.w": {
		"prefix": "MBitmapXFlip",
		"body": "MBitmapXFlip ${1:BitmapNumber.w}",
		"description": "Horizontally flip a Bitmap (see MAutoStencilFlip)."
	},
	"MBitmapYFlip BitmapNumber.w": {
		"prefix": "MBitmapYFlip",
		"body": "MBitmapYFlip ${1:BitmapNumber.w}",
		"description": "Vertically flip a Bitmap (see MAutoStencilFlip)."
	},
	"MCookieXFlip ShapeNumber.w": {
		"prefix": "MCookieXFlip",
		"body": "MCookieXFlip ${1:ShapeNumber.w}",
		"description": "Horizontally flip a Shape's cookie."
	},
	"MCookieYFlip ShapeNumber.w": {
		"prefix": "MCookieYFlip",
		"body": "MCookieYFlip ${1:ShapeNumber.w}",
		"description": "Vertically flip a Shape's cookie."
	},
	"MStencilXFlip BitmapNumber.w": {
		"prefix": "MStencilXFlip",
		"body": "MStencilXFlip ${1:BitmapNumber.w}",
		"description": "Horizontally flip a Bitmap's stencil."
	},
	"MStencilYFlip BitmapNumber.w": {
		"prefix": "MStencilYFlip",
		"body": "MStencilYFlip ${1:BitmapNumber.w}",
		"description": "Vertically flip a Bitmap's stencil."
	},
	"MAutoShapeClip Status.b": {
		"prefix": "MAutoShapeClip",
		"body": "MAutoShapeClip ${1:Status.b}",
		"description": "Auto-clip new Shapes. On/Off."
	},
	"MAutoBitmapClip Status.b": {
		"prefix": "MAutoBitmapClip",
		"body": "MAutoBitmapClip ${1:Status.b}",
		"description": "Auto-clip new Bitmaps. On/Off."
	},
	"MShapeClip ShapeNumber.w[,X.w,Y.w,Width.w,Height.w][,Active]": {
		"prefix": "MShapeClip",
		"body": "MShapeClip ${1:ShapeNumber.w[,X.w,Y.w,Width.w,Height.w][,Active]}",
		"description": "Active=On/Off. Define Shape's clip window."
	},
	"MBitmapClip BitmapNumber.w[,X.w,Y.w,Width.w,Height.w][,Active]": {
		"prefix": "MBitmapClip",
		"body": "MBitmapClip ${1:BitmapNumber.w[,X.w,Y.w,Width.w,Height.w][,Active]}",
		"description": "Active=On/Off. Define Bitmap's clip window."
	},
	"MGetaShape ShapeNumber.w,X.w,Y.w,Width.w,Height.w[,Block?,StencilIsCookie?]": {
		"prefix": "MGetaShape",
		"body": "MGetaShape ${1:ShapeNumber.w,X.w,Y.w,Width.w,Height.w[,Block?,StencilIsCookie?]}",
		"description": "Grab shape from bitmap."
	},
	"MGetaBitmap BitmapNumber.w,X.w,Y.w,Width.w,Height.w[,Block?,CookieIsStencil?]": {
		"prefix": "MGetaBitmap",
		"body": "MGetaBitmap ${1:BitmapNumber.w,X.w,Y.w,Width.w,Height.w[,Block?,CookieIsStencil?]}",
		"description": "Grab bitmap from shape."
	},
	"MScroll X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w[,CustomOffsets.l]]": {
		"prefix": "MScroll",
		"body": "MScroll ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w[,CustomOffsets.l]]}",
		"description": "Copy graphic."
	},
	"MScrollShape X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w[,CustomOffsets.l]]": {
		"prefix": "MScrollShape",
		"body": "MScrollShape ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w[,CustomOffsets.l]]}",
		"description": "Copy graphic."
	},
	"MScrollStencil X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w[,CustomOffsets.l]]": {
		"prefix": "MScrollStencil",
		"body": "MScrollStencil ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w[,CustomOffsets.l]]}",
		"description": "Copy sten to sten."
	},
	"MScrollCookie X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w[,CustomOffsets.l]]": {
		"prefix": "MScrollCookie",
		"body": "MScrollCookie ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w[,CustomOffsets.l]]}",
		"description": "Copy cook to cook."
	},
	"MMaskScroll X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]": {
		"prefix": "MMaskScroll",
		"body": "MMaskScroll ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]}",
		"description": "Copy bitmap graphic with stencil-cut."
	},
	"MMaskScrollShape X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]": {
		"prefix": "MMaskScrollShape",
		"body": "MMaskScrollShape ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]}",
		"description": "Copy shape graphic with cookie-cut."
	},
	"MMaskScrollStencil X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]": {
		"prefix": "MMaskScrollStencil",
		"body": "MMaskScrollStencil ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]}",
		"description": "Copy stencil2stencil & stencil-cut."
	},
	"MMaskScrollCookie X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]": {
		"prefix": "MMaskScrollCookie",
		"body": "MMaskScrollCookie ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]}",
		"description": "Copy cookie to cookie & cookie-cut."
	},
	"MScrollBitmapToShape X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w[,CustomOffsets.l]]": {
		"prefix": "MScrollBitmapToShape",
		"body": "MScrollBitmapToShape ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w[,CustomOffsets.l]]}",
		"description": "bitmap 2 shape."
	},
	"MScrollShapeToBitmap X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w[,CustomOffsets.l]]": {
		"prefix": "MScrollShapeToBitmap",
		"body": "MScrollShapeToBitmap ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w[,CustomOffsets.l]]}",
		"description": "shape 2 bitmap."
	},
	"MScrollStencilToCookie X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w[,CustomOffsets.l]]": {
		"prefix": "MScrollStencilToCookie",
		"body": "MScrollStencilToCookie ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w[,CustomOffsets.l]]}",
		"description": "sten2cookie."
	},
	"MScrollCookieToStencil X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w[,CustomOffsets.l]]": {
		"prefix": "MScrollCookieToStencil",
		"body": "MScrollCookieToStencil ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w[,CustomOffsets.l]]}",
		"description": "cookie2sten."
	},
	"MMaskScrollBitmapToShape X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]": {
		"prefix": "MMaskScrollBitmapToShape",
		"body": "MMaskScrollBitmapToShape ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]}",
		"description": "Copy bitmap to shape & cut."
	},
	"MMaskScrollShapeToBitmap X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]": {
		"prefix": "MMaskScrollShapeToBitmap",
		"body": "MMaskScrollShapeToBitmap ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]}",
		"description": "Copy shape to bitmap & cut."
	},
	"MMaskScrollStencilToCookie X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]": {
		"prefix": "MMaskScrollStencilToCookie",
		"body": "MMaskScrollStencilToCookie ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]}",
		"description": "Copy stencil2cookie & cut."
	},
	"MMaskScrollCookieToStencil X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]": {
		"prefix": "MMaskScrollCookieToStencil",
		"body": "MMaskScrollCookieToStencil ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]}",
		"description": "Copy cookie2stencil & cut."
	},
	"MBlockScroll X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]": {
		"prefix": "MBlockScroll",
		"body": "MBlockScroll ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]}",
		"description": "BlockCopy graphic."
	},
	"MBlockScrollShape X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]": {
		"prefix": "MBlockScrollShape",
		"body": "MBlockScrollShape ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]}",
		"description": "BlockCopy graphic."
	},
	"MBlockScrollStencil X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]": {
		"prefix": "MBlockScrollStencil",
		"body": "MBlockScrollStencil ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]}",
		"description": "BlockCopy stencil to stencil."
	},
	"MBlockScrollCookie X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]": {
		"prefix": "MBlockScrollCookie",
		"body": "MBlockScrollCookie ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]}",
		"description": "BlockCopy cookie to cookie."
	},
	"MBlockScrollBitmapToShape X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]": {
		"prefix": "MBlockScrollBitmapToShape",
		"body": "MBlockScrollBitmapToShape ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]}",
		"description": "BlockCopy bitmap to shape."
	},
	"MBlockScrollShapeToBitmap X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]": {
		"prefix": "MBlockScrollShapeToBitmap",
		"body": "MBlockScrollShapeToBitmap ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]}",
		"description": "BlockCopy shape to bitmap."
	},
	"MBlockScrollStencilToCookie X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]": {
		"prefix": "MBlockScrollStencilToCookie",
		"body": "MBlockScrollStencilToCookie ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]}",
		"description": "BlockCopy stencil2cookie."
	},
	"MBlockScrollCookieToStencil X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]": {
		"prefix": "MBlockScrollCookieToStencil",
		"body": "MBlockScrollCookieToStencil ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]}",
		"description": "BlockCopy cookie2stencil."
	},
	"MCPU Processor.b": {
		"prefix": "MCPU",
		"body": "MCPU ${1:Processor.b}",
		"description": "Set cpu routines allowed to use. CAREFUL!! Try using `MProcessor' or `Processor'."
	},
	"MCls [Colour] Clear a bitmap to colour 0 or the specified colour (in DrawingMode)": {
		"prefix": "MCls",
		"body": "MCls ${1:[Colour] Clear a bitmap to colour 0 or the specified colour (in DrawingMode)}",
		"description": ""
	},
	"MClsShape [Colour] Clear a shape to colour 0 or the specified colour (in DrawingMode)": {
		"prefix": "MClsShape",
		"body": "MClsShape ${1:[Colour] Clear a shape to colour 0 or the specified colour (in DrawingMode)}",
		"description": ""
	},
	"MClsStencil [Colour] Clear a stencil to colour 0 or the specified colour (in DrawingMode)": {
		"prefix": "MClsStencil",
		"body": "MClsStencil ${1:[Colour] Clear a stencil to colour 0 or the specified colour (in DrawingMode)}",
		"description": ""
	},
	"MClsCookie [Colour] Clear a cookie to colour 0 or the specified colour (in DrawingMode)": {
		"prefix": "MClsCookie",
		"body": "MClsCookie ${1:[Colour] Clear a cookie to colour 0 or the specified colour (in DrawingMode)}",
		"description": ""
	},
	"MPlot Xpos.w,Ypos.w[,Colour]": {
		"prefix": "MPlot",
		"body": "MPlot ${1:Xpos.w,Ypos.w[,Colour]}",
		"description": "Plot a single pixel in the bitmap in DrawingMode."
	},
	"MPlotShape Xpos.w,Ypos.w[,Colour]": {
		"prefix": "MPlotShape",
		"body": "MPlotShape ${1:Xpos.w,Ypos.w[,Colour]}",
		"description": "Plot a single pixel in the shape in DrawingMode."
	},
	"MPlotStencil Xpos.w,Ypos.w[,Colour]": {
		"prefix": "MPlotStencil",
		"body": "MPlotStencil ${1:Xpos.w,Ypos.w[,Colour]}",
		"description": "Plot a single pixel in the stencil to *represent* DrawingMode."
	},
	"MPlotCookie Xpos.w,Ypos.w[,Colour]": {
		"prefix": "MPlotCookie",
		"body": "MPlotCookie ${1:Xpos.w,Ypos.w[,Colour]}",
		"description": "Plot a single pixel in the cookie to *represent* DrawingMode."
	},
	"MPoint(Xpos.w,Ypos.w[,BitmapToRead.w])": {
		"prefix": "MPoint",
		"body": "MPoint(${1:Xpos.w,Ypos.w[,BitmapToRead.w]})",
		"description": "Return the colour of a single pixel in a bitmap."
	},
	"MPointShape(Xpos.w,Ypos.w[,ShapeToRead.w])": {
		"prefix": "MPointShape",
		"body": "MPointShape(${1:Xpos.w,Ypos.w[,ShapeToRead.w]})",
		"description": "Return the colour of a single pixel in a shape."
	},
	"MPointStencil(Xpos.w,Ypos.w[,BitmapToRead.w])": {
		"prefix": "MPointStencil",
		"body": "MPointStencil(${1:Xpos.w,Ypos.w[,BitmapToRead.w]})",
		"description": "Return the status of a pixel in stencil. -1=Data, 0=Background."
	},
	"MPointCookie(Xpos.w,Ypos.w[,ShapeToRead.w])": {
		"prefix": "MPointCookie",
		"body": "MPointCookie(${1:Xpos.w,Ypos.w[,ShapeToRead.w]})",
		"description": "Return the status of a pixel in cookie. -1=Data, 0=Background."
	},
	"MSScroll X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w[,CustomOffsets.l]]": {
		"prefix": "MSScroll",
		"body": "MSScroll ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w[,CustomOffsets.l]]}",
		"description": "Copy bm 2 bm and st 2 st."
	},
	"MSScrollShape X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w[,CustomOffsets.l]]": {
		"prefix": "MSScrollShape",
		"body": "MSScrollShape ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w[,CustomOffsets.l]]}",
		"description": "Copy sh2sh and ck2ck."
	},
	"MSScrollBitmapToShape X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w[,CustomOffsets.l]]": {
		"prefix": "MSScrollBitmapToShape",
		"body": "MSScrollBitmapToShape ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w[,CustomOffsets.l]]}",
		"description": "bm2shandst2ck."
	},
	"MSScrollShapeToBitmap X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w[,CustomOffsets.l]]": {
		"prefix": "MSScrollShapeToBitmap",
		"body": "MSScrollShapeToBitmap ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w[,CustomOffsets.l]]}",
		"description": "sh2bmandck2st."
	},
	"MSMaskScroll X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]": {
		"prefix": "MSMaskScroll",
		"body": "MSMaskScroll ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]}",
		"description": "Stencil-Copy bm 2 bm and st 2 st."
	},
	"MSMaskScrollShape X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]": {
		"prefix": "MSMaskScrollShape",
		"body": "MSMaskScrollShape ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]}",
		"description": "Cookie-Copy sh2sh and ck2ck."
	},
	"MSMaskScrollBitmapToShape X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]": {
		"prefix": "MSMaskScrollBitmapToShape",
		"body": "MSMaskScrollBitmapToShape ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]}",
		"description": "Sten-Copy bm2sh&st2ck."
	},
	"MSMaskScrollShapeToBitmap X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]": {
		"prefix": "MSMaskScrollShapeToBitmap",
		"body": "MSMaskScrollShapeToBitmap ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]}",
		"description": "Cook-Copy sh2bm&ck2st."
	},
	"MSBlockScroll X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]": {
		"prefix": "MSBlockScroll",
		"body": "MSBlockScroll ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]}",
		"description": "Block-Copy bm 2 bm and st 2 st."
	},
	"MSBlockScrollShape X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]": {
		"prefix": "MSBlockScrollShape",
		"body": "MSBlockScrollShape ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]}",
		"description": "Block-Copy sh2sh and ck2ck."
	},
	"MSBlockScrollBitmapToShape X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]": {
		"prefix": "MSBlockScrollBitmapToShape",
		"body": "MSBlockScrollBitmapToShape ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceBitmapNum.w]}",
		"description": "BlockCopy bm2sh&st2ck."
	},
	"MSBlockScrollShapeToBitmap X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]": {
		"prefix": "MSBlockScrollShapeToBitmap",
		"body": "MSBlockScrollShapeToBitmap ${1:X1.w,Y1.w,Width.w,Height.w,X2.w,Y2.w[,SourceShapeNum.w]}",
		"description": "BlockCopy sh2bm&ck2st."
	},
	"MSScrollCut On/Off": {
		"prefix": "MSScrollCut",
		"body": "MSScrollCut ${1:On/Off}",
		"description": "0=Paste stencil/cookie, <>0=Cut using stencil/cookie."
	},
	"MUseShapeBank BankNumber.w": {
		"prefix": "MUseShapeBank",
		"body": "MUseShapeBank ${1:BankNumber.w}",
		"description": "Current shape bank, 0..31."
	},
	"MNothing": {
		"prefix": "MNothing",
		"body": "MNothing",
		"description": "This is the 128th token and it doesn't work so is a dummy."
	},
	"MMaskScrollMode [([]Mode.w[])]": {
		"prefix": "MMaskScrollMode",
		"body": "MMaskScrollMode ${1:[([]Mode.w[])]}",
		"description": "CookieMode/EraseMode/InvMode/SolidMode/MColourMode/MReMapMode/MSimpleReMapMode/MAddMo."
	},
	"MBlitMode [([]Mode.w[])]": {
		"prefix": "MBlitMode",
		"body": "MBlitMode ${1:[([]Mode.w[])]}",
		"description": "CookieMode/EraseMode/InvMode/SolidMode/MColourMode/MReMapMode/MSimpleReMapMode/MAddMode."
	},
	"MBlit [ShapeNumber.w,]Xpos.w,Ypos,w": {
		"prefix": "MBlit",
		"body": "MBlit ${1:[ShapeNumber.w,]Xpos.w,Ypos,w}",
		"description": "Blit shape to bitmap, any coords."
	},
	"MBlock [ShapeNumber.w,]Xpos.w,Ypos.w": {
		"prefix": "MBlock",
		"body": "MBlock ${1:[ShapeNumber.w,]Xpos.w,Ypos.w}",
		"description": "Block-blit shape to bitmap, align Xpos and width in multiples of 16!."
	},
	"MTile16x16 [ShapeNumber.w,]Xpos.w,Ypos.w": {
		"prefix": "MTile16x16",
		"body": "MTile16x16 ${1:[ShapeNumber.w,]Xpos.w,Ypos.w}",
		"description": "Block-blit 16x16 shape to bitmap, size must be 16x16, align x/y."
	},
	"MTile32x32 [ShapeNumber.w,]Xpos.w,Ypos.w": {
		"prefix": "MTile32x32",
		"body": "MTile32x32 ${1:[ShapeNumber.w,]Xpos.w,Ypos.w}",
		"description": "Block-blit 32x32 shape to bitmap, size must be 32x32, align x/y."
	},
	"MSTile16x16 [ShapeNumber.w,]Xpos.w,Ypos.w": {
		"prefix": "MSTile16x16",
		"body": "MSTile16x16 ${1:[ShapeNumber.w,]Xpos.w,Ypos.w}",
		"description": "Block-blit 16x16 shape&cook 2 bitmap, size 16x16, align x/y."
	},
	"MSTile32x32 [ShapeNumber.w,]Xpos.w,Ypos.w": {
		"prefix": "MSTile32x32",
		"body": "MSTile32x32 ${1:[ShapeNumber.w,]Xpos.w,Ypos.w}",
		"description": "Block-blit 32x32 shape&cook 2 bitmap, size 32x32, align x/y."
	},
	"MSTile16x16Store [ShapeNumber.w,]Xpos.w,Ypos.w": {
		"prefix": "MSTile16x16Store",
		"body": "MSTile16x16Store ${1:[ShapeNumber.w,]Xpos.w,Ypos.w}",
		"description": "Block-blit 16x16 shape&cook 2 bitmaps, size 16x16, align x/y."
	},
	"MSTile32x32Store [ShapeNumber.w,]Xpos.w,Ypos.w": {
		"prefix": "MSTile32x32Store",
		"body": "MSTile32x32Store ${1:[ShapeNumber.w,]Xpos.w,Ypos.w}",
		"description": "Block-blit 32x32 shape&cook 2 bitmaps, size 32x32, align x/y."
	},
	"MTile16x16Store [ShapeNumber.w,]Xpos.w,Ypos.w": {
		"prefix": "MTile16x16Store",
		"body": "MTile16x16Store ${1:[ShapeNumber.w,]Xpos.w,Ypos.w}",
		"description": "Block-blit 16x16 shape to 2 bitmaps, size 16x16, align x/y."
	},
	"MTile32x32Store [ShapeNumber.w,]Xpos.w,Ypos.w": {
		"prefix": "MTile32x32Store",
		"body": "MTile32x32Store ${1:[ShapeNumber.w,]Xpos.w,Ypos.w}",
		"description": "Block-blit 32x32 shape to 2 bitmaps, size 32x32, align x/y."
	},
	"MReserveQueues [(]NumberOfQueues.w[)]": {
		"prefix": "MReserveQueues",
		"body": "MReserveQueues ${1:[(]NumberOfQueues.w[)]}",
		"description": "Reserve structure-memory for Queues."
	},
	"MFreeQueue [FirstQueue.w[,LastQueue.w]]": {
		"prefix": "MFreeQueue",
		"body": "MFreeQueue ${1:[FirstQueue.w[,LastQueue.w]]}",
		"description": "Free a Queue, a range of queues, or all queues."
	},
	"MAddrQueue [(QueueNumber.w)]": {
		"prefix": "MAddrQueue",
		"body": "MAddrQueue ${1:[(QueueNumber.w)]}",
		"description": "Returns address of Queue structure."
	},
	"MQueue [(]QueueNumber.w,NumberOfItems.w[)]": {
		"prefix": "MQueue",
		"body": "MQueue ${1:[(]QueueNumber.w,NumberOfItems.w[)]}",
		"description": "Allocmem for Queue list items."
	},
	"MFlushQueue QueueNumber.w": {
		"prefix": "MFlushQueue",
		"body": "MFlushQueue ${1:QueueNumber.w}",
		"description": "Empties the queue to contain no items."
	},
	"MQBlitMode [([]Mode.w[])]": {
		"prefix": "MQBlitMode",
		"body": "MQBlitMode ${1:[([]Mode.w[])]}",
		"description": "CookieMode/EraseMode/InvMode/SolidMode/MColourMode/MReMapMode/MSimpleReMapMode/MAddMode."
	},
	"MAutoUseQueues True/False": {
		"prefix": "MAutoUseQueues",
		"body": "MAutoUseQueues ${1:True/False}",
		"description": "Automatically `use' new Queues. <>0=True."
	},
	"MUseQueue MainQueueNum.w[,SecondQueueNum.w[,ThirdQueueNum.w]]": {
		"prefix": "MUseQueue",
		"body": "MUseQueue ${1:MainQueueNum.w[,SecondQueueNum.w[,ThirdQueueNum.w]]}",
		"description": "Current queue(s) to use."
	},
	"MUsedQueue": {
		"prefix": "MUsedQueue",
		"body": "MUsedQueue",
		"description": "Returns currently used Queue."
	},
	"MQBlit [[Queue.w,]ShapeNumber.w,]Xpos.w,Ypos,w": {
		"prefix": "MQBlit",
		"body": "MQBlit ${1:[[Queue.w,]ShapeNumber.w,]Xpos.w,Ypos,w}",
		"description": "QBlit shape to bitmap, any coords."
	},
	"MQBlock [[Queue.w,]ShapeNumber.w,]Xpos.w,Ypos.w": {
		"prefix": "MQBlock",
		"body": "MQBlock ${1:[[Queue.w,]ShapeNumber.w,]Xpos.w,Ypos.w}",
		"description": "QBlock-blit shape 2 bitmap, align Xpos & width in mult of 16."
	},
	"MUnQueue QueueNumber.w[,FirstItem.w,LastItem.w][,BitmapNumber.w]": {
		"prefix": "MUnQueue",
		"body": "MUnQueue ${1:QueueNumber.w[,FirstItem.w,LastItem.w][,BitmapNumber.w]}",
		"description": "UnQueue [range of] queued objects [&flush]."
	},
	"MBitmapPtr [Xpos.w,Ypos.w][,BitmapNumber.w]": {
		"prefix": "MBitmapPtr",
		"body": "MBitmapPtr ${1:[Xpos.w,Ypos.w][,BitmapNumber.w]}",
		"description": "Return data address calculated using bitmap [and coords]."
	},
	"MShapePtr [Xpos.w,Ypos.w][,ShapeNumber.w]": {
		"prefix": "MShapePtr",
		"body": "MShapePtr ${1:[Xpos.w,Ypos.w][,ShapeNumber.w]}",
		"description": "Return data address calculated using shape [and coords]."
	},
	"MStencilPtr [Xpos.w,Ypos.w][,BitmapNumber.w]": {
		"prefix": "MStencilPtr",
		"body": "MStencilPtr ${1:[Xpos.w,Ypos.w][,BitmapNumber.w]}",
		"description": "Return address calculated using stencil [and coords]."
	},
	"MCookiePtr [Xpos.w,Ypos.w][,ShapeNumber.w]": {
		"prefix": "MCookiePtr",
		"body": "MCookiePtr ${1:[Xpos.w,Ypos.w][,ShapeNumber.w]}",
		"description": "Return address calculated using cookie [and coords]."
	},
	"MQDummy [Queue.w,]Xpos.w,Ypos.w,Width.w,Height.w": {
		"prefix": "MQDummy",
		"body": "MQDummy ${1:[Queue.w,]Xpos.w,Ypos.w,Width.w,Height.w}",
		"description": "Add an item to a queue without having to do a blit."
	},
	"MSBlitMode [([]Mode.w[])]": {
		"prefix": "MSBlitMode",
		"body": "MSBlitMode ${1:[([]Mode.w[])]}",
		"description": "CookieMode/EraseMode/InvMode/SolidMode/MColourMode/MReMapMode/MSimpleReMapMode/MAddMode."
	},
	"MSBlit [ShapeNumber.w,]Xpos.w,Ypos,w": {
		"prefix": "MSBlit",
		"body": "MSBlit ${1:[ShapeNumber.w,]Xpos.w,Ypos,w}",
		"description": "Blit shape to bitmap and cookie to stencil, any coords."
	},
	"MSBlock [ShapeNumber.w,]Xpos.w,Ypos.w": {
		"prefix": "MSBlock",
		"body": "MSBlock ${1:[ShapeNumber.w,]Xpos.w,Ypos.w}",
		"description": "Block-blit shape to bitmap & cookie 2 stencil, Xpos&Width in 16's."
	},
	"MSBlitCut On/Off": {
		"prefix": "MSBlitCut",
		"body": "MSBlitCut ${1:On/Off}",
		"description": "0=Paste stencil/cookie, <>0=Cut using stencil/cookie."
	},
	"MQSBlitMode [([]Mode.w[])]": {
		"prefix": "MQSBlitMode",
		"body": "MQSBlitMode ${1:[([]Mode.w[])]}",
		"description": "CookieMode/EraseMode/InvMode/SolidMode/MColourMode/MReMapMode/MSimpleReMapMode/MAddMode."
	},
	"MQSBlit [[Queue.w,]ShapeNumber.w,]Xpos.w,Ypos,w": {
		"prefix": "MQSBlit",
		"body": "MQSBlit ${1:[[Queue.w,]ShapeNumber.w,]Xpos.w,Ypos,w}",
		"description": "QBlit shape to bitmap and cookie to stencil, any coords."
	},
	"MQSBlock [[Queue.w,]ShapeNumber.w,]Xpos.w,Ypos.w": {
		"prefix": "MQSBlock",
		"body": "MQSBlock ${1:[[Queue.w,]ShapeNumber.w,]Xpos.w,Ypos.w}",
		"description": "QBlock-blit shape 2 bitmap, Xpos&width mult of 16."
	},
	"MQSBlitCut On/Off": {
		"prefix": "MQSBlitCut",
		"body": "MQSBlitCut ${1:On/Off}",
		"description": "0=Paste stencil/cookie, <>0=Cut using stencil/cookie. Adds entry to queue."
	},
	"MBoxF Xpos.w,Ypos.w,Xpos2.w,Ypos2.w[,Colour] Draw a filled box in a bitmap in DrawingMode": {
		"prefix": "MBoxF",
		"body": "MBoxF ${1:Xpos.w,Ypos.w,Xpos2.w,Ypos2.w[,Colour] Draw a filled box in a bitmap in DrawingMode}",
		"description": ""
	},
	"MBoxFShape Xpos.w,Ypos.w,Xpos2.w,Ypos2.w[,Colour] Draw a filled box in a shape in DrawingMode": {
		"prefix": "MBoxFShape",
		"body": "MBoxFShape ${1:Xpos.w,Ypos.w,Xpos2.w,Ypos2.w[,Colour] Draw a filled box in a shape in DrawingMode}",
		"description": ""
	},
	"MBoxFStencil Xpos.w,Ypos.w,Xpos2.w,Ypos2.w[,Colour] Draw a filled box in a stencil in DrawingMode": {
		"prefix": "MBoxFStencil",
		"body": "MBoxFStencil ${1:Xpos.w,Ypos.w,Xpos2.w,Ypos2.w[,Colour] Draw a filled box in a stencil in DrawingMode}",
		"description": ""
	},
	"MBoxFCookie Xpos.w,Ypos.w,Xpos2.w,Ypos2.w[,Colour] Draw a filled box in a cookie in DrawingMode": {
		"prefix": "MBoxFCookie",
		"body": "MBoxFCookie ${1:Xpos.w,Ypos.w,Xpos2.w,Ypos2.w[,Colour] Draw a filled box in a cookie in DrawingMode}",
		"description": ""
	},
	"MBox Xpos.w,Ypos.w,Xpos2.w,Ypos2.w[,Colour] Draw an unfilled box in a bitmap in DrawingMode": {
		"prefix": "MBox",
		"body": "MBox ${1:Xpos.w,Ypos.w,Xpos2.w,Ypos2.w[,Colour] Draw an unfilled box in a bitmap in DrawingMode}",
		"description": ""
	},
	"MBoxShape Xpos.w,Ypos.w,Xpos2.w,Ypos2.w[,Colour] Draw an unfilled box in a shape in DrawingMode": {
		"prefix": "MBoxShape",
		"body": "MBoxShape ${1:Xpos.w,Ypos.w,Xpos2.w,Ypos2.w[,Colour] Draw an unfilled box in a shape in DrawingMode}",
		"description": ""
	},
	"MBoxStencil Xpos.w,Ypos.w,Xpos2.w,Ypos2.w[,Colour] Draw an unfilled box in a stencil in DrawingMode": {
		"prefix": "MBoxStencil",
		"body": "MBoxStencil ${1:Xpos.w,Ypos.w,Xpos2.w,Ypos2.w[,Colour] Draw an unfilled box in a stencil in DrawingMode}",
		"description": ""
	},
	"MBoxCookie Xpos.w,Ypos.w,Width.w,Height.w[,Colour] Draw an unfilled box in a cookie in DrawingMode": {
		"prefix": "MBoxCookie",
		"body": "MBoxCookie ${1:Xpos.w,Ypos.w,Width.w,Height.w[,Colour] Draw an unfilled box in a cookie in DrawingMode}",
		"description": ""
	},
	"MPlanar16ToBitmap BitmapNum.w,PlanarAddr.l[,OpWidth.w,OpHeight.w,PlanarWidth.w,PlanarHeight.w]": {
		"prefix": "MPlanar16ToBitmap",
		"body": "MPlanar16ToBitmap ${1:BitmapNum.w,PlanarAddr.l[,OpWidth.w,OpHeight.w,PlanarWidth.w,PlanarHeight.w]}",
		"description": "Convert p2c."
	},
	"MPlanar16ToShape ShapeNum.w,PlanarAddr.l[,OpWidth.w,OpHeight.w,PlanarWidth.w,PlanarHeight.w]": {
		"prefix": "MPlanar16ToShape",
		"body": "MPlanar16ToShape ${1:ShapeNum.w,PlanarAddr.l[,OpWidth.w,OpHeight.w,PlanarWidth.w,PlanarHeight.w]}",
		"description": "Convert p2c."
	},
	"MGenericPtr Xpos.w,Ypos.w,BaseAddress.l,RowWidth.w": {
		"prefix": "MGenericPtr",
		"body": "MGenericPtr ${1:Xpos.w,Ypos.w,BaseAddress.l,RowWidth.w}",
		"description": "Calculate and return address based on inputs."
	},
	"MCludgeCookie ShapeNumber.w,Memory.l": {
		"prefix": "MCludgeCookie",
		"body": "MCludgeCookie ${1:ShapeNumber.w,Memory.l}",
		"description": "Cludge shape's cookie from existing mem."
	},
	"MCludgeStencil BitmapNumber.w,Memory.l": {
		"prefix": "MCludgeStencil",
		"body": "MCludgeStencil ${1:BitmapNumber.w,Memory.l}",
		"description": "Cludge bitmap's stencil from existing mem."
	},
	"MBlockUnQueue QueueNumber.w[,FirstItem.w,LastItem.w][,BitmapNumber.w]": {
		"prefix": "MBlockUnQueue",
		"body": "MBlockUnQueue ${1:QueueNumber.w[,FirstItem.w,LastItem.w][,BitmapNumber.w]}",
		"description": "Block-UnQueue [range of] objects[&flush]."
	},
	"MReMap [Colour#0.b,Colour#1.b,BitmapNum.w] *or* [RemapTable.l[,BitmapNum.w]]": {
		"prefix": "MReMap",
		"body": "MReMap ${1:[Colour#0.b,Colour#1.b,BitmapNum.w] *or* [RemapTable.l[,BitmapNum.w]]}",
		"description": "Remap #0 to #1 or with table."
	},
	"MReMapShape [Colour#0.b,Colour#1.b,ShapeNum.w] *or* [RemapTable.l[,ShapeNum.w]]": {
		"prefix": "MReMapShape",
		"body": "MReMapShape ${1:[Colour#0.b,Colour#1.b,ShapeNum.w] *or* [RemapTable.l[,ShapeNum.w]]}",
		"description": "Remap #0 to #1 or with table."
	},
	"MLine [Xpos.w,Ypos.w,]Xpos2.w,Ypos2.w[,Colour.b]": {
		"prefix": "MLine",
		"body": "MLine ${1:[Xpos.w,Ypos.w,]Xpos2.w,Ypos2.w[,Colour.b]}",
		"description": "Draw a line from X1,Y1 to X2,Y2 in a Bitmap in DrawingMode."
	},
	"MLineShape [Xpos.w,Ypos.w,]Xpos2.w,Ypos2.w[,Colour.b]": {
		"prefix": "MLineShape",
		"body": "MLineShape ${1:[Xpos.w,Ypos.w,]Xpos2.w,Ypos2.w[,Colour.b]}",
		"description": "Draw a line from X1,Y1 to X2,Y2 in a Shape in DrawingMode."
	},
	"MLineStencil [Xpos.w,Ypos.w,]Xpos2.w,Ypos2.w[,Colour.b]": {
		"prefix": "MLineStencil",
		"body": "MLineStencil ${1:[Xpos.w,Ypos.w,]Xpos2.w,Ypos2.w[,Colour.b]}",
		"description": "Draw a line from X1,Y1 to X2,Y2 in a stencil in DrawingMode."
	},
	"MLineCookie [Xpos.w,Ypos.w,]Xpos2.w,Ypos2.w[,Colour.b]": {
		"prefix": "MLineCookie",
		"body": "MLineCookie ${1:[Xpos.w,Ypos.w,]Xpos2.w,Ypos2.w[,Colour.b]}",
		"description": "Draw a line from X1,Y1 to X2,Y2 in a cookie in DrawingMode."
	},
	"MInk MainColour.b[,SecondColour.b[,ThirdColour.b]]": {
		"prefix": "MInk",
		"body": "MInk ${1:MainColour.b[,SecondColour.b[,ThirdColour.b]]}",
		"description": "Set what colour to assume as currently used. 0..255."
	},
	"MColourMode": {
		"prefix": "MColourMode",
		"body": "MColourMode",
		"description": "Returns value 4 which represents `colour' mode in the blit modes."
	},
	"MReserveTables [(]NumberOfTables.w[)]": {
		"prefix": "MReserveTables",
		"body": "MReserveTables ${1:[(]NumberOfTables.w[)]}",
		"description": "Reserve structure-memory for Tables."
	},
	"MFreeTable [FirstTable.w[,LastTable.w]] TableNumber.w": {
		"prefix": "MFreeTable",
		"body": "MFreeTable ${1:[FirstTable.w[,LastTable.w]] TableNumber.w}",
		"description": "Free a Table, a range of tables or all tables."
	},
	"MAddrTable [(TableNumber.w)]": {
		"prefix": "MAddrTable",
		"body": "MAddrTable ${1:[(TableNumber.w)]}",
		"description": "Returns address of Table structure."
	},
	"MTable [(]TableNumber.w,SizeInBytes.l[)]": {
		"prefix": "MTable",
		"body": "MTable ${1:[(]TableNumber.w,SizeInBytes.l[)]}",
		"description": "Allocmem for Table list items."
	},
	"MAutoUseTables True/False": {
		"prefix": "MAutoUseTables",
		"body": "MAutoUseTables ${1:True/False}",
		"description": "Automatically `use' new Tables. <>0=True."
	},
	"MUseTable MainTableNum.w[,SecondTableNum.w[,ThirdTableNum.w]]": {
		"prefix": "MUseTable",
		"body": "MUseTable ${1:MainTableNum.w[,SecondTableNum.w[,ThirdTableNum.w]]}",
		"description": "Current table(s) to use."
	},
	"MUsedTable": {
		"prefix": "MUsedTable",
		"body": "MUsedTable",
		"description": "Returns currently used Table."
	},
	"MTablePtr [TableNum.w]": {
		"prefix": "MTablePtr",
		"body": "MTablePtr ${1:[TableNum.w]}",
		"description": "Returns pointer to base of the table itself."
	},
	"MReMapMode": {
		"prefix": "MReMapMode",
		"body": "MReMapMode",
		"description": "Returns value 5 which represents `ReMap' mode in the blit modes (uses current 2-dimensional table)."
	},
	"MSimpleReMapMode": {
		"prefix": "MSimpleReMapMode",
		"body": "MSimpleReMapMode",
		"description": "Returns value 6 which is `SimpleReMap' mode in blit modes (uses current 1-dimensional table)."
	},
	"MSMaskScrollMode [([]Mode.w[])]": {
		"prefix": "MSMaskScrollMode",
		"body": "MSMaskScrollMode ${1:[([]Mode.w[])]}",
		"description": "CookieMode/EraseMode/InvMode/SolidMode/MColourMode/MReMapMode/MSimpleReMapMode/MAdd."
	},
	"MPlotParticles CoordinateList.l,NumPoints.l[,Colour.b]": {
		"prefix": "MPlotParticles",
		"body": "MPlotParticles ${1:CoordinateList.l,NumPoints.l[,Colour.b]}",
		"description": "Plot lots of points from a table of positions."
	},
	"MGrabParticles CoordinateList.l,NumPoints.l,Buffer.l": {
		"prefix": "MGrabParticles",
		"body": "MGrabParticles ${1:CoordinateList.l,NumPoints.l,Buffer.l}",
		"description": "Grab lots of points from a table into buffer mem."
	},
	"MDrawParticles CoordinateList.l,NumPoints.l,Buffer.l": {
		"prefix": "MDrawParticles",
		"body": "MDrawParticles ${1:CoordinateList.l,NumPoints.l,Buffer.l}",
		"description": "Draw lots of previously grabbed points using a table."
	},
	"MGrabParticlesAndPlot CoordinateList.l,NumPoints.l,Buffer.l[,Colour.b]": {
		"prefix": "MGrabParticlesAndPlot",
		"body": "MGrabParticlesAndPlot ${1:CoordinateList.l,NumPoints.l,Buffer.l[,Colour.b]}",
		"description": "Grabs points to buffer & plots table."
	},
	"MAddToParticles CoordinateList.l,NumPoints.l,IncA.l[,IncB.l]": {
		"prefix": "MAddToParticles",
		"body": "MAddToParticles ${1:CoordinateList.l,NumPoints.l,IncA.l[,IncB.l]}",
		"description": "Add [two sets of] increments to particle list."
	},
	"MWrapParticles CoordinateList.l,NumPoints.l": {
		"prefix": "MWrapParticles",
		"body": "MWrapParticles ${1:CoordinateList.l,NumPoints.l}",
		"description": "Bring particles in from opposite edge to which they left."
	},
	"MReboundParticles CoordinateList.l,NumPoints.l,DirectionList.l,DetectSize.w": {
		"prefix": "MReboundParticles",
		"body": "MReboundParticles ${1:CoordinateList.l,NumPoints.l,DirectionList.l,DetectSize.w}",
		"description": "Bounce off edges (NOT Ptr.l!!!)."
	},
	"MProcessor": {
		"prefix": "MProcessor",
		"body": "MProcessor",
		"description": "Returns value 0..6 representing MC68000..MC68060 cpu according to exec\\AttnFlags."
	},
	"MAddXYToParticles CoordinateList.l,NumPoints.l,XToAdd.w,YToAdd.w": {
		"prefix": "MAddXYToParticles",
		"body": "MAddXYToParticles ${1:CoordinateList.l,NumPoints.l,XToAdd.w,YToAdd.w}",
		"description": "Add constants to all particles."
	},
	"MAddXYToParticlesA CoordinateList.l,NumPoints.l,ValueToAdd.l": {
		"prefix": "MAddXYToParticlesA",
		"body": "MAddXYToParticlesA ${1:CoordinateList.l,NumPoints.l,ValueToAdd.l}",
		"description": "Add constant to all particle pointers."
	},
	"MAddXYToParticlesQ CoordinateList.l,NumPoints.l,XToAdd.q,YToAdd.q": {
		"prefix": "MAddXYToParticlesQ",
		"body": "MAddXYToParticlesQ ${1:CoordinateList.l,NumPoints.l,XToAdd.q,YToAdd.q}",
		"description": "Add constants to all particles."
	},
	"MParticleMode Mode.w or ()": {
		"prefix": "MParticleMode",
		"body": "MParticleMode ${1:Mode.w or ()}",
		"description": "MColourMode, MSimpleReMapMode, MReMapMode or MAddMode - to use in particle plot/draw."
	},
	"MMildredBase": {
		"prefix": "MMildredBase",
		"body": "MMildredBase",
		"description": "Returns long address of the base of Mildred's internal data area."
	},
	"MDrawingMode [(]Mode.w[)]": {
		"prefix": "MDrawingMode",
		"body": "MDrawingMode ${1:[(]Mode.w[)]}",
		"description": "InvMode/MColourMode/MReMapMode/MSimpleReMapMode/MAddMode to use for drawing (MPlot etc)."
	},
	"MParticleFormat [(]Format.b[)]": {
		"prefix": "MParticleFormat",
		"body": "MParticleFormat ${1:[(]Format.b[)]}",
		"description": "Set particle lists/operation format. 0 = X.w,Y.w, <0 = X.q,Y.q, >0 = Ptr.l."
	},
	"MPictureDissolveIn PictureBitmapNum.w,Colour.b": {
		"prefix": "MPictureDissolveIn",
		"body": "MPictureDissolveIn ${1:PictureBitmapNum.w,Colour.b}",
		"description": "Do a picture-based colour-number dissolve-in of a bitmap."
	},
	"MPictureDissolveOut PictureBitmapNum.w,Colour.b,WipeToColour.b": {
		"prefix": "MPictureDissolveOut",
		"body": "MPictureDissolveOut ${1:PictureBitmapNum.w,Colour.b,WipeToColour.b}",
		"description": "Do picture-based colour dissolve-out of bitmap."
	},
	"MZoom SrcX.q,SrcY.q,XAdd.q,YAdd.q,DestX.w,DestY.w,OpWidth.w,OpHeight.w,DeRes?.w[,SrcBmap.w[,CustomOffsets.l]]": {
		"prefix": "MZoom",
		"body": "MZoom ${1:SrcX.q,SrcY.q,XAdd.q,YAdd.q,DestX.w,DestY.w,OpWidth.w,OpHeight.w,DeRes?.w[,SrcBmap.w[,CustomOffsets.l]]}",
		"description": ""
	},
	"MZoomShape SrcX.q,SrcY.q,XAdd.q,YAdd.q,DestX.w,DestY.w,OpWidth.w,OpHeight.w,DeRes?.w[,SrcShap.w[,CustOffs.l]]": {
		"prefix": "MZoomShape",
		"body": "MZoomShape ${1:SrcX.q,SrcY.q,XAdd.q,YAdd.q,DestX.w,DestY.w,OpWidth.w,OpHeight.w,DeRes?.w[,SrcShap.w[,CustOffs.l]]}",
		"description": ""
	},
	"MZoomBitmapToShape SrcX.q,SrcY.q,XAdd.q,YAdd.q,DstX.w,DstY.w,OpWid.w,OpHeight.w,DeRes?.w[,SrcBmap.w[,CustOffs.l]]": {
		"prefix": "MZoomBitmapToShape",
		"body": "MZoomBitmapToShape ${1:SrcX.q,SrcY.q,XAdd.q,YAdd.q,DstX.w,DstY.w,OpWid.w,OpHeight.w,DeRes?.w[,SrcBmap.w[,CustOffs.l]]}",
		"description": ""
	},
	"MZoomShapeToBitmap SrcX.q,SrcY.q,XAdd.q,YAdd.q,DstX.w,DstY.w,OpWidth.w,OpHeight.w,DeRes?.w[,SrcShap.w[,CustOffs.l]]": {
		"prefix": "MZoomShapeToBitmap",
		"body": "MZoomShapeToBitmap ${1:SrcX.q,SrcY.q,XAdd.q,YAdd.q,DstX.w,DstY.w,OpWidth.w,OpHeight.w,DeRes?.w[,SrcShap.w[,CustOffs.l]]}",
		"description": ""
	},
	"StarField a starfield object": {
		"prefix": "StarField",
		"body": "StarField ${1:a starfield object}",
		"description": ""
	},
	"InitStarField starfield,num [,type]": {
		"prefix": "InitStarField",
		"body": "InitStarField ${1:starfield,num [,type]}",
		"description": "0=Normal / 1=3D."
	},
	"FreeStarField starfield": {
		"prefix": "FreeStarField",
		"body": "FreeStarField ${1:starfield}",
		"description": "Free's memory used by a starfield."
	},
	"StarFieldAdr(starfield)": {
		"prefix": "StarFieldAdr",
		"body": "StarFieldAdr(${1:starfield})",
		"description": ""
	},
	"StarFieldSize(starfield)": {
		"prefix": "StarFieldSize",
		"body": "StarFieldSize(${1:starfield})",
		"description": ""
	},
	"NumStars(starfield)": {
		"prefix": "NumStars",
		"body": "NumStars(${1:starfield})",
		"description": ""
	},
	"StarFieldType(starfield)": {
		"prefix": "StarFieldType",
		"body": "StarFieldType(${1:starfield})",
		"description": ""
	},
	"SetStarFieldType starfield,type": {
		"prefix": "SetStarFieldType",
		"body": "SetStarFieldType ${1:starfield,type}",
		"description": ""
	},
	"SetStar starfield,star,x,y,x speed,y speed": {
		"prefix": "SetStar",
		"body": "SetStar ${1:starfield,star,x,y,x speed,y speed}",
		"description": ""
	},
	"StarX(starfield,star)": {
		"prefix": "StarX",
		"body": "StarX(${1:starfield,star})",
		"description": ""
	},
	"StarY(starfield,star)": {
		"prefix": "StarY",
		"body": "StarY(${1:starfield,star})",
		"description": ""
	},
	"StarXSpeed(starfield,star)": {
		"prefix": "StarXSpeed",
		"body": "StarXSpeed(${1:starfield,star})",
		"description": ""
	},
	"StarYSpeed(starfield,star)": {
		"prefix": "StarYSpeed",
		"body": "StarYSpeed(${1:starfield,star})",
		"description": ""
	},
	"RecalcStarfield starfield,max width,max height": {
		"prefix": "RecalcStarfield",
		"body": "RecalcStarfield ${1:starfield,max width,max height}",
		"description": ""
	},
	"PlotStarfield starfield,colour": {
		"prefix": "PlotStarfield",
		"body": "PlotStarfield ${1:starfield,colour}",
		"description": ""
	},
	"DoStarfield starfield,max width,max height,colour": {
		"prefix": "DoStarfield",
		"body": "DoStarfield ${1:starfield,max width,max height,colour}",
		"description": ""
	},
	"Initmap width,height": {
		"prefix": "Initmap",
		"body": "Initmap ${1:width,height}",
		"description": ""
	},
	"MapWidth": {
		"prefix": "MapWidth",
		"body": "MapWidth",
		"description": "Returns width of map."
	},
	"MapHeight": {
		"prefix": "MapHeight",
		"body": "MapHeight",
		"description": "Returns height of map."
	},
	"MapLen": {
		"prefix": "MapLen",
		"body": "MapLen",
		"description": "Returns length of map in memory (In bytes)."
	},
	"MapAdr": {
		"prefix": "MapAdr",
		"body": "MapAdr",
		"description": "Returns physical address of map in memory."
	},
	"MapPlot X,Y,Value": {
		"prefix": "MapPlot",
		"body": "MapPlot ${1:X,Y,Value}",
		"description": ""
	},
	"MapGet(X,Y)": {
		"prefix": "MapGet",
		"body": "MapGet(${1:X,Y})",
		"description": "Returns value at map location."
	},
	"FreeMap": {
		"prefix": "FreeMap",
		"body": "FreeMap",
		"description": "Free's up memory used by map."
	},
	"FSin(float)": {
		"prefix": "FSin",
		"body": "FSin(${1:float})",
		"description": ""
	},
	"FCos(float)": {
		"prefix": "FCos",
		"body": "FCos(${1:float})",
		"description": ""
	},
	"FTan(float)": {
		"prefix": "FTan",
		"body": "FTan(${1:float})",
		"description": ""
	},
	"FASin(float)": {
		"prefix": "FASin",
		"body": "FASin(${1:float})",
		"description": ""
	},
	"FACos(float)": {
		"prefix": "FACos",
		"body": "FACos(${1:float})",
		"description": ""
	},
	"FATan(float)": {
		"prefix": "FATan",
		"body": "FATan(${1:float})",
		"description": ""
	},
	"FPow(float,float)": {
		"prefix": "FPow",
		"body": "FPow(${1:float,float})",
		"description": ""
	},
	"FSqr(float)": {
		"prefix": "FSqr",
		"body": "FSqr(${1:float})",
		"description": ""
	},
	"FLog10(float)": {
		"prefix": "FLog10",
		"body": "FLog10(${1:float})",
		"description": ""
	},
	"FLog(float)": {
		"prefix": "FLog",
		"body": "FLog(${1:float})",
		"description": ""
	},
	"FRad(float)": {
		"prefix": "FRad",
		"body": "FRad(${1:float})",
		"description": ""
	},
	"FDeg(float)": {
		"prefix": "FDeg",
		"body": "FDeg(${1:float})",
		"description": ""
	},
	"Word(Str[,Num])": {
		"prefix": "Word",
		"body": "Word(${1:Str[,Num]})",
		"description": ""
	},
	"Words(Str)": {
		"prefix": "Words",
		"body": "Words(${1:Str})",
		"description": ""
	},
	"WordIndex(Str,Num)": {
		"prefix": "WordIndex",
		"body": "WordIndex(${1:Str,Num})",
		"description": ""
	},
	"CtrlC": {
		"prefix": "CtrlC",
		"body": "CtrlC",
		"description": "Returns True if a CTRL/C has been received."
	},
	"New(Size[,Type])": {
		"prefix": "New",
		"body": "New(${1:Size[,Type]})",
		"description": "Allocates Memory."
	},
	"Dispose(Addr)": {
		"prefix": "Dispose",
		"body": "Dispose(${1:Addr})",
		"description": "Deallocates previously allocated memory."
	},
	"KickVersion [(Ver)]": {
		"prefix": "KickVersion",
		"body": "KickVersion ${1:[(Ver)]}",
		"description": "Used to Check/Get Kickstart version."
	},
	"execbase": {
		"prefix": "execbase",
		"body": "execbase",
		"description": "Returns pointer to Exec library base."
	},
	"StrLen(Str)|(Addr)": {
		"prefix": "StrLen",
		"body": "StrLen(${1:Str)|(Addr})",
		"description": ""
	},
	"StrLeft(Str,Len[,Pad])": {
		"prefix": "StrLeft",
		"body": "StrLeft(${1:Str,Len[,Pad]})",
		"description": ""
	},
	"StrRight(Str,Len[,Pad])": {
		"prefix": "StrRight",
		"body": "StrRight(${1:Str,Len[,Pad]})",
		"description": ""
	},
	"StrUpper(Str)": {
		"prefix": "StrUpper",
		"body": "StrUpper(${1:Str})",
		"description": ""
	},
	"StrLower(Str)": {
		"prefix": "StrLower",
		"body": "StrLower(${1:Str})",
		"description": ""
	},
	"StrFlip(Str)": {
		"prefix": "StrFlip",
		"body": "StrFlip(${1:Str})",
		"description": ""
	},
	"StrPack(Str[,Table])": {
		"prefix": "StrPack",
		"body": "StrPack(${1:Str[,Table]})",
		"description": ""
	},
	"StrClone(Str,Num)": {
		"prefix": "StrClone",
		"body": "StrClone(${1:Str,Num})",
		"description": ""
	},
	"StrRange(Start[,End])": {
		"prefix": "StrRange",
		"body": "StrRange(${1:Start[,End]})",
		"description": "Returns all characters between Start and END."
	},
	"StrChg(Str,OldStr,NewStr)": {
		"prefix": "StrChg",
		"body": "StrChg(${1:Str,OldStr,NewStr})",
		"description": "Replace all OldStr by NewStr in Str."
	},
	"StrSub(Str,Pos[,Len[,Pad]])": {
		"prefix": "StrSub",
		"body": "StrSub(${1:Str,Pos[,Len[,Pad]]})",
		"description": "Returns a sub-string in Str."
	},
	"StrTrans(Str,OutTable,InTable[,Pad])": {
		"prefix": "StrTrans",
		"body": "StrTrans(${1:Str,OutTable,InTable[,Pad]})",
		"description": ""
	},
	"Printf Str[,Datas...]": {
		"prefix": "Printf",
		"body": "Printf ${1:Str[,Datas...]}",
		"description": ""
	},
	"Stringf Str[,Datas...]": {
		"prefix": "Stringf",
		"body": "Stringf ${1:Str[,Datas...]}",
		"description": ""
	},
	"PrintBuf": {
		"prefix": "PrintBuf",
		"body": "PrintBuf",
		"description": ""
	},
	"FlipWord(Word)": {
		"prefix": "FlipWord",
		"body": "FlipWord(${1:Word})",
		"description": "Flips a Word."
	},
	"FlipLong(Long)": {
		"prefix": "FlipLong",
		"body": "FlipLong(${1:Long})",
		"description": "Flips a Long."
	},
	"FPeekW(Addr)": {
		"prefix": "FPeekW",
		"body": "FPeekW(${1:Addr})",
		"description": "Returns and Flips a Word from Addr."
	},
	"FPeekL(Addr)": {
		"prefix": "FPeekL",
		"body": "FPeekL(${1:Addr})",
		"description": "Returns and Flips a Long from Addr."
	},
	"UPeekB(Addr)": {
		"prefix": "UPeekB",
		"body": "UPeekB(${1:Addr})",
		"description": "Returns an unsigned Byte from Addr."
	},
	"UPeekW(Addr)": {
		"prefix": "UPeekW",
		"body": "UPeekW(${1:Addr})",
		"description": "Returns an unsigned Word from Addr."
	},
	"SaveMem(FileName,Addr,Len)": {
		"prefix": "SaveMem",
		"body": "SaveMem(${1:FileName,Addr,Len})",
		"description": "Saves memory in a file."
	},
	"LoadMem(FileName,Addr,Len)": {
		"prefix": "LoadMem",
		"body": "LoadMem(${1:FileName,Addr,Len})",
		"description": "Loads a file in memory."
	},
	"PeekB(Addr)": {
		"prefix": "PeekB",
		"body": "PeekB(${1:Addr})",
		"description": "Reads a Byte from memory."
	},
	"PeekW(Addr)": {
		"prefix": "PeekW",
		"body": "PeekW(${1:Addr})",
		"description": "Reads a Word from memory."
	},
	"PeekL(Addr)": {
		"prefix": "PeekL",
		"body": "PeekL(${1:Addr})",
		"description": "Reads a Long from memory."
	},
	"PokeB Addr,Byte": {
		"prefix": "PokeB",
		"body": "PokeB ${1:Addr,Byte}",
		"description": "Writes a Byte in memory."
	},
	"PokeW Addr,Word": {
		"prefix": "PokeW",
		"body": "PokeW ${1:Addr,Word}",
		"description": "Writes a Word in memory."
	},
	"PokeL Addr,Long": {
		"prefix": "PokeL",
		"body": "PokeL ${1:Addr,Long}",
		"description": "Writes a Long in memory."
	},
	"PeekS(Addr[,Len])": {
		"prefix": "PeekS",
		"body": "PeekS(${1:Addr[,Len]})",
		"description": "Reads a String form memory."
	},
	"PokeS Addr,Str[,Len]": {
		"prefix": "PokeS",
		"body": "PokeS ${1:Addr,Str[,Len]}",
		"description": "Writes a String in memory."
	},
	"PeekT(Addr,Byte)": {
		"prefix": "PeekT",
		"body": "PeekT(${1:Addr,Byte})",
		"description": "Reads memory into a String from Addr upto Byte."
	},
	"MPokeL Addr,Long[,Long...]": {
		"prefix": "MPokeL",
		"body": "MPokeL ${1:Addr,Long[,Long...]}",
		"description": "Writes multiple Longs."
	},
	"MemCls Addr,Len[,Byte]": {
		"prefix": "MemCls",
		"body": "MemCls ${1:Addr,Len[,Byte]}",
		"description": "Fills memory."
	},
	"LnkAdd(Header,Size)": {
		"prefix": "LnkAdd",
		"body": "LnkAdd(${1:Header,Size})",
		"description": "Create linked list / Add an item."
	},
	"LnkDel Header,Item": {
		"prefix": "LnkDel",
		"body": "LnkDel ${1:Header,Item}",
		"description": "Remove Item from linked list."
	},
	"OpenF(Name[,Mode])": {
		"prefix": "OpenF",
		"body": "OpenF(${1:Name[,Mode]})",
		"description": "Opens a file."
	},
	"CloseF [File]": {
		"prefix": "CloseF",
		"body": "CloseF ${1:[File]}",
		"description": "Closes a file."
	},
	"ReadLN [(File)]": {
		"prefix": "ReadLN",
		"body": "ReadLN ${1:[(File)]}",
		"description": "Reads a line from a file."
	},
	"ReadCH([File,]Len)": {
		"prefix": "ReadCH",
		"body": "ReadCH(${1:[File,]Len})",
		"description": "Reads characters from a file."
	},
	"WriteLN [File,]Str": {
		"prefix": "WriteLN",
		"body": "WriteLN ${1:[File,]Str}",
		"description": "Write a line to a file."
	},
	"WriteCH [File,]Str": {
		"prefix": "WriteCH",
		"body": "WriteCH ${1:[File,]Str}",
		"description": "Write characters to a file."
	},
	"WriteNM [File,]Num,Frm": {
		"prefix": "WriteNM",
		"body": "WriteNM ${1:[File,]Num,Frm}",
		"description": "Write a number to a file."
	},
	"IOFile [File]": {
		"prefix": "IOFile",
		"body": "IOFile ${1:[File]}",
		"description": "Used to Set or Get the working file."
	},
	"EOFile [(File)]": {
		"prefix": "EOFile",
		"body": "EOFile ${1:[(File)]}",
		"description": "Used to check the end of a file."
	},
	"FSeek [File,]Pos,OffSet": {
		"prefix": "FSeek",
		"body": "FSeek ${1:[File,]Pos,OffSet}",
		"description": "Moves the 'file cursor' inside a file."
	},
	"FSize [(File)]": {
		"prefix": "FSize",
		"body": "FSize ${1:[(File)]}",
		"description": "Returns the size of a file in bytes."
	},
	"OpenS(Width,Height,Depth,ScrRes,Title[,Tags])": {
		"prefix": "OpenS",
		"body": "OpenS(${1:Width,Height,Depth,ScrRes,Title[,Tags]})",
		"description": ""
	},
	"OpenW(X,Y,Width,Height,IDCMP,Flags,Title[,Scr[,Gads[,Tags]]])": {
		"prefix": "OpenW",
		"body": "OpenW(${1:X,Y,Width,Height,IDCMP,Flags,Title[,Scr[,Gads[,Tags]]]})",
		"description": ""
	},
	"CloseS Scr": {
		"prefix": "CloseS",
		"body": "CloseS ${1:Scr}",
		"description": "Used to close a screen."
	},
	"CloseW Win": {
		"prefix": "CloseW",
		"body": "CloseW ${1:Win}",
		"description": "Used to close a window."
	},
	"GetICode(Win)": {
		"prefix": "GetICode",
		"body": "GetICode(${1:Win})",
		"description": "Used to get event code."
	},
	"GetIClass(Win)": {
		"prefix": "GetIClass",
		"body": "GetIClass(${1:Win})",
		"description": "Used to get event class."
	},
	"WaitIMsg(Win)": {
		"prefix": "WaitIMsg",
		"body": "WaitIMsg(${1:Win})",
		"description": "Waits for a message from Intuition."
	},
	"WaitICode Win,Code": {
		"prefix": "WaitICode",
		"body": "WaitICode ${1:Win,Code}",
		"description": "Waits for Code(s)."
	},
	"WaitIClass Win,Class": {
		"prefix": "WaitIClass",
		"body": "WaitIClass ${1:Win,Class}",
		"description": "Waits for Class(es)."
	},
	"MsgAddr": {
		"prefix": "MsgAddr",
		"body": "MsgAddr",
		"description": "Last IntuiMessage structure."
	},
	"MsgCode": {
		"prefix": "MsgCode",
		"body": "MsgCode",
		"description": "Code part of the last IntuiMessage."
	},
	"MsgClass": {
		"prefix": "MsgClass",
		"body": "MsgClass",
		"description": "Class part of the last IntuiMessage."
	},
	"MsgQualifier": {
		"prefix": "MsgQualifier",
		"body": "MsgQualifier",
		"description": "Qualifier part of the last IntuiMessage."
	},
	"AcScreen": {
		"prefix": "AcScreen",
		"body": "AcScreen",
		"description": "Used to get the pointer of the active screen."
	},
	"AcWindow": {
		"prefix": "AcWindow",
		"body": "AcWindow",
		"description": "Used to get the pointer of the active window."
	},
	"ScrMseX [(Scr)]": {
		"prefix": "ScrMseX",
		"body": "ScrMseX ${1:[(Scr)]}",
		"description": "Returns X position of the mouse pointer relative to a screen."
	},
	"ScrMseY [(Scr)]": {
		"prefix": "ScrMseY",
		"body": "ScrMseY ${1:[(Scr)]}",
		"description": "Returns Y position of the mouse pointer relative to a screen."
	},
	"WinMseX [(Win)]": {
		"prefix": "WinMseX",
		"body": "WinMseX ${1:[(Win)]}",
		"description": "Returns X position of the mouse pointer relative to a window."
	},
	"WinMseY [(Win)]": {
		"prefix": "WinMseY",
		"body": "WinMseY ${1:[(Win)]}",
		"description": "Returns Y position of the mouse pointer relative to a window."
	},
	"ScrMseIn([Scr,]x1,y1,x2,y2)": {
		"prefix": "ScrMseIn",
		"body": "ScrMseIn(${1:[Scr,]x1,y1,x2,y2})",
		"description": ""
	},
	"WinMseIn([Win,]x1,y1,x2,y2)": {
		"prefix": "WinMseIn",
		"body": "WinMseIn(${1:[Win,]x1,y1,x2,y2})",
		"description": ""
	},
	"NoMoreWin [(Scr)]": {
		"prefix": "NoMoreWin",
		"body": "NoMoreWin ${1:[(Scr)]}",
		"description": "Used to check if there are windows on a screen."
	},
	"WaitNoMoreWin [(Scr)]": {
		"prefix": "WaitNoMoreWin",
		"body": "WaitNoMoreWin ${1:[(Scr)]}",
		"description": "Waits while windows are still opened on a screen."
	},
	"intuitionbase": {
		"prefix": "intuitionbase",
		"body": "intuitionbase",
		"description": "Returns pointer to Intuition library base."
	},
	"DrPort [RastPort]": {
		"prefix": "DrPort",
		"body": "DrPort ${1:[RastPort]}",
		"description": "Sets the RastPort to draw in."
	},
	"DrPlot x,y[,Pen]": {
		"prefix": "DrPlot",
		"body": "DrPlot ${1:x,y[,Pen]}",
		"description": "Changes the color of a pixel in the current RastPort."
	},
	"DrBox x1,y1,x2,y2[,Pen]": {
		"prefix": "DrBox",
		"body": "DrBox ${1:x1,y1,x2,y2[,Pen]}",
		"description": "Draws a box in the current RastPort."
	},
	"DrBoxf x1,y1,x2,y2[,Pen]": {
		"prefix": "DrBoxf",
		"body": "DrBoxf ${1:x1,y1,x2,y2[,Pen]}",
		"description": "Draws a filled box in the current RastPort."
	},
	"DrLine x1,y1,x2,y2[,xn,yn...][,Pen]": {
		"prefix": "DrLine",
		"body": "DrLine ${1:x1,y1,x2,y2[,xn,yn...][,Pen]}",
		"description": "Draws a series of lines on the current RastPort."
	},
	"DrBevel x2,y1,x2,y2,Pen1,Pen2": {
		"prefix": "DrBevel",
		"body": "DrBevel ${1:x2,y1,x2,y2,Pen1,Pen2}",
		"description": "Draws a bevel box on the current RastPort."
	},
	"DrText Text,x,y,Pen[,Len]": {
		"prefix": "DrText",
		"body": "DrText ${1:Text,x,y,Pen[,Len]}",
		"description": "Prints Text on the current RastPort."
	},
	"DrTextLen(Str[,Len])": {
		"prefix": "DrTextLen",
		"body": "DrTextLen(${1:Str[,Len]})",
		"description": "Returns size of Str in pixels."
	},
	"DrTextMax(x1,x2,Str)": {
		"prefix": "DrTextMax",
		"body": "DrTextMax(${1:x1,x2,Str})",
		"description": "Returns the number of characters able to fit between x1 and x2."
	},
	"DrTextStl Style": {
		"prefix": "DrTextStl",
		"body": "DrTextStl ${1:Style}",
		"description": ""
	},
	"DrCls Pen": {
		"prefix": "DrCls",
		"body": "DrCls ${1:Pen}",
		"description": "Clears the current RastPort."
	},
	"DrFont(Font)": {
		"prefix": "DrFont",
		"body": "DrFont(${1:Font})",
		"description": "Sets RastPort font."
	},
	"DrMode Mode": {
		"prefix": "DrMode",
		"body": "DrMode ${1:Mode}",
		"description": "Sets RastPort drawing mode."
	},
	"DrEllipse x,y,xRad,yRad[,Pen]": {
		"prefix": "DrEllipse",
		"body": "DrEllipse ${1:x,y,xRad,yRad[,Pen]}",
		"description": "Used to Draw an outlined ellipse."
	},
	"DrCircle x,y,Rad[,Pen]": {
		"prefix": "DrCircle",
		"body": "DrCircle ${1:x,y,Rad[,Pen]}",
		"description": "Used to Draw an outlined circle."
	},
	"DrBlit BitMap,xSrc,ySrc,xDest,yDest,Width,Height[,MinTerm]": {
		"prefix": "DrBlit",
		"body": "DrBlit ${1:BitMap,xSrc,ySrc,xDest,yDest,Width,Height[,MinTerm]}",
		"description": ""
	},
	"DrTopaz Size": {
		"prefix": "DrTopaz",
		"body": "DrTopaz ${1:Size}",
		"description": "Sets Topaz font."
	},
	"DrPen Pen": {
		"prefix": "DrPen",
		"body": "DrPen ${1:Pen}",
		"description": "SET drawing pen."
	},
	"c2p(Chunky,BitMap,Blocks)": {
		"prefix": "c2p",
		"body": "c2p(${1:Chunky,BitMap,Blocks})",
		"description": ""
	},
	"d2b(Int[,Len])": {
		"prefix": "d2b",
		"body": "d2b(${1:Int[,Len]})",
		"description": "Returns Bin representation."
	},
	"d2c(Int[,Len])": {
		"prefix": "d2c",
		"body": "d2c(${1:Int[,Len]})",
		"description": "Returns Asc representation."
	},
	"d2s(Int[,Len])": {
		"prefix": "d2s",
		"body": "d2s(${1:Int[,Len]})",
		"description": "Returns Str representation."
	},
	"d2x(Int[,Len])": {
		"prefix": "d2x",
		"body": "d2x(${1:Int[,Len]})",
		"description": "Returns Hex representation."
	},
	"c2b": {
		"prefix": "c2b",
		"body": "c2b",
		"description": ""
	},
	"c2d(Str[,Len])": {
		"prefix": "c2d",
		"body": "c2d(${1:Str[,Len]})",
		"description": "Returns Dec representation."
	},
	"c2x(Str[,Len])": {
		"prefix": "c2x",
		"body": "c2x(${1:Str[,Len]})",
		"description": "Returns Hex representation."
	},
	"s2d(Str)": {
		"prefix": "s2d",
		"body": "s2d(${1:Str})",
		"description": "Convert in Dec."
	},
	"x2d(Str)": {
		"prefix": "x2d",
		"body": "x2d(${1:Str})",
		"description": "Convert Hex in a string in Dec."
	},
	"b2d(Str[,Len]": {
		"prefix": "b2d",
		"body": "b2d(${1:Str[,Len]})",
		"description": "Convert a BinStr in Dec."
	},
	"FindByte(Str,Byte)|(Addr,Byte,Len)": {
		"prefix": "FindByte",
		"body": "FindByte(${1:Str,Byte)|(Addr,Byte,Len})",
		"description": "Finds a Byte in memory."
	},
	"FindLong(Str,Long)|(Addr,Long,Len)": {
		"prefix": "FindLong",
		"body": "FindLong(${1:Str,Long)|(Addr,Long,Len})",
		"description": "Finds a Long in memory."
	},
	"FindStrg(FindStr,Str)": {
		"prefix": "FindStrg",
		"body": "FindStrg(${1:FindStr,Str})",
		"description": ""
	},
	"FindWord(Str,Word)|(Addr,Word,Len)": {
		"prefix": "FindWord",
		"body": "FindWord(${1:Str,Word)|(Addr,Word,Len})",
		"description": "Finds a Word in memory."
	},
	"CountByte(Str,Byte)|(Addr,Byte,Len)": {
		"prefix": "CountByte",
		"body": "CountByte(${1:Str,Byte)|(Addr,Byte,Len})",
		"description": ""
	},
	"CountWord(Str,Word)|(Addr,Word,Len)": {
		"prefix": "CountWord",
		"body": "CountWord(${1:Str,Word)|(Addr,Word,Len})",
		"description": ""
	},
	"CountLong(Str,Long)|(Addr,Long,Len)": {
		"prefix": "CountLong",
		"body": "CountLong(${1:Str,Long)|(Addr,Long,Len})",
		"description": ""
	},
	"Big(Int,Int)": {
		"prefix": "Big",
		"body": "Big(${1:Int,Int})",
		"description": "Returns biggest."
	},
	"Low(Int,Int)": {
		"prefix": "Low",
		"body": "Low(${1:Int,Int})",
		"description": "Returns Lowest."
	},
	"ArNew(Num[,Kind])": {
		"prefix": "ArNew",
		"body": "ArNew(${1:Num[,Kind]})",
		"description": "Used to create a new Array."
	},
	"ArDispose Array": {
		"prefix": "ArDispose",
		"body": "ArDispose ${1:Array}",
		"description": "Frees memory used by the Array."
	},
	"ArLen(Array)": {
		"prefix": "ArLen",
		"body": "ArLen(${1:Array})",
		"description": "Returns the length of the Array."
	},
	"ArItm(Array)": {
		"prefix": "ArItm",
		"body": "ArItm(${1:Array})",
		"description": "Returns the number of items in the Array."
	},
	"ArGet(Array,Item)": {
		"prefix": "ArGet",
		"body": "ArGet(${1:Array,Item})",
		"description": "Used to get an Item form an Array."
	},
	"ArSet(Array,Item,Data[,Data...]": {
		"prefix": "ArSet",
		"body": "ArSet(${1:Array,Item,Data[,Data...]})",
		"description": "Sets one or more items."
	},
	"ArStr(Array,Item)": {
		"prefix": "ArStr",
		"body": "ArStr(${1:Array,Item})",
		"description": "Used to get a String from an Array."
	},
	"ArOfByte(Byte[,Byte...])": {
		"prefix": "ArOfByte",
		"body": "ArOfByte(${1:Byte[,Byte...]})",
		"description": "Creates an array of Bytes."
	},
	"ArOfWord(Word[,Word...])": {
		"prefix": "ArOfWord",
		"body": "ArOfWord(${1:Word[,Word...]})",
		"description": "Creates an array of Words."
	},
	"ArOfLong(Long[,Long...])": {
		"prefix": "ArOfLong",
		"body": "ArOfLong(${1:Long[,Long...]})",
		"description": "Creates an array of Longs."
	},
	"ArOfStrg(Strg[,Strg...])": {
		"prefix": "ArOfStrg",
		"body": "ArOfStrg(${1:Strg[,Strg...]})",
		"description": "Creates an array of Strings."
	},
	"wbmessage": {
		"prefix": "wbmessage",
		"body": "wbmessage",
		"description": "Returns location of WBStartup message."
	},
	"WBArgs": {
		"prefix": "WBArgs",
		"body": "WBArgs",
		"description": "Returns the number of arguments passed by the Workbench."
	},
	"wArg(Num)": {
		"prefix": "wArg",
		"body": "wArg(${1:Num})",
		"description": "Used to get WB args."
	},
	"ReadArgs(Template)": {
		"prefix": "ReadArgs",
		"body": "ReadArgs(${1:Template})",
		"description": "Used to parse CLI args."
	},
	"cArg(Num)": {
		"prefix": "cArg",
		"body": "cArg(${1:Num})",
		"description": "Used to get CLI args."
	},
	"CSaveFirstFrame(BitMap#,FileName$,Width.w,ViewMode.l,Palette#)": {
		"prefix": "CSaveFirstFrame",
		"body": "CSaveFirstFrame(${1:BitMap#,FileName$,Width.w,ViewMode.l,Palette#})",
		"description": ""
	},
	"CSaveIff(BitMap#,FileName$,Width.w,ViewMode.l,Palette#)": {
		"prefix": "CSaveIff",
		"body": "CSaveIff(${1:BitMap#,FileName$,Width.w,ViewMode.l,Palette#})",
		"description": ""
	},
	"CSaveNextFrame(BitMap1#,Bitmap2#,FileName$,Width.w,Palette#)": {
		"prefix": "CSaveNextFrame",
		"body": "CSaveNextFrame(${1:BitMap1#,Bitmap2#,FileName$,Width.w,Palette#})",
		"description": ""
	},
	"Help Call BBOnLine-Help Index": {
		"prefix": "Help",
		"body": "Help ${1:Call BBOnLine-Help Index}",
		"description": ""
	},
	"PlayPTModule PTModule#[,position]": {
		"prefix": "PlayPTModule",
		"body": "PlayPTModule ${1:PTModule#[,position]}",
		"description": ""
	},
	"StopPTModule": {
		"prefix": "StopPTModule",
		"body": "StopPTModule",
		"description": ""
	},
	"GetPTSongPos": {
		"prefix": "GetPTSongPos",
		"body": "GetPTSongPos",
		"description": ""
	},
	"GetPTPatternPos": {
		"prefix": "GetPTPatternPos",
		"body": "GetPTPatternPos",
		"description": ""
	},
	"SetPTVolume volume": {
		"prefix": "SetPTVolume",
		"body": "SetPTVolume ${1:volume}",
		"description": ""
	},
	"GetPTVoicePeriod(voice)": {
		"prefix": "GetPTVoicePeriod",
		"body": "GetPTVoicePeriod(${1:voice})",
		"description": ""
	},
	"GetPTVoiceInstrument(voice)": {
		"prefix": "GetPTVoiceInstrument",
		"body": "GetPTVoiceInstrument(${1:voice})",
		"description": ""
	},
	"SetPTMask voicebitmap": {
		"prefix": "SetPTMask",
		"body": "SetPTMask ${1:voicebitmap}",
		"description": ""
	},
	"GetPTMask": {
		"prefix": "GetPTMask",
		"body": "GetPTMask",
		"description": ""
	},
	"SetPTSongLoop on|off": {
		"prefix": "SetPTSongLoop",
		"body": "SetPTSongLoop ${1:on|off}",
		"description": ""
	},
	"SetPTPatLoop on|off|once": {
		"prefix": "SetPTPatLoop",
		"body": "SetPTPatLoop ${1:on|off|once}",
		"description": ""
	},
	"Once": {
		"prefix": "Once",
		"body": "Once",
		"description": ""
	},
	"GetPTModuleLen(PTModule#)": {
		"prefix": "GetPTModuleLen",
		"body": "GetPTModuleLen(${1:PTModule#})",
		"description": ""
	},
	"GetPTPosPattern(PTModule#,position)": {
		"prefix": "GetPTPosPattern",
		"body": "GetPTPosPattern(${1:PTModule#,position})",
		"description": ""
	},
	"GetPTVuLevel(voice)": {
		"prefix": "GetPTVuLevel",
		"body": "GetPTVuLevel(${1:voice})",
		"description": ""
	},
	"GetPTStat": {
		"prefix": "GetPTStat",
		"body": "GetPTStat",
		"description": ""
	},
	"SetPTVoiceToggle voice": {
		"prefix": "SetPTVoiceToggle",
		"body": "SetPTVoiceToggle ${1:voice}",
		"description": ""
	},
	"SetPTVoiceOn voice": {
		"prefix": "SetPTVoiceOn",
		"body": "SetPTVoiceOn ${1:voice}",
		"description": ""
	},
	"SetPTVoiceOff voice": {
		"prefix": "SetPTVoiceOff",
		"body": "SetPTVoiceOff ${1:voice}",
		"description": ""
	},
	"GetPTVoiceStat(voice)": {
		"prefix": "GetPTVoiceStat",
		"body": "GetPTVoiceStat(${1:voice})",
		"description": ""
	},
	"SetPTCiaInt interrupttype": {
		"prefix": "SetPTCiaInt",
		"body": "SetPTCiaInt ${1:interrupttype}",
		"description": ""
	},
	"SetPTCiaPri interruptpriority": {
		"prefix": "SetPTCiaPri",
		"body": "SetPTCiaPri ${1:interruptpriority}",
		"description": ""
	},
	"SetPTCia": {
		"prefix": "SetPTCia",
		"body": "SetPTCia",
		"description": ""
	},
	"SetPTVbl": {
		"prefix": "SetPTVbl",
		"body": "SetPTVbl",
		"description": ""
	},
	"SetPTZeroSpeed on|off": {
		"prefix": "SetPTZeroSpeed",
		"body": "SetPTZeroSpeed ${1:on|off}",
		"description": ""
	},
	"PausePTModule": {
		"prefix": "PausePTModule",
		"body": "PausePTModule",
		"description": ""
	},
	"ContPTModule": {
		"prefix": "ContPTModule",
		"body": "ContPTModule",
		"description": ""
	},
	"SetPTSpeed speed": {
		"prefix": "SetPTSpeed",
		"body": "SetPTSpeed ${1:speed}",
		"description": ""
	},
	"GetPTModuleName$(PTModule#)": {
		"prefix": "GetPTModuleName$",
		"body": "GetPTModuleName$(${1:PTModule#})",
		"description": ""
	},
	"GetPTInstrumentName$(PTModule#,instrumentnumber)": {
		"prefix": "GetPTInstrumentName$",
		"body": "GetPTInstrumentName$(${1:PTModule#,instrumentnumber})",
		"description": ""
	},
	"GetPTInstrumentAddr(PTModule#,instrumentnumber)": {
		"prefix": "GetPTInstrumentAddr",
		"body": "GetPTInstrumentAddr(${1:PTModule#,instrumentnumber})",
		"description": ""
	},
	"GetPTInstrumentLen(PTModule#,instrumentnumber)": {
		"prefix": "GetPTInstrumentLen",
		"body": "GetPTInstrumentLen(${1:PTModule#,instrumentnumber})",
		"description": ""
	},
	"GetPTInstrumentRepeatStart(PTModule#,instrumentnumber)": {
		"prefix": "GetPTInstrumentRepeatStart",
		"body": "GetPTInstrumentRepeatStart(${1:PTModule#,instrumentnumber})",
		"description": ""
	},
	"GetPTInstrumentRepLen(PTModule#,instrumentnumber)": {
		"prefix": "GetPTInstrumentRepLen",
		"body": "GetPTInstrumentRepLen(${1:PTModule#,instrumentnumber})",
		"description": ""
	},
	"GetPTInstrumentVol(PTModule#,instrumentnumber)": {
		"prefix": "GetPTInstrumentVol",
		"body": "GetPTInstrumentVol(${1:PTModule#,instrumentnumber})",
		"description": ""
	},
	"PTInt": {
		"prefix": "PTInt",
		"body": "PTInt",
		"description": ""
	},
	"SetPTNoInt": {
		"prefix": "SetPTNoInt",
		"body": "SetPTNoInt",
		"description": ""
	},
	"PTModule": {
		"prefix": "PTModule",
		"body": "PTModule",
		"description": ""
	},
	"LoadPTModule(PTModule#,filename$)": {
		"prefix": "LoadPTModule",
		"body": "LoadPTModule(${1:PTModule#,filename$})",
		"description": ""
	},
	"SavePTModule(PTModule#,filename$)": {
		"prefix": "SavePTModule",
		"body": "SavePTModule(${1:PTModule#,filename$})",
		"description": ""
	},
	"SetPTTempo ciatempo": {
		"prefix": "SetPTTempo",
		"body": "SetPTTempo ${1:ciatempo}",
		"description": ""
	},
	"GetPTSpeed": {
		"prefix": "GetPTSpeed",
		"body": "GetPTSpeed",
		"description": ""
	},
	"GetPTTempo": {
		"prefix": "GetPTTempo",
		"body": "GetPTTempo",
		"description": ""
	},
	"SetPTVoiceVolume Voice,Volume": {
		"prefix": "SetPTVoiceVolume",
		"body": "SetPTVoiceVolume ${1:Voice,Volume}",
		"description": ""
	},
	"GetPTVoiceVolume(Voice)": {
		"prefix": "GetPTVoiceVolume",
		"body": "GetPTVoiceVolume(${1:Voice})",
		"description": ""
	},
	"GetPTVoiceNote(Voice)": {
		"prefix": "GetPTVoiceNote",
		"body": "GetPTVoiceNote(${1:Voice})",
		"description": ""
	},
	"GetPTRealLevel(voice)": {
		"prefix": "GetPTRealLevel",
		"body": "GetPTRealLevel(${1:voice})",
		"description": ""
	},
	"MUIObject A MUI object": {
		"prefix": "MUIObject",
		"body": "MUIObject ${1:A MUI object}",
		"description": ""
	},
	"MUISetMaximumTags max": {
		"prefix": "MUISetMaximumTags",
		"body": "MUISetMaximumTags ${1:max}",
		"description": ""
	},
	"MUIApplicationTitle title$": {
		"prefix": "MUIApplicationTitle",
		"body": "MUIApplicationTitle ${1:title$}",
		"description": ""
	},
	"MUIApplicationVersion ver$": {
		"prefix": "MUIApplicationVersion",
		"body": "MUIApplicationVersion ${1:ver$}",
		"description": ""
	},
	"MUIApplicationCopyright copyright$": {
		"prefix": "MUIApplicationCopyright",
		"body": "MUIApplicationCopyright ${1:copyright$}",
		"description": ""
	},
	"MUIApplicationAuthor author$": {
		"prefix": "MUIApplicationAuthor",
		"body": "MUIApplicationAuthor ${1:author$}",
		"description": ""
	},
	"MUIApplicationDescription desc$": {
		"prefix": "MUIApplicationDescription",
		"body": "MUIApplicationDescription ${1:desc$}",
		"description": ""
	},
	"MUIApplicationBase base$": {
		"prefix": "MUIApplicationBase",
		"body": "MUIApplicationBase ${1:base$}",
		"description": ""
	},
	"MUIAddApplicationTags &TagList | Tag,Value [,Tag,Value...]": {
		"prefix": "MUIAddApplicationTags",
		"body": "MUIAddApplicationTags ${1:&TagList | Tag,Value [,Tag,Value...]}",
		"description": ""
	},
	"MUICreateApplication": {
		"prefix": "MUICreateApplication",
		"body": "MUICreateApplication",
		"description": ""
	},
	"MUIRemoveApplication": {
		"prefix": "MUIRemoveApplication",
		"body": "MUIRemoveApplication",
		"description": ""
	},
	"MUIApplicationLoc": {
		"prefix": "MUIApplicationLoc",
		"body": "MUIApplicationLoc",
		"description": ""
	},
	"MUIApplicationObj To MUIObject#": {
		"prefix": "MUIApplicationObj",
		"body": "MUIApplicationObj ${1:To MUIObject#}",
		"description": ""
	},
	"MUIAddSubWindow MUIObject#": {
		"prefix": "MUIAddSubWindow",
		"body": "MUIAddSubWindow ${1:MUIObject#}",
		"description": ""
	},
	"MUIFreeObject MUIObject#": {
		"prefix": "MUIFreeObject",
		"body": "MUIFreeObject ${1:MUIObject#}",
		"description": ""
	},
	"MUICreateWindow MUIObject#,title$ [,id$ [,MUIObject#]]": {
		"prefix": "MUICreateWindow",
		"body": "MUICreateWindow ${1:MUIObject#,title$ [,id$ [,MUIObject#]]}",
		"description": ""
	},
	"MUIOpenWindow(MUIObject#)": {
		"prefix": "MUIOpenWindow",
		"body": "MUIOpenWindow(${1:MUIObject#})",
		"description": ""
	},
	"MUICloseWindow MUIObject#": {
		"prefix": "MUICloseWindow",
		"body": "MUICloseWindow ${1:MUIObject#}",
		"description": ""
	},
	"MUIAddTags MUIObject#,&TagList | MUIObject#,Tag,Value [,Tag,Value...]": {
		"prefix": "MUIAddTags",
		"body": "MUIAddTags ${1:MUIObject#,&TagList | MUIObject#,Tag,Value [,Tag,Value...]}",
		"description": ""
	},
	"MUINewObject MUIObject#,Class$,&TagList | MUIObject#,Class$,Tag,Value [,Tag,Value...]": {
		"prefix": "MUINewObject",
		"body": "MUINewObject ${1:MUIObject#,Class$,&TagList | MUIObject#,Class$,Tag,Value [,Tag,Value...]}",
		"description": ""
	},
	"MUIMakeObject MUIObject#,Type,&TagList | MUIObject#,Type,Tag,Value [,Tag,Value...]": {
		"prefix": "MUIMakeObject",
		"body": "MUIMakeObject ${1:MUIObject#,Type,&TagList | MUIObject#,Type,Tag,Value [,Tag,Value...]}",
		"description": ""
	},
	"MUIHVSpace MUIObject#": {
		"prefix": "MUIHVSpace",
		"body": "MUIHVSpace ${1:MUIObject#}",
		"description": ""
	},
	"MUIHSpace MUIObject#,x": {
		"prefix": "MUIHSpace",
		"body": "MUIHSpace ${1:MUIObject#,x}",
		"description": ""
	},
	"MUIVSpace MUIObject#,x": {
		"prefix": "MUIVSpace",
		"body": "MUIVSpace ${1:MUIObject#,x}",
		"description": ""
	},
	"MUIKeyString MUIObject#,Contents$,MaxLen,ControlChar$": {
		"prefix": "MUIKeyString",
		"body": "MUIKeyString ${1:MUIObject#,Contents$,MaxLen,ControlChar$}",
		"description": ""
	},
	"MUICheckMark MUIObject#,Selected": {
		"prefix": "MUICheckMark",
		"body": "MUICheckMark ${1:MUIObject#,Selected}",
		"description": ""
	},
	"MUIKeyCheckMark MUIObject#,Selected,ControlChar$": {
		"prefix": "MUIKeyCheckMark",
		"body": "MUIKeyCheckMark ${1:MUIObject#,Selected,ControlChar$}",
		"description": ""
	},
	"MUISimpleButton MUIObject#,Name$": {
		"prefix": "MUISimpleButton",
		"body": "MUISimpleButton ${1:MUIObject#,Name$}",
		"description": ""
	},
	"MUIKeyButton MUIObject#,Name$,Key$": {
		"prefix": "MUIKeyButton",
		"body": "MUIKeyButton ${1:MUIObject#,Name$,Key$}",
		"description": ""
	},
	"MUICycle MUIObject#,  Entry$ [,Entry$...] | *Array": {
		"prefix": "MUICycle",
		"body": "MUICycle ${1:MUIObject#,  Entry$ [,Entry$...] | *Array}",
		"description": ""
	},
	"MUIKeyCycle MUIObject#,Key$,  Entry$ [,Entry$...] | *Array": {
		"prefix": "MUIKeyCycle",
		"body": "MUIKeyCycle ${1:MUIObject#,Key$,  Entry$ [,Entry$...] | *Array}",
		"description": ""
	},
	"MUIRadio MUIObject#,Name$,  Entry$ [,Entry$...] | *Array": {
		"prefix": "MUIRadio",
		"body": "MUIRadio ${1:MUIObject#,Name$,  Entry$ [,Entry$...] | *Array}",
		"description": ""
	},
	"MUIKeyRadio MUIObject#,Name$,Key$,  Entry$ [,Entry$...] | *Array": {
		"prefix": "MUIKeyRadio",
		"body": "MUIKeyRadio ${1:MUIObject#,Name$,Key$,  Entry$ [,Entry$...] | *Array}",
		"description": ""
	},
	"MUISlider MUIObject#,Min,Max,Level": {
		"prefix": "MUISlider",
		"body": "MUISlider ${1:MUIObject#,Min,Max,Level}",
		"description": ""
	},
	"MUIKeySlider MUIObject#,Min,Max,Level,Key$": {
		"prefix": "MUIKeySlider",
		"body": "MUIKeySlider ${1:MUIObject#,Min,Max,Level,Key$}",
		"description": ""
	},
	"MUILabel MUIObject#,Label$,Flags": {
		"prefix": "MUILabel",
		"body": "MUILabel ${1:MUIObject#,Label$,Flags}",
		"description": ""
	},
	"MUIAddObjHGroup To MUIObject#,MUIObject#": {
		"prefix": "MUIAddObjHGroup",
		"body": "MUIAddObjHGroup ${1:To MUIObject#,MUIObject#}",
		"description": ""
	},
	"MUICreateHGroup MUIObject#": {
		"prefix": "MUICreateHGroup",
		"body": "MUICreateHGroup ${1:MUIObject#}",
		"description": ""
	},
	"MUIAddObjVGroup To MUIObject#,MUIObject#": {
		"prefix": "MUIAddObjVGroup",
		"body": "MUIAddObjVGroup ${1:To MUIObject#,MUIObject#}",
		"description": ""
	},
	"MUICreateVGroup MUIObject#": {
		"prefix": "MUICreateVGroup",
		"body": "MUICreateVGroup ${1:MUIObject#}",
		"description": ""
	},
	"MUISet MUIObject#,&TagList | MUIObject#,Attr,Value [,Attr,Value...]": {
		"prefix": "MUISet",
		"body": "MUISet ${1:MUIObject#,&TagList | MUIObject#,Attr,Value [,Attr,Value...]}",
		"description": ""
	},
	"MUIGet(MUIObject#,Attribute)": {
		"prefix": "MUIGet",
		"body": "MUIGet(${1:MUIObject#,Attribute})",
		"description": ""
	},
	"MUIDoMethod MUIObject#,Method,  Tag [,Tag...] | &TagList": {
		"prefix": "MUIDoMethod",
		"body": "MUIDoMethod ${1:MUIObject#,Method,  Tag [,Tag...] | &TagList}",
		"description": ""
	},
	"MUINotify MUIObject#,Tag,Value,MUIObject#,  Tag [,Tag...] | &TagList": {
		"prefix": "MUINotify",
		"body": "MUINotify ${1:MUIObject#,Tag,Value,MUIObject#,  Tag [,Tag...] | &TagList}",
		"description": ""
	},
	"MUIEvent": {
		"prefix": "MUIEvent",
		"body": "MUIEvent",
		"description": ""
	},
	"MUIWaitEvent": {
		"prefix": "MUIWaitEvent",
		"body": "MUIWaitEvent",
		"description": ""
	},
	"MUINumericButton MUIObject#,Format$,Min,Max": {
		"prefix": "MUINumericButton",
		"body": "MUINumericButton ${1:MUIObject#,Format$,Min,Max}",
		"description": ""
	},
	"MUIAddObjPage To MUIObject#,MUIObject#": {
		"prefix": "MUIAddObjPage",
		"body": "MUIAddObjPage ${1:To MUIObject#,MUIObject#}",
		"description": ""
	},
	"MUICreatePage MUIObject#  ,Page1$ [,Page2$...] | &Page$(0)": {
		"prefix": "MUICreatePage",
		"body": "MUICreatePage ${1:MUIObject#  ,Page1$ [,Page2$...] | &Page$(0)}",
		"description": ""
	},
	"MUIList MUIObject#,Format$,Array$()": {
		"prefix": "MUIList",
		"body": "MUIList ${1:MUIObject#,Format$,Array$()}",
		"description": ""
	},
	"MUIListView To MUIObject#,MUIObject#": {
		"prefix": "MUIListView",
		"body": "MUIListView ${1:To MUIObject#,MUIObject#}",
		"description": ""
	},
	"MUIObjLoc(MUIObject#)": {
		"prefix": "MUIObjLoc",
		"body": "MUIObjLoc(${1:MUIObject#})",
		"description": ""
	},
	"MUIRequest To MUIObject#,Flags,Title$,Gadgets$,Format$  [,Param...]": {
		"prefix": "MUIRequest",
		"body": "MUIRequest ${1:To MUIObject#,Flags,Title$,Gadgets$,Format$  [,Param...]}",
		"description": ""
	},
	"MUIPopButton MUIObject#,Image": {
		"prefix": "MUIPopButton",
		"body": "MUIPopButton ${1:MUIObject#,Image}",
		"description": ""
	},
	"MUIImageButton MUIObject#,Shape#": {
		"prefix": "MUIImageButton",
		"body": "MUIImageButton ${1:MUIObject#,Shape#}",
		"description": ""
	},
	"MUIInsertSingle MUIObject#,Position,  Entry$ [,Entry$...] | *Array": {
		"prefix": "MUIInsertSingle",
		"body": "MUIInsertSingle ${1:MUIObject#,Position,  Entry$ [,Entry$...] | *Array}",
		"description": ""
	},
	"MUIRemoveSingle MUIObject#,Position": {
		"prefix": "MUIRemoveSingle",
		"body": "MUIRemoveSingle ${1:MUIObject#,Position}",
		"description": ""
	},
	"MUIRedrawSingle MUIObject#,Position": {
		"prefix": "MUIRedrawSingle",
		"body": "MUIRedrawSingle ${1:MUIObject#,Position}",
		"description": ""
	},
	"MUIListTitle MUIObject#,  Title$ [,Title$...] | *Array": {
		"prefix": "MUIListTitle",
		"body": "MUIListTitle ${1:MUIObject#,  Title$ [,Title$...] | *Array}",
		"description": ""
	},
	"MUICreateMenu MUIObject#,GTMenuList#,Flags [,TitleUData1 [,...]]": {
		"prefix": "MUICreateMenu",
		"body": "MUICreateMenu ${1:MUIObject#,GTMenuList#,Flags [,TitleUData1 [,...]]}",
		"description": ""
	},
	"MUISetMenu To MUIObject#,MUIObject#": {
		"prefix": "MUISetMenu",
		"body": "MUISetMenu ${1:To MUIObject#,MUIObject#}",
		"description": ""
	},
	"MUIFindUData To MUIObject#,MUIObject#,UserData": {
		"prefix": "MUIFindUData",
		"body": "MUIFindUData ${1:To MUIObject#,MUIObject#,UserData}",
		"description": ""
	},
	"MUIBalanceObject MUIObject#": {
		"prefix": "MUIBalanceObject",
		"body": "MUIBalanceObject ${1:MUIObject#}",
		"description": ""
	},
	"MUINotifyApp MUIObject#,Tag,Value,ReturnID": {
		"prefix": "MUINotifyApp",
		"body": "MUINotifyApp ${1:MUIObject#,Tag,Value,ReturnID}",
		"description": ""
	},
	"MUIAddObjsHGroup To MUIObject#,MUIObject# [,MUIObject# [,...]]": {
		"prefix": "MUIAddObjsHGroup",
		"body": "MUIAddObjsHGroup ${1:To MUIObject#,MUIObject# [,MUIObject# [,...]]}",
		"description": ""
	},
	"MUIAddObjsVGroup To MUIObject#,MUIObject# [,MUIObject# [,...]]": {
		"prefix": "MUIAddObjsVGroup",
		"body": "MUIAddObjsVGroup ${1:To MUIObject#,MUIObject# [,MUIObject# [,...]]}",
		"description": ""
	},
	"MUIAddObjsPage To MUIObject#,MUIObject# [,MUIObject# [,...]]": {
		"prefix": "MUIAddObjsPage",
		"body": "MUIAddObjsPage ${1:To MUIObject#,MUIObject# [,MUIObject# [,...]]}",
		"description": ""
	},
	"MUIBitmapObject MUIObject#,BitMap# [,Palette#]": {
		"prefix": "MUIBitmapObject",
		"body": "MUIBitmapObject ${1:MUIObject#,BitMap# [,Palette#]}",
		"description": ""
	},
	"MUIShapeObject MUIObject#,Shape# [,Palette#]": {
		"prefix": "MUIShapeObject",
		"body": "MUIShapeObject ${1:MUIObject#,Shape# [,Palette#]}",
		"description": ""
	},
	"MUIChangeBitmap MUIObject#,BitMap# [,Palette#]": {
		"prefix": "MUIChangeBitmap",
		"body": "MUIChangeBitmap ${1:MUIObject#,BitMap# [,Palette#]}",
		"description": ""
	},
	"MUIChangeShape MUIObject#,Shape# [,Palette#]": {
		"prefix": "MUIChangeShape",
		"body": "MUIChangeShape ${1:MUIObject#,Shape# [,Palette#]}",
		"description": ""
	},
	"MUIRedraw MUIObject#,Flags": {
		"prefix": "MUIRedraw",
		"body": "MUIRedraw ${1:MUIObject#,Flags}",
		"description": ""
	},
	"MUIListHook On|Off": {
		"prefix": "MUIListHook",
		"body": "MUIListHook ${1:On|Off}",
		"description": ""
	},
	"MUIChangeList MUIObject# [,Array$(),Position]": {
		"prefix": "MUIChangeList",
		"body": "MUIChangeList ${1:MUIObject# [,Array$(),Position]}",
		"description": ""
	},
	"MUIGetCM(MUIObject#)": {
		"prefix": "MUIGetCM",
		"body": "MUIGetCM(${1:MUIObject#})",
		"description": ""
	},
	"MUIGetCycle(MUIObject#)": {
		"prefix": "MUIGetCycle",
		"body": "MUIGetCycle(${1:MUIObject#})",
		"description": ""
	},
	"MUIGetString$(MUIObject#)": {
		"prefix": "MUIGetString$",
		"body": "MUIGetString$(${1:MUIObject#})",
		"description": ""
	},
	"MUISetCM MUIObject#,Selected": {
		"prefix": "MUISetCM",
		"body": "MUISetCM ${1:MUIObject#,Selected}",
		"description": ""
	},
	"MUISetCycle MUIObject#,Selected": {
		"prefix": "MUISetCycle",
		"body": "MUISetCycle ${1:MUIObject#,Selected}",
		"description": ""
	},
	"MUISetString MUIObject#,String$": {
		"prefix": "MUISetString",
		"body": "MUISetString ${1:MUIObject#,String$}",
		"description": ""
	},
	"MUINList MUIObject#,Format$,Array$()": {
		"prefix": "MUINList",
		"body": "MUINList ${1:MUIObject#,Format$,Array$()}",
		"description": ""
	},
	"MUINListView To MUIObject#,MUIObject#": {
		"prefix": "MUINListView",
		"body": "MUINListView ${1:To MUIObject#,MUIObject#}",
		"description": ""
	},
	"MUINListHook On|Off": {
		"prefix": "MUINListHook",
		"body": "MUINListHook ${1:On|Off}",
		"description": ""
	},
	"MUIBetterString MUIObject#,Contents$,MaxLen": {
		"prefix": "MUIBetterString",
		"body": "MUIBetterString ${1:MUIObject#,Contents$,MaxLen}",
		"description": ""
	},
	"MUIKeyBetterString MUIObject#,Contents$,MaxLen,ControlChar$": {
		"prefix": "MUIKeyBetterString",
		"body": "MUIKeyBetterString ${1:MUIObject#,Contents$,MaxLen,ControlChar$}",
		"description": ""
	},
	"MUICreateHVirtGroup MUIObject#": {
		"prefix": "MUICreateHVirtGroup",
		"body": "MUICreateHVirtGroup ${1:MUIObject#}",
		"description": ""
	},
	"MUICreateVVirtGroup MUIObject#": {
		"prefix": "MUICreateVVirtGroup",
		"body": "MUICreateVVirtGroup ${1:MUIObject#}",
		"description": ""
	},
	"MUIBetterBalance MUIObject#": {
		"prefix": "MUIBetterBalance",
		"body": "MUIBetterBalance ${1:MUIObject#}",
		"description": ""
	},
	"MUIWeight MUIObject#,Lbs": {
		"prefix": "MUIWeight",
		"body": "MUIWeight ${1:MUIObject#,Lbs}",
		"description": ""
	},
	"MUIVertWeight MUIObject#,Lbs": {
		"prefix": "MUIVertWeight",
		"body": "MUIVertWeight ${1:MUIObject#,Lbs}",
		"description": ""
	},
	"MUIHorizWeight MUIObject#,Lbs": {
		"prefix": "MUIHorizWeight",
		"body": "MUIHorizWeight ${1:MUIObject#,Lbs}",
		"description": ""
	},
	"MUICycleChain MUIObject#,Chain": {
		"prefix": "MUICycleChain",
		"body": "MUICycleChain ${1:MUIObject#,Chain}",
		"description": ""
	},
	"MUICycleChains Chain,MUIObject# [,MUIObject# [,...]]": {
		"prefix": "MUICycleChains",
		"body": "MUICycleChains ${1:Chain,MUIObject# [,MUIObject# [,...]]}",
		"description": ""
	},
	"MUIGroupSpacing MUIObject#,Pixels": {
		"prefix": "MUIGroupSpacing",
		"body": "MUIGroupSpacing ${1:MUIObject#,Pixels}",
		"description": ""
	},
	"MUIGroupVSpacing MUIObject#,Pixels": {
		"prefix": "MUIGroupVSpacing",
		"body": "MUIGroupVSpacing ${1:MUIObject#,Pixels}",
		"description": ""
	},
	"MUIGroupHSpacing MUIObject#,Pixels": {
		"prefix": "MUIGroupHSpacing",
		"body": "MUIGroupHSpacing ${1:MUIObject#,Pixels}",
		"description": ""
	},
	"MUIText MUIObject#,Contents$,SetVMax": {
		"prefix": "MUIText",
		"body": "MUIText ${1:MUIObject#,Contents$,SetVMax}",
		"description": ""
	},
	"MUITextContents MUIObject#,Contents$": {
		"prefix": "MUITextContents",
		"body": "MUITextContents ${1:MUIObject#,Contents$}",
		"description": ""
	},
	"MUIShortHelp MUIObject#,Help$": {
		"prefix": "MUIShortHelp",
		"body": "MUIShortHelp ${1:MUIObject#,Help$}",
		"description": ""
	},
	"MUIHookToNList MUIObject#,Format$,*Construct,*Display,*Destruct": {
		"prefix": "MUIHookToNList",
		"body": "MUIHookToNList ${1:MUIObject#,Format$,*Construct,*Display,*Destruct}",
		"description": ""
	},
	"MUINListEntries(MUIObject#)": {
		"prefix": "MUINListEntries",
		"body": "MUINListEntries(${1:MUIObject#})",
		"description": ""
	},
	"MUINListGetActive(MUIObject#)": {
		"prefix": "MUINListGetActive",
		"body": "MUINListGetActive(${1:MUIObject#})",
		"description": ""
	},
	"MUINListSetActive MUIObject#,Entry": {
		"prefix": "MUINListSetActive",
		"body": "MUINListSetActive ${1:MUIObject#,Entry}",
		"description": ""
	},
	"MUIAllocDispatcherHook(*HookTo)": {
		"prefix": "MUIAllocDispatcherHook",
		"body": "MUIAllocDispatcherHook(${1:*HookTo})",
		"description": ""
	},
	"MUINewObjectClass MUIObject#,ClassPtr,ClassID,&TagList": {
		"prefix": "MUINewObjectClass",
		"body": "MUINewObjectClass ${1:MUIObject#,ClassPtr,ClassID,&TagList}",
		"description": ""
	},
	"MUICreateCustomClass(Base,Supername$,SuperMCC,DataSize,DispatcherHook)": {
		"prefix": "MUICreateCustomClass",
		"body": "MUICreateCustomClass(${1:Base,Supername$,SuperMCC,DataSize,DispatcherHook})",
		"description": ""
	},
	"MUIDeleteCustomClass(*MCC)": {
		"prefix": "MUIDeleteCustomClass",
		"body": "MUIDeleteCustomClass(${1:*MCC})",
		"description": ""
	},
	"MUICDoMethodA(Obj,Message)": {
		"prefix": "MUICDoMethodA",
		"body": "MUICDoMethodA(${1:Obj,Message})",
		"description": ""
	},
	"MUICDoMethod(Obj,MethodID,Tag[,Tag..])": {
		"prefix": "MUICDoMethod",
		"body": "MUICDoMethod(${1:Obj,MethodID,Tag[,Tag..]})",
		"description": ""
	},
	"MUIDoSuperMethodA(Class,Obj,Message)": {
		"prefix": "MUIDoSuperMethodA",
		"body": "MUIDoSuperMethodA(${1:Class,Obj,Message})",
		"description": ""
	},
	"MUIDoSuperMethod(Class,Obj,MethodID,Tag[,Tag..])": {
		"prefix": "MUIDoSuperMethod",
		"body": "MUIDoSuperMethod(${1:Class,Obj,MethodID,Tag[,Tag..]})",
		"description": ""
	},
	"MUICoerceMethodA(Class,Obj,Message)": {
		"prefix": "MUICoerceMethodA",
		"body": "MUICoerceMethodA(${1:Class,Obj,Message})",
		"description": ""
	},
	"MUICoerceMethod(Class,Obj,MethodID,Tag[,Tag..])": {
		"prefix": "MUICoerceMethod",
		"body": "MUICoerceMethod(${1:Class,Obj,MethodID,Tag[,Tag..]})",
		"description": ""
	},
	"MUISetSuperAttrs(Class,Obj,Tag[,Tag..])": {
		"prefix": "MUISetSuperAttrs",
		"body": "MUISetSuperAttrs(${1:Class,Obj,Tag[,Tag..]})",
		"description": ""
	},
	"Blink <number of blinks>": {
		"prefix": "Blink",
		"body": "Blink ${1:<number of blinks>}",
		"description": "Blinks the LED <n> times."
	},
	"LEDStatus": {
		"prefix": "LEDStatus",
		"body": "LEDStatus",
		"description": "word=LEDStatus - returns -1 if LED is off, 0 if it's on."
	},
	"Crash": {
		"prefix": "Crash",
		"body": "Crash",
		"description": "Probably the most useful command EVER! :) (Use it 4 unreg. progs :)."
	},
	"NoCrash <On/Off>": {
		"prefix": "NoCrash",
		"body": "NoCrash ${1:<On/Off>}",
		"description": "Disables Crash statement (use if you're still debugging)."
	},
	"FindColor(Pal#,Red,Green,Blue[,Tolerance])": {
		"prefix": "FindColor",
		"body": "FindColor(${1:Pal#,Red,Green,Blue[,Tolerance]})",
		"description": ""
	},
	"ColorGrey(Pal#,Color#)": {
		"prefix": "ColorGrey",
		"body": "ColorGrey(${1:Pal#,Color#})",
		"description": ""
	},
	"ColorToGrey(Pal#,Color#)": {
		"prefix": "ColorToGrey",
		"body": "ColorToGrey(${1:Pal#,Color#})",
		"description": ""
	},
	"SaveILBM BitMap#,Filename$,BtmHeader,ViewMode.l,Palette#": {
		"prefix": "SaveILBM",
		"body": "SaveILBM ${1:BitMap#,Filename$,BtmHeader,ViewMode.l,Palette#}",
		"description": ""
	},
	"NChunky is a Chunky Buffer from the BDChunkyLib": {
		"prefix": "NChunky",
		"body": "NChunky ${1:is a Chunky Buffer from the BDChunkyLib}",
		"description": "-)."
	},
	"InitNChunky NChunky#,Width.l,Height.l": {
		"prefix": "InitNChunky",
		"body": "InitNChunky ${1:NChunky#,Width.l,Height.l}",
		"description": ""
	},
	"NChunkyToBtmA *AddrNChunky.l, *AddrBitMap.l": {
		"prefix": "NChunkyToBtmA",
		"body": "NChunkyToBtmA ${1:*AddrNChunky.l, *AddrBitMap.l}",
		"description": ""
	},
	"BtmToNChunkyA *AddrBtm.l, *AddrNChunky.l": {
		"prefix": "BtmToNChunkyA",
		"body": "BtmToNChunkyA ${1:*AddrBtm.l, *AddrNChunky.l}",
		"description": ""
	},
	"NCPlot NChunky#, x.l, y.l, colour.b": {
		"prefix": "NCPlot",
		"body": "NCPlot ${1:NChunky#, x.l, y.l, colour.b}",
		"description": ""
	},
	"NCPoint( NChunky#, x.l, y.l )": {
		"prefix": "NCPoint",
		"body": "NCPoint(${1: NChunky#, x.l, y.l })",
		"description": ""
	},
	"NCBoxF NChunky#, x1.l, y1.l, x2.l, y2.l, colour.b": {
		"prefix": "NCBoxF",
		"body": "NCBoxF ${1:NChunky#, x1.l, y1.l, x2.l, y2.l, colour.b}",
		"description": ""
	},
	"NCBox NChunky#, x1.l, y1.l, x2.l, y2.l, colour.b": {
		"prefix": "NCBox",
		"body": "NCBox ${1:NChunky#, x1.l, y1.l, x2.l, y2.l, colour.b}",
		"description": ""
	},
	"CopyNChunky NChunkySrc#, NChunkyDest#": {
		"prefix": "CopyNChunky",
		"body": "CopyNChunky ${1:NChunkySrc#, NChunkyDest#}",
		"description": ""
	},
	"NCCls NChunky# [,colour.b ]": {
		"prefix": "NCCls",
		"body": "NCCls ${1:NChunky# [,colour.b ]}",
		"description": ""
	},
	"NChunkyToBtm NChunky#, BitMap#": {
		"prefix": "NChunkyToBtm",
		"body": "NChunkyToBtm ${1:NChunky#, BitMap#}",
		"description": ""
	},
	"BtmToNChunky BitMap#, NChunky#": {
		"prefix": "BtmToNChunky",
		"body": "BtmToNChunky ${1:BitMap#, NChunky#}",
		"description": ""
	},
	"InitNChunkyA( Width.l,Height.l )": {
		"prefix": "InitNChunkyA",
		"body": "InitNChunkyA(${1: Width.l,Height.l })",
		"description": ""
	},
	"FreeNChunkyA( *AddrNChunky )": {
		"prefix": "FreeNChunkyA",
		"body": "FreeNChunkyA(${1: *AddrNChunky })",
		"description": ""
	},
	"NCPlotA *AddrNChunky.l, x.l, y.l, colour.b": {
		"prefix": "NCPlotA",
		"body": "NCPlotA ${1:*AddrNChunky.l, x.l, y.l, colour.b}",
		"description": ""
	},
	"NCPointA( *AddrNChunky.l, x.l, y.l )": {
		"prefix": "NCPointA",
		"body": "NCPointA(${1: *AddrNChunky.l, x.l, y.l })",
		"description": ""
	},
	"NCBoxFA *AddrNChunky.l ,x1.l ,y1.l ,x2.l ,y2.l ,colour.b": {
		"prefix": "NCBoxFA",
		"body": "NCBoxFA ${1:*AddrNChunky.l ,x1.l ,y1.l ,x2.l ,y2.l ,colour.b}",
		"description": ""
	},
	"NCBoxA *AddrNChunky.l ,x1.l ,y1.l ,x2.l ,y2.l ,colour.b": {
		"prefix": "NCBoxA",
		"body": "NCBoxA ${1:*AddrNChunky.l ,x1.l ,y1.l ,x2.l ,y2.l ,colour.b}",
		"description": ""
	},
	"CopyNChunkyA *AddrNChunkySrc.l ,*AddrNChunkyDest.l": {
		"prefix": "CopyNChunkyA",
		"body": "CopyNChunkyA ${1:*AddrNChunkySrc.l ,*AddrNChunkyDest.l}",
		"description": ""
	},
	"NCClsA *AddrNChunky.l ,colour.b": {
		"prefix": "NCClsA",
		"body": "NCClsA ${1:*AddrNChunky.l ,colour.b}",
		"description": ""
	},
	"RemapNChunkyLineA *AddrNChunky.l ,y.l ,&RemapTable.l": {
		"prefix": "RemapNChunkyLineA",
		"body": "RemapNChunkyLineA ${1:*AddrNChunky.l ,y.l ,&RemapTable.l}",
		"description": ""
	},
	"RemapNChunkyLine NChunky# ,y.l ,&RemapTable.l": {
		"prefix": "RemapNChunkyLine",
		"body": "RemapNChunkyLine ${1:NChunky# ,y.l ,&RemapTable.l}",
		"description": ""
	},
	"RemapNChunkyPointA *AddrNChunky.l ,x, y.l ,&RemapTable.l": {
		"prefix": "RemapNChunkyPointA",
		"body": "RemapNChunkyPointA ${1:*AddrNChunky.l ,x, y.l ,&RemapTable.l}",
		"description": ""
	},
	"RemapNChunkyPoint NChunky# ,x.l ,y.l ,&RemapTable.l": {
		"prefix": "RemapNChunkyPoint",
		"body": "RemapNChunkyPoint ${1:NChunky# ,x.l ,y.l ,&RemapTable.l}",
		"description": ""
	},
	"Pop Gosub|For|Select|If|While|Repeat": {
		"prefix": "Pop",
		"body": "Pop ${1:Gosub|For|Select|If|While|Repeat}",
		"description": "Sometimes, it may be necessary to exit from a particular type of program loop in order to transfer program flow to a different part of the program."
	},
	"MouseWait": {
		"prefix": "MouseWait",
		"body": "MouseWait",
		"description": "MouseWait simply halts program flow until the left mouse button is pushed."
	},
	"VWait [Frames]": {
		"prefix": "VWait",
		"body": "VWait ${1:[Frames]}",
		"description": "VWait will cause program flow to halt until the next vertical blank occurs."
	},
	"Shared Var[,Var...]": {
		"prefix": "Shared",
		"body": "Shared ${1:Var[,Var...]}",
		"description": "Shared is used to declare certain variables within a procedure definition as being global variables."
	},
	"Setint Type": {
		"prefix": "Setint",
		"body": "Setint ${1:Type}",
		"description": "Setint is used to declare a section of program code as 'interrupt' code."
	},
	"Clrlnt Type": {
		"prefix": "Clrlnt",
		"body": "Clrlnt ${1:Type}",
		"description": "ClrInt may be used to remove any interrupt handlers currently attached to the specified interrupt Type."
	},
	"SetErr": {
		"prefix": "SetErr",
		"body": "SetErr",
		"description": "The SetErr command allows you to set up custom error handlers."
	},
	"ClrErr": {
		"prefix": "ClrErr",
		"body": "ClrErr",
		"description": "ClrErr may be used to remove a custom error handler set up using SetErr."
	},
	"ErrFail": {
		"prefix": "ErrFail",
		"body": "ErrFail",
		"description": "ErrFail may be used within custom error handlers to cause a 'normal' error."
	},
	"Let Var=Expression": {
		"prefix": "Let",
		"body": "Let ${1:Var=Expression}",
		"description": "Let is an optional command used t&lt;&gt; assign a value to a variable."
	},
	"Exchange Var,Var": {
		"prefix": "Exchange",
		"body": "Exchange ${1:Var,Var}",
		"description": "Exchange will 'swap' the values contained in the 2 specified variables."
	},
	"MaxLen StringVar=Expression": {
		"prefix": "MaxLen",
		"body": "MaxLen ${1:StringVar=Expression}",
		"description": "MaxLen sets aside a block c&gt;f memory for a string variable to grow into."
	},
	"DEFTYPE .Typename [Var[,Var...]]": {
		"prefix": "DEFTYPE",
		"body": "DEFTYPE ${1:.Typename [Var[,Var...]]}",
		"description": "DEFTYPE may be used to declare a list of variables as being of a particular type."
	},
	"NEWTYPE.Typename": {
		"prefix": "NEWTYPE.Typename",
		"body": "NEWTYPE.Typename",
		"description": "NEWTYPE is used to create a custom variable type."
	},
	"SizeOf.Typename[,Entrypath]": {
		"prefix": "SizeOf.Typename[,Entrypath]",
		"body": "SizeOf.Typename[,Entrypath]",
		"description": "SizeOf allows you to determine the amount of memory, in bytes, a particular variable type takes up."
	},
	"Dim Arrayname [List] (Dimensionl[,Dimension2...])": {
		"prefix": "Dim",
		"body": "Dim ${1:Arrayname [List] (Dimensionl[,Dimension2...])}",
		"description": "Dim is used to initialize a BASIC array."
	},
	"Additem (Arrayname())": {
		"prefix": "Additem",
		"body": "Additem(${1:Arrayname()})",
		"description": "The AddItem function allows you to insert an array list item after the list array's 'current' item."
	},
	"Previtem (Arrayname())": {
		"prefix": "Previtem",
		"body": "Previtem(${1:Arrayname()})",
		"description": "Previtem will set the specified list array's 'current item' pointer to the item before the list array's old current item."
	},
	"Nextitem (Arrayname())": {
		"prefix": "Nextitem",
		"body": "Nextitem(${1:Arrayname()})",
		"description": "Nextitem will set the specified list array's 'current item' pointer to the item after the list array's old current item."
	},
	"Firstitem (Arrayname())": {
		"prefix": "Firstitem",
		"body": "Firstitem(${1:Arrayname()})",
		"description": "Executing Firstitem will set the specified list array's 'current item' pointer to the very first item in the list array."
	},
	"Lastitem (Arrayname())": {
		"prefix": "Lastitem",
		"body": "Lastitem(${1:Arrayname()})",
		"description": "Executing Lastitem will set the specified list array's 'current item' pointer to the very last item in the list array."
	},
	"Pushitem Arrayname()": {
		"prefix": "Pushitem",
		"body": "Pushitem ${1:Arrayname()}",
		"description": "Executing Pushitem causes the specified list array's 'current item' pointer to be pushed onto an internal stack."
	},
	"Popitem Arrayname()": {
		"prefix": "Popitem",
		"body": "Popitem ${1:Arrayname()}",
		"description": "Popitem 'pops' or 'recalls' a previously pushed current item pointer for the specified list array."
	},
	"Data [.Type] item[,item...]": {
		"prefix": "Data",
		"body": "Data ${1:[.Type] item[,item...]}",
		"description": "The Data statement allows you to include pre-defined values in your programs."
	},
	"Read Var[,Var...]": {
		"prefix": "Read",
		"body": "Read ${1:Var[,Var...]}",
		"description": "Read is used to transfer items in Data statements into variables."
	},
	"Restore [Program Label]": {
		"prefix": "Restore",
		"body": "Restore ${1:[Program Label]}",
		"description": "Restore allows you to set Blitz's internal 'data pointer' to a particular piece of data."
	},
	"Defaultinput": {
		"prefix": "Defaultinput",
		"body": "Defaultinput",
		"description": "Detaultinput causes all future Edit$ and Inkey$ functions to receive their input from the CLI window the Blitz program was run from."
	},
	"Popinput": {
		"prefix": "Popinput",
		"body": "Popinput",
		"description": "After input has been re-directed (eg using WindowInput/Filelnput), Popinput may be used to return the channel to it's previous condition."
	},
	"GameB (Port#)": {
		"prefix": "GameB",
		"body": "GameB(${1:Port#})",
		"description": "GameB returns the button states of CD32 style game controllers."
	},
	"ILBMlnfo Filename$": {
		"prefix": "ILBMlnfo",
		"body": "ILBMlnfo ${1:Filename$}",
		"description": "ILBMInfo is used to examine an ILBM file."
	},
	"OLimit (Quick,Low,High)": {
		"prefix": "OLimit",
		"body": "OLimit(${1:Quick,Low,High})",
		"description": "QLimit is used to limit the range of a quick number."
	},
	"Strip Lead$ (String$,Expression)": {
		"prefix": "Strip",
		"body": "Strip ${1:Lead$ (String$,Expression)}",
		"description": "StripLead$ removes all leading occurrences of the ASCII character specified by Expression from the string String$."
	},
	"USEPATH Pathtext": {
		"prefix": "USEPATH",
		"body": "USEPATH ${1:Pathtext}",
		"description": "USEPATH allows you to specify a 'shortcut' path when dealing with NEWTYPE variables."
	},
	"BLITZ": {
		"prefix": "BLITZ",
		"body": "BLITZ",
		"description": "The BLITZ directive is used to enter Blitz mode."
	},
	"AMIGA": {
		"prefix": "AMIGA",
		"body": "AMIGA",
		"description": "The AMIGA directive is used to enter Amiga mode."
	},
	"QAMIGA": {
		"prefix": "QAMIGA",
		"body": "QAMIGA",
		"description": "The QAMIGA directive is used to enter Quick Amiga mode."
	},
	"INCLUDE Filename": {
		"prefix": "INCLUDE",
		"body": "INCLUDE ${1:Filename}",
		"description": "INCLUDE is a compile time directive which causes the specified file, Filename, to be compiled as part of the programs object code."
	},
	"XINCLUDE Filename": {
		"prefix": "XINCLUDE",
		"body": "XINCLUDE ${1:Filename}",
		"description": "XINCLUDE stands for exclusive include."
	},
	"INCBIN Filename": {
		"prefix": "INCBIN",
		"body": "INCBIN ${1:Filename}",
		"description": "INCBIN allows you to include a binary file in your object code."
	},
	"INCDIR Pathname": {
		"prefix": "INCDIR",
		"body": "INCDIR ${1:Pathname}",
		"description": "The INCDIR command allows you to specify an AmigaDos path to be prefixed to any."
	},
	"CNIF Constant Comparison Constant": {
		"prefix": "CNIF",
		"body": "CNIF ${1:Constant Comparison Constant}",
		"description": "CNIF allows you to conditionally compile a section of program code based on a comparison of 2 constants."
	},
	"CEND": {
		"prefix": "CEND",
		"body": "CEND",
		"description": "CEND marks the end of a block of conditionally compiled code."
	},
	"CSIF \"String\" Comparison \"String\"": {
		"prefix": "CSIF",
		"body": "CSIF ${1:\"String\" Comparison \"String\"}",
		"description": "CSIF allows you to conditionally compile a section of program code based on a comparison of 2 literal strings."
	},
	"CELSE": {
		"prefix": "CELSE",
		"body": "CELSE",
		"description": "CELSE may be used between a CNIF or CSIF, and a CEND to cause code to be compiled when a constant comparison proves to be false."
	},
	"CERR Errormessage": {
		"prefix": "CERR",
		"body": "CERR ${1:Errormessage}",
		"description": "CERR allows a program to generate compile-time error messages."
	},
	"Macro Macroname": {
		"prefix": "Macro",
		"body": "Macro ${1:Macroname}",
		"description": "Macro is used to declare the start of a macro definition."
	},
	"Runerrson": {
		"prefix": "Runerrson",
		"body": "Runerrson",
		"description": "These two new compiler directives are for enabling and disabling error checking in different parts of the program, they override the settings in Compiler Options."
	},
	"Runerrsoff": {
		"prefix": "Runerrsoff",
		"body": "Runerrsoff",
		"description": "See description of Runerrson."
	},
	"USED ObjectName": {
		"prefix": "USED",
		"body": "USED ${1:ObjectName}",
		"description": "Used returns the currently used object number."
	},
	"Addr Objectname(Object#)": {
		"prefix": "Addr",
		"body": "Addr ${1:Objectname(Object#)}",
		"description": "Addr is a low-level function allowing advanced programmers the ability to find where a particular Blitz object resides in RAM."
	},
	"Maximum Objectname": {
		"prefix": "Maximum",
		"body": "Maximum ${1:Objectname}",
		"description": "The Maximum function allows a program to determine the 'maximum' setting for a particular Blitz object."
	},
	"Inline": {
		"prefix": "Inline",
		"body": "Inline",
		"description": ":  using PutReg and GetReg, BASIC variables can be exchanged with the 68000's data and address registers."
	},
	"Procedures": {
		"prefix": "Procedures",
		"body": "Procedures",
		"description": ":  Statements and Functions can contain 100% assembler, parameters are passed in registers d0."
	},
	"Libraries": {
		"prefix": "Libraries",
		"body": "Libraries",
		"description": ":  Actual commands can he added to Blitz using assembler."
	},
	"DCB [.Size] Repeats,Data": {
		"prefix": "DCB",
		"body": "DCB ${1:[.Size] Repeats,Data}",
		"description": "DCB stantd for 'define cotistant block' ."
	},
	"EVEN": {
		"prefix": "EVEN",
		"body": "EVEN",
		"description": "EVEN allows you to word align B1itz's internal program counter."
	},
	"GetReg 68000 Reg,Expression": {
		"prefix": "GetReg",
		"body": "GetReg ${1:68000 Reg,Expression}",
		"description": "GetReg allows you to tranfer the result of a BASIC expressition to a 68000 register."
	},
	"PutReg 68000 Reg,Variable": {
		"prefix": "PutReg",
		"body": "PutReg ${1:68000 Reg,Variable}",
		"description": "PutReg may he used to transfer a vlue from any 68000 register (d0-d7/a0-a7) into a BASIC variable."
	},
	"SysJsr RBoutine": {
		"prefix": "SysJsr",
		"body": "SysJsr ${1:RBoutine}",
		"description": "SysJsr allows you to call any of Blitz's system routines from your own program."
	},
	"TokeJsr Token[,Form]": {
		"prefix": "TokeJsr",
		"body": "TokeJsr ${1:Token[,Form]}",
		"description": "TokeJsr allows you to call any of Blitz's library based routines."
	},
	"ALibJsr Token[,Form]": {
		"prefix": "ALibJsr",
		"body": "ALibJsr ${1:Token[,Form]}",
		"description": "ALibJsr is only used when writing Blitz libraries."
	},
	"BLibJsr Token[,Form]": {
		"prefix": "BLibJsr",
		"body": "BLibJsr ${1:Token[,Form]}",
		"description": "BLibJsr is only used when writing Blitz libraries."
	},
	"AsmExit": {
		"prefix": "AsmExit",
		"body": "AsmExit",
		"description": "AsmExit is used to exit from functions and statements written in assembler."
	},
	"Peek$ (Address,length)": {
		"prefix": "Peek$",
		"body": "Peek$(${1:Address,length})",
		"description": "Peek$ will return a string of characters corresponding to bytes peeked from consective memory locations starting at Address, and Length characters in length."
	},
	"WBStartup": {
		"prefix": "WBStartup",
		"body": "WBStartup",
		"description": "By executing WBStartup at some point in your program, your program will be given the ability to run from Workbench."
	},
	"CloseEd": {
		"prefix": "CloseEd",
		"body": "CloseEd",
		"description": "The CloseEd statement will cause the Blitz editor screen to 'close down' when programs are executed from within Blitz."
	},
	"NoCli": {
		"prefix": "NoCli",
		"body": "NoCli",
		"description": "NoCli will prevent the nonnal 'Default Cli' from opening when programs are executed from within Blitz."
	},
	"Display On|Off": {
		"prefix": "Display",
		"body": "Display ${1:On|Off}",
		"description": "Display is a blitz mode only command which allows you to 'turn on' or 'turn off' the entire display."
	},
	"BitMapinput": {
		"prefix": "BitMapinput",
		"body": "BitMapinput",
		"description": "BitMaplnput is a special command designed to allow you to use Edit$ and Edit in Blitz mode."
	},
	"Clueue Queue#,Max Items": {
		"prefix": "Clueue",
		"body": "Clueue ${1:Queue#,Max Items}",
		"description": "The Queue command creates a queue object for use with the QBlit and UnQueue commands."
	},
	"Load Palette Palette#, Filename$[,Palette Offset]": {
		"prefix": "Load",
		"body": "Load ${1:Palette Palette#, Filename$[,Palette Offset]}",
		"description": "LoadPalette creates and initializes a palette object."
	},
	"Fadeln Palette#[,Rate[,Low Colour, High Colour]]": {
		"prefix": "Fadeln",
		"body": "Fadeln ${1:Palette#[,Rate[,Low Colour, High Colour]]}",
		"description": "Fadein will cause the colour palette of the currently used slice to be 'faded in' from black up to the RGB values contained in the specified Palette#."
	},
	"GetMedinstr Channel": {
		"prefix": "GetMedinstr",
		"body": "GetMedinstr ${1:Channel}",
		"description": "GetMedInstr returns the current instrument playing through the specified audio channel."
	},
	"Windowinput Window#": {
		"prefix": "Windowinput",
		"body": "Windowinput ${1:Window#}",
		"description": "Windowinput will cause any future executions of the Inkey$, Edit$ or Edit functions to receive their input as keystrokes from the specified window object."
	},
	"Flush Events [IDCMP_Flag]": {
		"prefix": "Flush",
		"body": "Flush ${1:Events [IDCMP_Flag]}",
		"description": "When window events occur in Blitz, they are automatically 'queued' for you."
	},
	"WLine X1,Y1,X2,Y2[,Xn,Yn..],Colour": {
		"prefix": "WLine",
		"body": "WLine ${1:X1,Y1,X2,Y2[,Xn,Yn..],Colour}",
		"description": "Wline allows you to draw a line or a series of lines into the currently used window."
	},
	"Gadget Border X,Y,Width,Height": {
		"prefix": "Gadget",
		"body": "Gadget ${1:Border X,Y,Width,Height}",
		"description": "The GadgetBorder command may be used to draw a rectangular border into the currently used window."
	},
	"Subitem MenuList#,Flags,Menu,Item,Subitem,Subitem text$[,Shortcut$]": {
		"prefix": "Subitem",
		"body": "Subitem ${1:MenuList#,Flags,Menu,Item,Subitem,Subitem text$[,Shortcut$]}",
		"description": "All menu items may have an optional list of sub menu items attached to them."
	},
	"SubitemOff X Offset,Y Offset": {
		"prefix": "SubitemOff",
		"body": "SubitemOff ${1:X Offset,Y Offset}",
		"description": "SubItemOff allows you to control the relative position of the top of a list of sub menu items, in relation to their associated menu item."
	},
	"GTSetinteger GTList#,id,value": {
		"prefix": "GTSetinteger",
		"body": "GTSetinteger ${1:GTList#,id,value}",
		"description": "Used with both GTInteger and GTNumber gadgets, GTSetInteger will not only update the contents of the gadget but redraw it also."
	},
	"GTGetinteger GTList#,id": {
		"prefix": "GTGetinteger",
		"body": "GTGetinteger ${1:GTList#,id}",
		"description": "Used to read the contents from a GTlnteger gadget."
	},
	"GetRexxResult() Resultl=GetRexxResult(rexxmsg,ResultNum)": {
		"prefix": "GetRexxResult()",
		"body": "GetRexxResult() ${1:Resultl=GetRexxResult(rexxmsg,ResultNum)}",
		"description": "GetRexxResult extracts either of the two result numbers from the RexxMsg structure."
	},
	"RexxError() ErrorString$=RexxError(ErrorCode)": {
		"prefix": "RexxError()",
		"body": "RexxError() ${1:ErrorString$=RexxError(ErrorCode)}",
		"description": "RexxError converts a numerical error code such as you would get from GetRexxResult(msg,2) into an understandable string error message."
	},
	"Quickplay On|Off": {
		"prefix": "Quickplay",
		"body": "Quickplay ${1:On|Off}",
		"description": "QuickPlay will alter the way tapes are played using the PlayBack command."
	},
	"ABCD": {
		"prefix": "ABCD",
		"body": "ABCD",
		"description": "Add with extend using BCD."
	},
	"ADD": {
		"prefix": "ADD",
		"body": "ADD",
		"description": "Add binary."
	},
	"ADDX": {
		"prefix": "ADDX",
		"body": "ADDX",
		"description": "Add with Extend."
	},
	"AND": {
		"prefix": "AND",
		"body": "AND",
		"description": "AND logical."
	},
	"AS": {
		"prefix": "AS",
		"body": "AS",
		"description": "Arithmetic Shift Left."
	},
	"ASR": {
		"prefix": "ASR",
		"body": "ASR",
		"description": "Arithmetic Shift Pight."
	},
	"Bcc": {
		"prefix": "Bcc",
		"body": "Bcc",
		"description": "Branch Conditionally."
	},
	"BCHG": {
		"prefix": "BCHG",
		"body": "BCHG",
		"description": "Test a Bit & Change."
	},
	"BCLR": {
		"prefix": "BCLR",
		"body": "BCLR",
		"description": "Test a Bit & Clear."
	},
	"BRA": {
		"prefix": "BRA",
		"body": "BRA",
		"description": "Branch Always."
	},
	"BSET": {
		"prefix": "BSET",
		"body": "BSET",
		"description": "Test a Bit & Set."
	},
	"BTST": {
		"prefix": "BTST",
		"body": "BTST",
		"description": "Test a Bit."
	},
	"CHK": {
		"prefix": "CHK",
		"body": "CHK",
		"description": "Check Register Against Bounds."
	},
	"CLR": {
		"prefix": "CLR",
		"body": "CLR",
		"description": "Clear an Operand."
	},
	"CMP": {
		"prefix": "CMP",
		"body": "CMP",
		"description": "Compare."
	},
	"CMPM": {
		"prefix": "CMPM",
		"body": "CMPM",
		"description": "Compare Memory."
	},
	"DBcc": {
		"prefix": "DBcc",
		"body": "DBcc",
		"description": "Test Condition, Decrement, and Branch."
	},
	"DIVS": {
		"prefix": "DIVS",
		"body": "DIVS",
		"description": "Signed Divide."
	},
	"DIVU": {
		"prefix": "DIVU",
		"body": "DIVU",
		"description": "Unsigned Divide."
	},
	"EOR": {
		"prefix": "EOR",
		"body": "EOR",
		"description": "Exclusive OR Logical."
	},
	"EXG": {
		"prefix": "EXG",
		"body": "EXG",
		"description": "Exchange Registers."
	},
	"EXT": {
		"prefix": "EXT",
		"body": "EXT",
		"description": "Sign Extend."
	},
	"ILLEGAL": {
		"prefix": "ILLEGAL",
		"body": "ILLEGAL",
		"description": "Illegal Instruction."
	},
	"JMP": {
		"prefix": "JMP",
		"body": "JMP",
		"description": "Jump."
	},
	"JSR": {
		"prefix": "JSR",
		"body": "JSR",
		"description": "Jump to Subroutine."
	},
	"LEA": {
		"prefix": "LEA",
		"body": "LEA",
		"description": "Load Effective Address."
	},
	"LINK": {
		"prefix": "LINK",
		"body": "LINK",
		"description": "LINK and Allocate."
	},
	"LSL": {
		"prefix": "LSL",
		"body": "LSL",
		"description": "Logical Shift Left."
	},
	"LSR": {
		"prefix": "LSR",
		"body": "LSR",
		"description": "Logical Shift Right."
	},
	"MOVE": {
		"prefix": "MOVE",
		"body": "MOVE",
		"description": "Move Data from Source to Destination."
	},
	"MOVEM": {
		"prefix": "MOVEM",
		"body": "MOVEM",
		"description": "Move Multiple Registers."
	},
	"MOVEP": {
		"prefix": "MOVEP",
		"body": "MOVEP",
		"description": "Move Paripheral."
	},
	"MULS": {
		"prefix": "MULS",
		"body": "MULS",
		"description": "Signed multiple."
	},
	"MULU": {
		"prefix": "MULU",
		"body": "MULU",
		"description": "Unsigned Multiple."
	},
	"NBCD": {
		"prefix": "NBCD",
		"body": "NBCD",
		"description": "Negate Decimal with Extend."
	},
	"NEG": {
		"prefix": "NEG",
		"body": "NEG",
		"description": "Negate."
	},
	"NEGX": {
		"prefix": "NEGX",
		"body": "NEGX",
		"description": "Negate with Extend."
	},
	"NOP": {
		"prefix": "NOP",
		"body": "NOP",
		"description": "No Operation."
	},
	"NOT": {
		"prefix": "NOT",
		"body": "NOT",
		"description": "Logical Complement."
	},
	"OR": {
		"prefix": "OR",
		"body": "OR",
		"description": "Inclusive OR Logical."
	},
	"PEA": {
		"prefix": "PEA",
		"body": "PEA",
		"description": "Push Effective Address."
	},
	"RESET": {
		"prefix": "RESET",
		"body": "RESET",
		"description": "Reset External Device."
	},
	"ROL": {
		"prefix": "ROL",
		"body": "ROL",
		"description": "Rotate Left (without Extend)."
	},
	"ROR": {
		"prefix": "ROR",
		"body": "ROR",
		"description": "Rotate Right (without Extend)."
	},
	"ROXL": {
		"prefix": "ROXL",
		"body": "ROXL",
		"description": "Rotate Left with Extend."
	},
	"ROXR": {
		"prefix": "ROXR",
		"body": "ROXR",
		"description": "Rotate Right with Extend."
	},
	"RTE": {
		"prefix": "RTE",
		"body": "RTE",
		"description": "Return from Exception."
	},
	"RTR": {
		"prefix": "RTR",
		"body": "RTR",
		"description": "Return and Restore Condition Codes."
	},
	"RTS": {
		"prefix": "RTS",
		"body": "RTS",
		"description": "Return from Subroutine."
	},
	"SBCD": {
		"prefix": "SBCD",
		"body": "SBCD",
		"description": "Subtract Decimal with Extend."
	},
	"Scc": {
		"prefix": "Scc",
		"body": "Scc",
		"description": "Set according to Condition."
	},
	"STOP": {
		"prefix": "STOP",
		"body": "STOP",
		"description": "Load Status Register and Stop."
	},
	"SUB": {
		"prefix": "SUB",
		"body": "SUB",
		"description": "Subtract Binary."
	},
	"SUBX": {
		"prefix": "SUBX",
		"body": "SUBX",
		"description": "Subtract with Extend."
	},
	"SWAP": {
		"prefix": "SWAP",
		"body": "SWAP",
		"description": "Swap Register Halves."
	},
	"TAS": {
		"prefix": "TAS",
		"body": "TAS",
		"description": "Test & Set an Operand."
	},
	"TRAP": {
		"prefix": "TRAP",
		"body": "TRAP",
		"description": "Trap."
	},
	"TRAPV": {
		"prefix": "TRAPV",
		"body": "TRAPV",
		"description": "Trap an Overflow."
	},
	"TST": {
		"prefix": "TST",
		"body": "TST",
		"description": "Test an Operand."
	},
	"UNLK": {
		"prefix": "UNLK",
		"body": "UNLK",
		"description": "UnLINK."
	},
	"OMEDVerboseErrors": {
		"prefix": "OMEDVerboseErrors",
		"body": "OMEDVerboseErrors",
		"description": "Do verbose error reports."
	},
	"OMEDQuietErrors": {
		"prefix": "OMEDQuietErrors",
		"body": "OMEDQuietErrors",
		"description": "Do quiet error reports."
	},
	"OMEDError": {
		"prefix": "OMEDError",
		"body": "OMEDError",
		"description": "Return True/False error status."
	},
	"OMEDErrorMessage": {
		"prefix": "OMEDErrorMessage",
		"body": "OMEDErrorMessage",
		"description": "Return error message string."
	},
	"OMEDOn": {
		"prefix": "OMEDOn",
		"body": "OMEDOn",
		"description": "Turn on OMED."
	},
	"OMEDOff": {
		"prefix": "OMEDOff",
		"body": "OMEDOff",
		"description": "Turn off OMED."
	},
	"OMEDLoad \"filename\", bank": {
		"prefix": "OMEDLoad",
		"body": "OMEDLoad ${1:\"filename\", bank}",
		"description": "Load song from file into chip memory bank."
	},
	"OMEDLoadFast \"filename\",bank": {
		"prefix": "OMEDLoadFast",
		"body": "OMEDLoadFast ${1:\"filename\",bank}",
		"description": "Load song from file into fast memory bank."
	},
	"OMEDUnload bank": {
		"prefix": "OMEDUnload",
		"body": "OMEDUnload ${1:bank}",
		"description": "Unload MED bank."
	},
	"OMEDUnloadAll": {
		"prefix": "OMEDUnloadAll",
		"body": "OMEDUnloadAll",
		"description": "Unload all MED banks."
	},
	"OMEDPlay bank[,song]": {
		"prefix": "OMEDPlay",
		"body": "OMEDPlay ${1:bank[,song]}",
		"description": "Play song and optional sub song."
	},
	"OMEDStop": {
		"prefix": "OMEDStop",
		"body": "OMEDStop",
		"description": "Stop playing."
	},
	"OMEDContinue": {
		"prefix": "OMEDContinue",
		"body": "OMEDContinue",
		"description": "Continue playing."
	},
	"OMEDVolume volume": {
		"prefix": "OMEDVolume",
		"body": "OMEDVolume ${1:volume}",
		"description": "Set volume."
	},
	"MTPlayFX &sfxStruct.l": {
		"prefix": "MTPlayFX",
		"body": "MTPlayFX ${1:&sfxStruct.l}",
		"description": "Play a sound effect."
	}
}